
V8_Roomba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008914  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b50  08008b50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008b50  08008b50  00018b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf4  20000070  08008bd0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004d64  08008bd0  00024d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f11  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004839  00000000  00000000  00043fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  000487f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  0004a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be8f  00000000  00000000  0004b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f11c  00000000  00000000  0006785f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e32  00000000  00000000  0008697b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001277ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007108  00000000  00000000  00127800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a9c 	.word	0x08008a9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08008a9c 	.word	0x08008a9c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>:
#include "MPU_6050_Driver.hpp"

MPU_6050::MPU_6050(bool setAddressHigh, I2C_HandleTypeDef *hi2c_in,
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	72fb      	strb	r3, [r7, #11]
  GPIO_TypeDef* addressPinReg, uint16_t addressPin):
  addressPin(addressPinReg), addressPinVal(addressPin)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	621a      	str	r2, [r3, #32]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	8b3a      	ldrh	r2, [r7, #24]
 8000d8a:	849a      	strh	r2, [r3, #36]	; 0x24
{
  if (setAddressHigh)
 8000d8c:	7afb      	ldrb	r3, [r7, #11]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft+0x2a>
  {
    address = ADDRESS_HIGH;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2269      	movs	r2, #105	; 0x69
 8000d96:	801a      	strh	r2, [r3, #0]
 8000d98:	e002      	b.n	8000da0 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft+0x30>
  }
  else
    address= ADDRESS_LOW;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2268      	movs	r2, #104	; 0x68
 8000d9e:	801a      	strh	r2, [r3, #0]

  imuData = new IMU_Data();
 8000da0:	201c      	movs	r0, #28
 8000da2:	f007 fcc5 	bl	8008730 <_Znwj>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	460a      	mov	r2, r1
 8000dac:	2300      	movs	r3, #0
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	6053      	str	r3, [r2, #4]
 8000db2:	6093      	str	r3, [r2, #8]
 8000db4:	60d3      	str	r3, [r2, #12]
 8000db6:	6113      	str	r3, [r2, #16]
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6299      	str	r1, [r3, #40]	; 0x28

  hi2c = hi2c_in;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
} 
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_ZN8MPU_6050D1Ev>:

MPU_6050::~MPU_6050()
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
{
	delete imuData;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <_ZN8MPU_6050D1Ev+0x18>
 8000de0:	211c      	movs	r1, #28
 8000de2:	4618      	mov	r0, r3
 8000de4:	f007 fca2 	bl	800872c <_ZdlPvj>
}
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_ZN8MPU_605010initializeEv>:

bool MPU_6050::initialize(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  if (address == ADDRESS_HIGH)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	2b69      	cmp	r3, #105	; 0x69
 8000e00:	d107      	bne.n	8000e12 <_ZN8MPU_605010initializeEv+0x20>
  {
    HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_SET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a18      	ldr	r0, [r3, #32]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 ff99 	bl	8002d44 <HAL_GPIO_WritePin>
  }
  sleepMode(false);
 8000e12:	2100      	movs	r1, #0
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f9be 	bl	8001196 <_ZN8MPU_60509sleepModeEb>
  resetRegisters();
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f99f 	bl	800115e <_ZN8MPU_605014resetRegistersEv>
  disableTemp(true);
 8000e20:	2101      	movs	r1, #1
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 fa36 	bl	8001294 <_ZN8MPU_605011disableTempEb>
  setFullScaleAccel(ACCEL_FULLSCALE_16);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f854 	bl	8000ed8 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale>
  setFullScaleGyro(GYRO_FULLSCALE_1000);
 8000e30:	2102      	movs	r1, #2
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f80a 	bl	8000e4c <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale>
  selectClockSource(INTERNAL_8MHZ);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f9ee 	bl	800121c <_ZN8MPU_605017selectClockSourceE12Clock_Select>
//  if (!selfTest())
//  {
//    return INIT_FAIL;
//  }
  return INIT_SUCCESS;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale>:
  HAL_I2C_Mem_Write(hi2c, (address<<1), SMPLRT_DIV, 1,
    rate_divider, 1, HAL_MAX_DELAY);
}

void MPU_6050::setFullScaleGyro(Gyro_FullScale gyro_fs_setting)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af04      	add	r7, sp, #16
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
  uint8_t config[1] = {(uint8_t)(gyro_fs_setting << 3)};
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), GYRO_CONFIG, 1,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	221b      	movs	r2, #27
 8000e80:	f002 f8be 	bl	8003000 <HAL_I2C_Mem_Write>
    config, 1, HAL_MAX_DELAY);

  switch(gyro_fs_setting)
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d81a      	bhi.n	8000ec0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x44>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000ea9 	.word	0x08000ea9
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000eb9 	.word	0x08000eb9
  {
    case 0x00: // 250
      LSB_deg_s = GYRO_FS_250_RANGE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x7c>)
 8000ea4:	61da      	str	r2, [r3, #28]
      break; 
 8000ea6:	e00b      	b.n	8000ec0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x01: //500
      LSB_deg_s = GYRO_FS_500_RANGE;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x80>)
 8000eac:	61da      	str	r2, [r3, #28]
      break;
 8000eae:	e007      	b.n	8000ec0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x02: // 1000
      LSB_deg_s = GYRO_FS_1000_RANGE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x84>)
 8000eb4:	61da      	str	r2, [r3, #28]
      break;
 8000eb6:	e003      	b.n	8000ec0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x03: // 2000
      LSB_deg_s = GYRO_FS_2000_RANGE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x88>)
 8000ebc:	61da      	str	r2, [r3, #28]
      break;
 8000ebe:	bf00      	nop
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	43030000 	.word	0x43030000
 8000ecc:	42830000 	.word	0x42830000
 8000ed0:	42033333 	.word	0x42033333
 8000ed4:	41833333 	.word	0x41833333

08000ed8 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale>:

void MPU_6050::setFullScaleAccel(Accel_FullScale accel_fs_setting)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  uint8_t config[1] = {(uint8_t)(accel_fs_setting << 3)};
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), ACCEL_CONFIG, 1,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	221c      	movs	r2, #28
 8000f0c:	f002 f878 	bl	8003000 <HAL_I2C_Mem_Write>
    config, 1, HAL_MAX_DELAY);

  switch(accel_fs_setting)
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d81e      	bhi.n	8000f54 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
 8000f16:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x44>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f2d 	.word	0x08000f2d
 8000f20:	08000f37 	.word	0x08000f37
 8000f24:	08000f41 	.word	0x08000f41
 8000f28:	08000f4b 	.word	0x08000f4b
  {
    case 0x00: // 2
      LSB_g = ACCEL_FS_2_RANGE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000f32:	619a      	str	r2, [r3, #24]
      break; 
 8000f34:	e00e      	b.n	8000f54 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x01: // 4
      LSB_g = ACCEL_FS_4_RANGE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000f3c:	619a      	str	r2, [r3, #24]
      break;
 8000f3e:	e009      	b.n	8000f54 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x02: // 8
      LSB_g = ACCEL_FS_8_RANGE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000f46:	619a      	str	r2, [r3, #24]
      break;
 8000f48:	e004      	b.n	8000f54 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x03: // 16
      LSB_g = ACCEL_FS_16_RANGE;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000f50:	619a      	str	r2, [r3, #24]
      break;
 8000f52:	bf00      	nop
  }
}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_ZN8MPU_605018readAccelRegistersEv>:


void MPU_6050::readAccelRegisters(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
  int16_t accelX, accelY, accelZ;
  uint8_t accelRec[6];

  HAL_I2C_Mem_Read(hi2c,(address<<1) | 0x01, ACCEL_XOUT_H, 1,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	b21b      	sxth	r3, r3
 8000f76:	b299      	uxth	r1, r3
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2306      	movs	r3, #6
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	223b      	movs	r2, #59	; 0x3b
 8000f8c:	f002 f932 	bl	80031f4 <HAL_I2C_Mem_Read>
    accelRec, 6, HAL_MAX_DELAY);
  
  accelX = (int16_t)(accelRec[0] << 8 | accelRec[1]);
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	7b7b      	ldrb	r3, [r7, #13]
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	82fb      	strh	r3, [r7, #22]
  accelY = (int16_t)(accelRec[2] << 8 | accelRec[3]);
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	82bb      	strh	r3, [r7, #20]
  accelZ = (int16_t)(accelRec[4] << 8 | accelRec[5]);
 8000fac:	7c3b      	ldrb	r3, [r7, #16]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	7c7b      	ldrb	r3, [r7, #17]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	827b      	strh	r3, [r7, #18]

  imuData->accX = accelX;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fc2:	ee07 2a90 	vmov	s15, r2
 8000fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fca:	edc3 7a00 	vstr	s15, [r3]
  imuData->accY = accelY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000fd6:	ee07 2a90 	vmov	s15, r2
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	edc3 7a01 	vstr	s15, [r3, #4]
  imuData->accZ = accelZ;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000fea:	ee07 2a90 	vmov	s15, r2
 8000fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN8MPU_605017readGyroRegistersEv>:

void MPU_6050::readGyroRegisters(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b08a      	sub	sp, #40	; 0x28
 8001002:	af04      	add	r7, sp, #16
 8001004:	6078      	str	r0, [r7, #4]
  int16_t gyroX, gyroY, gyroZ;
  uint8_t gyroRec[6];

  HAL_I2C_Mem_Read(hi2c,(address<<1) | 0x01,GYRO_XOUT_H, 1,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b21b      	sxth	r3, r3
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	b21b      	sxth	r3, r3
 8001018:	b299      	uxth	r1, r3
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2306      	movs	r3, #6
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2243      	movs	r2, #67	; 0x43
 800102e:	f002 f8e1 	bl	80031f4 <HAL_I2C_Mem_Read>
    gyroRec, 6, HAL_MAX_DELAY);
  
  gyroX = (int16_t)(gyroRec[0] << 8 | gyroRec[1]);
 8001032:	7b3b      	ldrb	r3, [r7, #12]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	82fb      	strh	r3, [r7, #22]
  gyroY = (int16_t)(gyroRec[2] << 8 | gyroRec[3]);
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	82bb      	strh	r3, [r7, #20]
  gyroZ = (int16_t)(gyroRec[4] << 8 | gyroRec[5]);
 800104e:	7c3b      	ldrb	r3, [r7, #16]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7c7b      	ldrb	r3, [r7, #17]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	827b      	strh	r3, [r7, #18]

  imuData->gyroX = gyroX;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001064:	ee07 2a90 	vmov	s15, r2
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	edc3 7a03 	vstr	s15, [r3, #12]
  imuData->gyroY = gyroY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001078:	ee07 2a90 	vmov	s15, r2
 800107c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001080:	edc3 7a04 	vstr	s15, [r3, #16]
  imuData->gyroZ = gyroZ;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800108c:	ee07 2a90 	vmov	s15, r2
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001098:	bf00      	nop
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN8MPU_605017readTempRegistersEv>:

void MPU_6050::readTempRegisters(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	6078      	str	r0, [r7, #4]
  int16_t temp;
  uint8_t tempRecv[2];

  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, TEMP_OUT_H, 1,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b299      	uxth	r1, r3
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2302      	movs	r3, #2
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2241      	movs	r2, #65	; 0x41
 80010d0:	f002 f890 	bl	80031f4 <HAL_I2C_Mem_Read>
    tempRecv, 2, HAL_MAX_DELAY);

  temp = (int16_t)(tempRecv[0] << 8 | tempRecv[1]);
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	81fb      	strh	r3, [r7, #14]
  temp = temp / 340 + 36.53;
 80010e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_ZN8MPU_605017readTempRegistersEv+0x98>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	11d2      	asrs	r2, r2, #7
 80010ee:	17db      	asrs	r3, r3, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9c5 	bl	8000484 <__aeabi_i2d>
 80010fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001130 <_ZN8MPU_605017readTempRegistersEv+0x90>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff f874 	bl	80001ec <__adddf3>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fc36 	bl	800097c <__aeabi_d2iz>
 8001110:	4603      	mov	r3, r0
 8001112:	81fb      	strh	r3, [r7, #14]

  imuData->temp = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800111c:	ee07 2a90 	vmov	s15, r2
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	0a3d70a4 	.word	0x0a3d70a4
 8001134:	404243d7 	.word	0x404243d7
 8001138:	60606061 	.word	0x60606061

0800113c <_ZN8MPU_605010updateDataEv>:

void MPU_6050::updateData(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  readTempRegisters();
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff ffab 	bl	80010a0 <_ZN8MPU_605017readTempRegistersEv>
  readGyroRegisters();
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff57 	bl	8000ffe <_ZN8MPU_605017readGyroRegistersEv>
  readAccelRegisters();
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff03 	bl	8000f5c <_ZN8MPU_605018readAccelRegistersEv>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN8MPU_605014resetRegistersEv>:

void MPU_6050::resetRegisters(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af04      	add	r7, sp, #16
 8001164:	6078      	str	r0, [r7, #4]
  uint8_t resetRegisters[1] = {0b00000111};
 8001166:	2307      	movs	r3, #7
 8001168:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), SIGNAL_PATH_RESET, 1,
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	b299      	uxth	r1, r3
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	2268      	movs	r2, #104	; 0x68
 800118a:	f001 ff39 	bl	8003000 <HAL_I2C_Mem_Write>
    resetRegisters, 1, HAL_MAX_DELAY);
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZN8MPU_60509sleepModeEb>:

void MPU_6050::sleepMode(bool sleep)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af04      	add	r7, sp, #16
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 80011a2:	2300      	movs	r3, #0
 80011a4:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	9302      	str	r3, [sp, #8]
 80011c0:	2301      	movs	r3, #1
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	226b      	movs	r2, #107	; 0x6b
 80011ce:	f002 f811 	bl	80031f4 <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0] & 0b10111111) | ((sleep?0x01:0x00) << 6);
 80011d2:	7b3b      	ldrb	r3, [r7, #12]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	d001      	beq.n	80011e6 <_ZN8MPU_60509sleepModeEb+0x50>
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	e000      	b.n	80011e8 <_ZN8MPU_60509sleepModeEb+0x52>
 80011e6:	2200      	movs	r2, #0
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	b299      	uxth	r1, r3
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	226b      	movs	r2, #107	; 0x6b
 8001210:	f001 fef6 	bl	8003000 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_ZN8MPU_605017selectClockSourceE12Clock_Select>:

void MPU_6050::selectClockSource(Clock_Select clock_sel)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af04      	add	r7, sp, #16
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001228:	2300      	movs	r3, #0
 800122a:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	b21b      	sxth	r3, r3
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	b21b      	sxth	r3, r3
 800123e:	b299      	uxth	r1, r3
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	226b      	movs	r2, #107	; 0x6b
 8001254:	f001 ffce 	bl	80031f4 <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0]&0b11111000) | clock_sel;
 8001258:	7b3b      	ldrb	r3, [r7, #12]
 800125a:	f023 0307 	bic.w	r3, r3, #7
 800125e:	b2da      	uxtb	r2, r3
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	4313      	orrs	r3, r2
 8001264:	b2db      	uxtb	r3, r3
 8001266:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	b299      	uxth	r1, r3
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2301      	movs	r3, #1
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	226b      	movs	r2, #107	; 0x6b
 8001288:	f001 feba 	bl	8003000 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_ZN8MPU_605011disableTempEb>:

void MPU_6050::disableTemp(bool disable)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af04      	add	r7, sp, #16
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 80012a0:	2300      	movs	r3, #0
 80012a2:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1), PWR_MGMT_1, 1,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	b299      	uxth	r1, r3
 80012b0:	f04f 33ff 	mov.w	r3, #4294967295
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	2301      	movs	r3, #1
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	226b      	movs	r2, #107	; 0x6b
 80012c4:	f001 ff96 	bl	80031f4 <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0] & 0b11110111) | (disable?0x01:0x00) << 3;
 80012c8:	7b3b      	ldrb	r3, [r7, #12]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	f023 0308 	bic.w	r3, r3, #8
 80012d0:	b25b      	sxtb	r3, r3
 80012d2:	78fa      	ldrb	r2, [r7, #3]
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d001      	beq.n	80012dc <_ZN8MPU_605011disableTempEb+0x48>
 80012d8:	2208      	movs	r2, #8
 80012da:	e000      	b.n	80012de <_ZN8MPU_605011disableTempEb+0x4a>
 80012dc:	2200      	movs	r2, #0
 80012de:	4313      	orrs	r3, r2
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b299      	uxth	r1, r3
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2301      	movs	r3, #1
 8001304:	226b      	movs	r2, #107	; 0x6b
 8001306:	f001 fe7b 	bl	8003000 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_ZN8MPU_605017generateNewResultEv>:
  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_2, 1,
    pwr_mgmt2, 1, HAL_MAX_DELAY);
}

IMU_Data* MPU_6050::generateNewResult(void)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  updateData();
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff0e 	bl	800113c <_ZN8MPU_605010updateDataEv>
  return imuData;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	ed87 0a01 	vstr	s0, [r7, #4]
 8001336:	edd7 7a01 	vldr	s15, [r7, #4]
 800133a:	eef0 7ae7 	vabs.f32	s15, s15
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>:
#include "MotorControl.hpp"
#include "math.h"
#include "main.h"

Motor::Motor(TIM_HandleTypeDef *timerF, TIM_HandleTypeDef *timerB,
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
  unsigned int channelF, unsigned int channelB):
  timer_f(timerF), timer_b(timerB), channel_f(channelF), channel_b(channelB)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
{}
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_ZN5Motor4initEv>:

void Motor::init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	 HAL_TIM_PWM_Start(timer_f, channel_f);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f003 fa2e 	bl	80047fc <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(timer_b, channel_b);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4610      	mov	r0, r2
 80013ac:	f003 fa26 	bl	80047fc <HAL_TIM_PWM_Start>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_ZNK5Motor5driveEv>:

void Motor::drive(void) const
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  unsigned int currentChannel;

  TIM_HandleTypeDef *offTimer;
  unsigned int offChannel;

  if (speed > 0)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80013c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	dd0c      	ble.n	80013ea <_ZNK5Motor5driveEv+0x32>
  {
	  offTimer = timer_b;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	617b      	str	r3, [r7, #20]
	  offChannel = channel_b;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	613b      	str	r3, [r7, #16]
	  currentTimer = timer_f;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61fb      	str	r3, [r7, #28]
	  currentChannel = channel_f;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	e013      	b.n	8001412 <_ZNK5Motor5driveEv+0x5a>
  }
  else if (speed <= 0)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d80b      	bhi.n	8001412 <_ZNK5Motor5driveEv+0x5a>
  {
    
    currentTimer = timer_b;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61fb      	str	r3, [r7, #28]
    currentChannel = channel_b;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
    offTimer = timer_f;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	617b      	str	r3, [r7, #20]
    offChannel = channel_f;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	613b      	str	r3, [r7, #16]
  }

  unsigned int pwm_comp = fabs(speed * 100);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	edd3 7a04 	vldr	s15, [r3, #16]
 8001418:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80014b0 <_ZNK5Motor5driveEv+0xf8>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	f7ff ff82 	bl	800132c <_ZSt4fabsf>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(currentTimer, currentChannel, pwm_comp);
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d104      	bne.n	8001446 <_ZNK5Motor5driveEv+0x8e>
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
 8001444:	e013      	b.n	800146e <_ZNK5Motor5driveEv+0xb6>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d104      	bne.n	8001456 <_ZNK5Motor5driveEv+0x9e>
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	639a      	str	r2, [r3, #56]	; 0x38
 8001454:	e00b      	b.n	800146e <_ZNK5Motor5driveEv+0xb6>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	2b08      	cmp	r3, #8
 800145a:	d104      	bne.n	8001466 <_ZNK5Motor5driveEv+0xae>
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	63da      	str	r2, [r3, #60]	; 0x3c
 8001464:	e003      	b.n	800146e <_ZNK5Motor5driveEv+0xb6>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d104      	bne.n	800147e <_ZNK5Motor5driveEv+0xc6>
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2200      	movs	r2, #0
 800147a:	635a      	str	r2, [r3, #52]	; 0x34

  return;
 800147c:	e014      	b.n	80014a8 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d104      	bne.n	800148e <_ZNK5Motor5driveEv+0xd6>
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	639a      	str	r2, [r3, #56]	; 0x38
  return;
 800148c:	e00c      	b.n	80014a8 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d104      	bne.n	800149e <_ZNK5Motor5driveEv+0xe6>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	63da      	str	r2, [r3, #60]	; 0x3c
  return;
 800149c:	e004      	b.n	80014a8 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
  return;
 80014a6:	bf00      	nop
}
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	42c80000 	.word	0x42c80000

080014b4 <_ZN5Motor6targetEf>:

void Motor::target(float speed_in)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	ed87 0a00 	vstr	s0, [r7]
  if (speed_in > 1)
 80014c0:	edd7 7a00 	vldr	s15, [r7]
 80014c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	dd04      	ble.n	80014dc <_ZN5Motor6targetEf+0x28>
    speed = 1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80014d8:	611a      	str	r2, [r3, #16]
  else if (speed_in < -1)
    speed = -1;
  else
    speed = speed_in;

  return;
 80014da:	e010      	b.n	80014fe <_ZN5Motor6targetEf+0x4a>
  else if (speed_in < -1)
 80014dc:	edd7 7a00 	vldr	s15, [r7]
 80014e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	d503      	bpl.n	80014f6 <_ZN5Motor6targetEf+0x42>
    speed = -1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_ZN5Motor6targetEf+0x54>)
 80014f2:	611a      	str	r2, [r3, #16]
  return;
 80014f4:	e003      	b.n	80014fe <_ZN5Motor6targetEf+0x4a>
    speed = speed_in;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	611a      	str	r2, [r3, #16]
  return;
 80014fc:	bf00      	nop
}
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	bf800000 	.word	0xbf800000

0800150c <_ZN6ChasisC1EdP5MotorS1_S1_S1_b>:

Chasis::Chasis(double botLen, Motor *r1, Motor *r2, Motor *l1, Motor *l2):
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), bot_length(botLen)
{}

Chasis::Chasis(double botLen, Motor *r1, Motor *r2, Motor *l1, Motor *l2, bool omni):
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6178      	str	r0, [r7, #20]
 8001514:	ed87 0b02 	vstr	d0, [r7, #8]
 8001518:	6139      	str	r1, [r7, #16]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), bot_length(botLen),
  omniDrive(omni)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	6a3a      	ldr	r2, [r7, #32]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	6979      	ldr	r1, [r7, #20]
 8001538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800153c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001546:	761a      	strb	r2, [r3, #24]
{}
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	4618      	mov	r0, r3
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_ZN6Chasis4initEv>:

void Chasis::init(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  right_1->init();
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff10 	bl	8001388 <_ZN5Motor4initEv>
  right_2->init();
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff0b 	bl	8001388 <_ZN5Motor4initEv>

  left_1->init();
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff06 	bl	8001388 <_ZN5Motor4initEv>
  left_2->init();
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff01 	bl	8001388 <_ZN5Motor4initEv>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_ZN6Chasis5steerEff>:

void Chasis::steer(float angular_rate, float speed)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b088      	sub	sp, #32
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	ed87 0a02 	vstr	s0, [r7, #8]
 800159a:	edc7 0a01 	vstr	s1, [r7, #4]
  // speed = (speed_w1 + speed_w2)/2
  // angular_rate = (speed_w1 - speed_w2)/(2*length_bot)
  speed *= 2;
 800159e:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a6:	edc7 7a01 	vstr	s15, [r7, #4]

  float rotFactor = angular_rate * 2 * bot_length;
 80015aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b2:	ee17 0a90 	vmov	r0, s15
 80015b6:	f7fe ff77 	bl	80004a8 <__aeabi_f2d>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015c0:	f7fe ffca 	bl	8000558 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff f9fe 	bl	80009cc <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	61fb      	str	r3, [r7, #28]

  float speed_left = (speed + rotFactor)/2;
 80015d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80015d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80015dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e8:	edc7 7a06 	vstr	s15, [r7, #24]
  float speed_right = speed - speed_left;
 80015ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f8:	edc7 7a05 	vstr	s15, [r7, #20]

  left_1->target(speed_left);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	ed97 0a06 	vldr	s0, [r7, #24]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff55 	bl	80014b4 <_ZN5Motor6targetEf>
  left_2->target(speed_left);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff4e 	bl	80014b4 <_ZN5Motor6targetEf>
  
  right_1->target(speed_right);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff47 	bl	80014b4 <_ZN5Motor6targetEf>
  right_2->target(speed_right);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	ed97 0a05 	vldr	s0, [r7, #20]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff40 	bl	80014b4 <_ZN5Motor6targetEf>
}
 8001634:	bf00      	nop
 8001636:	3720      	adds	r7, #32
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_ZN6Chasis5driveEv>:
  
  return true;
}

void Chasis::drive(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  right_1->drive();
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff feb5 	bl	80013b8 <_ZNK5Motor5driveEv>
  right_2->drive();
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff feb0 	bl	80013b8 <_ZNK5Motor5driveEv>

  left_1->drive();
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff feab 	bl	80013b8 <_ZNK5Motor5driveEv>
  left_2->drive();
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fea6 	bl	80013b8 <_ZNK5Motor5driveEv>

  return;
 800166c:	bf00      	nop
}
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//  right_b.init();
//  right_f.init();
//  left_b.init();
//  left_f.init();
  car.init();
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <_Z16MX_FREERTOS_Initv+0x40>)
 800167a:	f7ff ff6c 	bl	8001556 <_ZN6Chasis4initEv>
  mpu.initialize();
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <_Z16MX_FREERTOS_Initv+0x44>)
 8001680:	f7ff fbb7 	bl	8000df2 <_ZN8MPU_605010initializeEv>
  imuData = mpu.generateNewResult();
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <_Z16MX_FREERTOS_Initv+0x44>)
 8001686:	f7ff fe44 	bl	8001312 <_ZN8MPU_605017generateNewResultEv>
 800168a:	4603      	mov	r3, r0
 800168c:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <_Z16MX_FREERTOS_Initv+0x48>)
 800168e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001690:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <_Z16MX_FREERTOS_Initv+0x4c>)
 8001692:	2100      	movs	r1, #0
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <_Z16MX_FREERTOS_Initv+0x50>)
 8001696:	f004 fb43 	bl	8005d20 <osThreadNew>
 800169a:	4603      	mov	r3, r0
 800169c:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <_Z16MX_FREERTOS_Initv+0x54>)
 800169e:	6013      	str	r3, [r2, #0]

  /* creation of controlSpeed */
  controlSpeedHandle = osThreadNew(StartTask02, NULL, &controlSpeed_attributes);
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <_Z16MX_FREERTOS_Initv+0x58>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <_Z16MX_FREERTOS_Initv+0x5c>)
 80016a6:	f004 fb3b 	bl	8005d20 <osThreadNew>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <_Z16MX_FREERTOS_Initv+0x60>)
 80016ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000110 	.word	0x20000110
 80016b8:	200000dc 	.word	0x200000dc
 80016bc:	2000010c 	.word	0x2000010c
 80016c0:	08008ae8 	.word	0x08008ae8
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	20000130 	.word	0x20000130
 80016cc:	08008b0c 	.word	0x08008b0c
 80016d0:	080016f5 	.word	0x080016f5
 80016d4:	20000134 	.word	0x20000134

080016d8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    car.drive();
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <_Z16StartDefaultTaskPv+0x18>)
 80016e2:	f7ff ffab 	bl	800163c <_ZN6Chasis5driveEv>
	osDelay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f004 fbac 	bl	8005e44 <osDelay>
    car.drive();
 80016ec:	e7f8      	b.n	80016e0 <_Z16StartDefaultTaskPv+0x8>
 80016ee:	bf00      	nop
 80016f0:	20000110 	.word	0x20000110

080016f4 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  car.steer(-0.3,1);
 80016fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001700:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001718 <_Z11StartTask02Pv+0x24>
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <_Z11StartTask02Pv+0x28>)
 8001706:	f7ff ff42 	bl	800158e <_ZN6Chasis5steerEff>
  for(;;)
  {
	mpu.updateData();
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <_Z11StartTask02Pv+0x2c>)
 800170c:	f7ff fd16 	bl	800113c <_ZN8MPU_605010updateDataEv>
    osDelay(20);
 8001710:	2014      	movs	r0, #20
 8001712:	f004 fb97 	bl	8005e44 <osDelay>
	mpu.updateData();
 8001716:	e7f8      	b.n	800170a <_Z11StartTask02Pv+0x16>
 8001718:	be99999a 	.word	0xbe99999a
 800171c:	20000110 	.word	0x20000110
 8001720:	200000dc 	.word	0x200000dc
 8001724:	00000000 	.word	0x00000000

08001728 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END StartTask02 */
}
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d139      	bne.n	80017ac <_Z41__static_initialization_and_destruction_0ii+0x84>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173e:	4293      	cmp	r3, r2
 8001740:	d134      	bne.n	80017ac <_Z41__static_initialization_and_destruction_0ii+0x84>
Motor right_b(&htim1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_4);
 8001742:	230c      	movs	r3, #12
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800174a:	4924      	ldr	r1, [pc, #144]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800174c:	4824      	ldr	r0, [pc, #144]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800174e:	f7ff fdfd 	bl	800134c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor right_f(&htim1, &htim1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8001752:	230c      	movs	r3, #12
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2308      	movs	r3, #8
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800175a:	4920      	ldr	r1, [pc, #128]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800175e:	f7ff fdf5 	bl	800134c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor left_f(&htim3, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001762:	2304      	movs	r3, #4
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800176a:	491b      	ldr	r1, [pc, #108]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800176c:	481f      	ldr	r0, [pc, #124]	; (80017ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800176e:	f7ff fded 	bl	800134c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor left_b(&htim4, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001772:	2304      	movs	r3, #4
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800177a:	491d      	ldr	r1, [pc, #116]	; (80017f0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800177e:	f7ff fde5 	bl	800134c <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
MPU_6050 mpu(false, &hi2c1, GPIOC, GPIO_PIN_15);
 8001782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800178c:	2100      	movs	r1, #0
 800178e:	481c      	ldr	r0, [pc, #112]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001790:	f7ff faee 	bl	8000d70 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>
Chasis car(lenBot, &right_b, &right_f, &left_b, &left_f, false);
 8001794:	2300      	movs	r3, #0
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80017a0:	490f      	ldr	r1, [pc, #60]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80017a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80017d0 <_Z41__static_initialization_and_destruction_0ii+0xa8>
 80017a6:	4817      	ldr	r0, [pc, #92]	; (8001804 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80017a8:	f7ff feb0 	bl	800150c <_ZN6ChasisC1EdP5MotorS1_S1_S1_b>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d107      	bne.n	80017c2 <_Z41__static_initialization_and_destruction_0ii+0x9a>
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d102      	bne.n	80017c2 <_Z41__static_initialization_and_destruction_0ii+0x9a>
MPU_6050 mpu(false, &hi2c1, GPIOC, GPIO_PIN_15);
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80017be:	f7ff fb07 	bl	8000dd0 <_ZN8MPU_6050D1Ev>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	0e560419 	.word	0x0e560419
 80017d4:	3fd1b22d 	.word	0x3fd1b22d
 80017d8:	20000268 	.word	0x20000268
 80017dc:	200001d8 	.word	0x200001d8
 80017e0:	2000008c 	.word	0x2000008c
 80017e4:	200000a0 	.word	0x200000a0
 80017e8:	20000220 	.word	0x20000220
 80017ec:	200000b4 	.word	0x200000b4
 80017f0:	200002b0 	.word	0x200002b0
 80017f4:	200000c8 	.word	0x200000c8
 80017f8:	40020800 	.word	0x40020800
 80017fc:	20000138 	.word	0x20000138
 8001800:	200000dc 	.word	0x200000dc
 8001804:	20000110 	.word	0x20000110

08001808 <_GLOBAL__sub_I_right_b>:
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
 800180c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001810:	2001      	movs	r0, #1
 8001812:	f7ff ff89 	bl	8001728 <_Z41__static_initialization_and_destruction_0ii>
 8001816:	bd80      	pop	{r7, pc}

08001818 <_GLOBAL__sub_D_right_b>:
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
 800181c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001820:	2000      	movs	r0, #0
 8001822:	f7ff ff81 	bl	8001728 <_Z41__static_initialization_and_destruction_0ii>
 8001826:	bd80      	pop	{r7, pc}

08001828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <MX_GPIO_Init+0x114>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a3d      	ldr	r2, [pc, #244]	; (800193c <MX_GPIO_Init+0x114>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <MX_GPIO_Init+0x114>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <MX_GPIO_Init+0x114>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a36      	ldr	r2, [pc, #216]	; (800193c <MX_GPIO_Init+0x114>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <MX_GPIO_Init+0x114>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <MX_GPIO_Init+0x114>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a2f      	ldr	r2, [pc, #188]	; (800193c <MX_GPIO_Init+0x114>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <MX_GPIO_Init+0x114>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <MX_GPIO_Init+0x114>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a28      	ldr	r2, [pc, #160]	; (800193c <MX_GPIO_Init+0x114>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <MX_GPIO_Init+0x114>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b4:	4822      	ldr	r0, [pc, #136]	; (8001940 <MX_GPIO_Init+0x118>)
 80018b6:	f001 fa45 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2104      	movs	r1, #4
 80018be:	4821      	ldr	r0, [pc, #132]	; (8001944 <MX_GPIO_Init+0x11c>)
 80018c0:	f001 fa40 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	4819      	ldr	r0, [pc, #100]	; (8001940 <MX_GPIO_Init+0x118>)
 80018da:	f001 f8af 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	; (8001940 <MX_GPIO_Init+0x118>)
 80018f8:	f001 f8a0 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_GPIO_Init+0x11c>)
 8001914:	f001 f892 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_GPIO_Init+0x11c>)
 800192e:	f001 f885 	bl	8002a3c <HAL_GPIO_Init>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	40020800 	.word	0x40020800
 8001944:	40020400 	.word	0x40020400

08001948 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f001 f9f7 	bl	8002d78 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 f8d2 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000138 	.word	0x20000138
 800199c:	40005400 	.word	0x40005400
 80019a0:	000186a0 	.word	0x000186a0

080019a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_I2C_MspInit+0x84>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d12c      	bne.n	8001a20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e8:	2312      	movs	r3, #18
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019f4:	2304      	movs	r3, #4
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <HAL_I2C_MspInit+0x8c>)
 8001a00:	f001 f81c 	bl	8002a3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_I2C_MspInit+0x88>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020400 	.word	0x40020400

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a38:	f000 fcd4 	bl	80023e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3c:	f000 f814 	bl	8001a68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a40:	f7ff fef2 	bl	8001828 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a44:	f000 f9d8 	bl	8001df8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a48:	f000 fa64 	bl	8001f14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a4c:	f000 faba 	bl	8001fc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a50:	f000 fb32 	bl	80020b8 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001a54:	f7ff ff78 	bl	8001948 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a58:	f004 f918 	bl	8005c8c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a5c:	f7ff fe0a 	bl	8001674 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8001a60:	f004 f938 	bl	8005cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <main+0x30>
	...

08001a68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b094      	sub	sp, #80	; 0x50
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	2230      	movs	r2, #48	; 0x30
 8001a74:	2100      	movs	r1, #0
 8001a76:	4618      	mov	r0, r3
 8001a78:	f006 fec6 	bl	8008808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <_Z18SystemClock_Configv+0xc8>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <_Z18SystemClock_Configv+0xc8>)
 8001a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <_Z18SystemClock_Configv+0xc8>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <_Z18SystemClock_Configv+0xcc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <_Z18SystemClock_Configv+0xcc>)
 8001ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <_Z18SystemClock_Configv+0xcc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2310      	movs	r3, #16
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 f90d 	bl	8003cf8 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf14      	ite	ne
 8001ae4:	2301      	movne	r3, #1
 8001ae6:	2300      	moveq	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001aee:	f000 f823 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	230f      	movs	r3, #15
 8001af4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fb6b 	bl	80041e8 <HAL_RCC_ClockConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8001b22:	f000 f809 	bl	8001b38 <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3750      	adds	r7, #80	; 0x50
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_MspInit+0x54>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_MspInit+0x54>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_MspInit+0x54>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_MspInit+0x54>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_MspInit+0x54>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_MspInit+0x54>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	210f      	movs	r1, #15
 8001b86:	f06f 0001 	mvn.w	r0, #1
 8001b8a:	f000 fd11 	bl	80025b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800

08001b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08e      	sub	sp, #56	; 0x38
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_InitTick+0xe4>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <HAL_InitTick+0xe4>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_InitTick+0xe4>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc8:	f107 0210 	add.w	r2, r7, #16
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fcd4 	bl	8004580 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001be2:	f002 fcb9 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8001be6:	6378      	str	r0, [r7, #52]	; 0x34
 8001be8:	e004      	b.n	8001bf4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bea:	f002 fcb5 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_InitTick+0xe8>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	0c9b      	lsrs	r3, r3, #18
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_InitTick+0xec>)
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_InitTick+0xf0>)
 8001c06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <HAL_InitTick+0xec>)
 8001c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c0e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_InitTick+0xec>)
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_InitTick+0xec>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_InitTick+0xec>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_InitTick+0xec>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001c28:	4817      	ldr	r0, [pc, #92]	; (8001c88 <HAL_InitTick+0xec>)
 8001c2a:	f002 fcdb 	bl	80045e4 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d11b      	bne.n	8001c74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001c3c:	4812      	ldr	r0, [pc, #72]	; (8001c88 <HAL_InitTick+0xec>)
 8001c3e:	f002 fd2b 	bl	8004698 <HAL_TIM_Base_Start_IT>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d111      	bne.n	8001c74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c50:	2032      	movs	r0, #50	; 0x32
 8001c52:	f000 fcc9 	bl	80025e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d808      	bhi.n	8001c6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	2032      	movs	r0, #50	; 0x32
 8001c62:	f000 fca5 	bl	80025b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_InitTick+0xf4>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e002      	b.n	8001c74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3738      	adds	r7, #56	; 0x38
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	2000018c 	.word	0x2000018c
 8001c8c:	40000c00 	.word	0x40000c00
 8001c90:	20000004 	.word	0x20000004

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001cc6:	f002 fe49 	bl	800495c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200001d8 	.word	0x200001d8

08001cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART1_IRQHandler+0x10>)
 8001cda:	f003 fb41 	bl	8005360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200002f8 	.word	0x200002f8

08001ce8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <TIM5_IRQHandler+0x10>)
 8001cee:	f002 fe35 	bl	800495c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000018c 	.word	0x2000018c

08001cfc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d00:	4802      	ldr	r0, [pc, #8]	; (8001d0c <DMA2_Stream2_IRQHandler+0x10>)
 8001d02:	f000 fd11 	bl	8002728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000033c 	.word	0x2000033c

08001d10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA2_Stream7_IRQHandler+0x10>)
 8001d16:	f000 fd07 	bl	8002728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000039c 	.word	0x2000039c

08001d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
	return 1;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_kill>:

int _kill(int pid, int sig)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d3e:	f006 fd1b 	bl	8008778 <__errno>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2216      	movs	r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
	return -1;
 8001d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_exit>:

void _exit (int status)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffe7 	bl	8001d34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d66:	e7fe      	b.n	8001d66 <_exit+0x12>

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f006 fcee 	bl	8008778 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20020000 	.word	0x20020000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	200001d4 	.word	0x200001d4
 8001dd0:	20004d68 	.word	0x20004d68

08001dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b092      	sub	sp, #72	; 0x48
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
 8001e18:	615a      	str	r2, [r3, #20]
 8001e1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2220      	movs	r2, #32
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f006 fcf0 	bl	8008808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e28:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e2a:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <MX_TIM1_Init+0x118>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e30:	229f      	movs	r2, #159	; 0x9f
 8001e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b35      	ldr	r3, [pc, #212]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e3c:	2263      	movs	r2, #99	; 0x63
 8001e3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e52:	482e      	ldr	r0, [pc, #184]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e54:	f002 fc82 	bl	800475c <HAL_TIM_PWM_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001e5e:	f7ff fe6b 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4826      	ldr	r0, [pc, #152]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001e72:	f003 f9a1 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001e7c:	f7ff fe5c 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e80:	2360      	movs	r3, #96	; 0x60
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4819      	ldr	r0, [pc, #100]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001ea6:	f002 fe61 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001eb0:	f7ff fe42 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	220c      	movs	r2, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4813      	ldr	r0, [pc, #76]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001ebe:	f002 fe55 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001ec8:	f7ff fe36 	bl	8001b38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001ef0:	f003 f9d0 	bl	8005294 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001efa:	f7ff fe1d 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_TIM1_Init+0x114>)
 8001f00:	f000 f99a 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8001f04:	bf00      	nop
 8001f06:	3748      	adds	r7, #72	; 0x48
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200001d8 	.word	0x200001d8
 8001f10:	40010000 	.word	0x40010000

08001f14 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f40:	220f      	movs	r2, #15
 8001f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f4c:	2263      	movs	r2, #99	; 0x63
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f5c:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f5e:	f002 fbfd 	bl	800475c <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f68:	f7ff fde6 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f74:	f107 0320 	add.w	r3, r7, #32
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001f7c:	f003 f91c 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001f86:	f7ff fdd7 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	; 0x60
 8001f8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001fa2:	f002 fde3 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001fac:	f7ff fdc4 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fb0:	4803      	ldr	r0, [pc, #12]	; (8001fc0 <MX_TIM2_Init+0xac>)
 8001fb2:	f000 f941 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000220 	.word	0x20000220

08001fc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe6:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <MX_TIM3_Init+0xec>)
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <MX_TIM3_Init+0xf0>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <MX_TIM3_Init+0xec>)
 8001fee:	220f      	movs	r2, #15
 8001ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <MX_TIM3_Init+0xec>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <MX_TIM3_Init+0xec>)
 8001ffa:	2263      	movs	r2, #99	; 0x63
 8001ffc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <MX_TIM3_Init+0xec>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <MX_TIM3_Init+0xec>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800200a:	4829      	ldr	r0, [pc, #164]	; (80020b0 <MX_TIM3_Init+0xec>)
 800200c:	f002 fba6 	bl	800475c <HAL_TIM_PWM_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002016:	f7ff fd8f 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	4619      	mov	r1, r3
 8002028:	4821      	ldr	r0, [pc, #132]	; (80020b0 <MX_TIM3_Init+0xec>)
 800202a:	f003 f8c5 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002034:	f7ff fd80 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002038:	2360      	movs	r3, #96	; 0x60
 800203a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	4818      	ldr	r0, [pc, #96]	; (80020b0 <MX_TIM3_Init+0xec>)
 8002050:	f002 fd8c 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800205a:	f7ff fd6d 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2204      	movs	r2, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4812      	ldr	r0, [pc, #72]	; (80020b0 <MX_TIM3_Init+0xec>)
 8002066:	f002 fd81 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002070:	f7ff fd62 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2208      	movs	r2, #8
 8002078:	4619      	mov	r1, r3
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <MX_TIM3_Init+0xec>)
 800207c:	f002 fd76 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002086:	f7ff fd57 	bl	8001b38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	220c      	movs	r2, #12
 800208e:	4619      	mov	r1, r3
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <MX_TIM3_Init+0xec>)
 8002092:	f002 fd6b 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800209c:	f7ff fd4c 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <MX_TIM3_Init+0xec>)
 80020a2:	f000 f8c9 	bl	8002238 <HAL_TIM_MspPostInit>

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000268 	.word	0x20000268
 80020b4:	40000400 	.word	0x40000400

080020b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020be:	f107 0320 	add.w	r3, r7, #32
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <MX_TIM4_Init+0xa8>)
 80020dc:	4a21      	ldr	r2, [pc, #132]	; (8002164 <MX_TIM4_Init+0xac>)
 80020de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <MX_TIM4_Init+0xa8>)
 80020e2:	220f      	movs	r2, #15
 80020e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <MX_TIM4_Init+0xa8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MX_TIM4_Init+0xa8>)
 80020ee:	2263      	movs	r2, #99	; 0x63
 80020f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <MX_TIM4_Init+0xa8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <MX_TIM4_Init+0xa8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020fe:	4818      	ldr	r0, [pc, #96]	; (8002160 <MX_TIM4_Init+0xa8>)
 8002100:	f002 fb2c 	bl	800475c <HAL_TIM_PWM_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800210a:	f7ff fd15 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	4619      	mov	r1, r3
 800211c:	4810      	ldr	r0, [pc, #64]	; (8002160 <MX_TIM4_Init+0xa8>)
 800211e:	f003 f84b 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002128:	f7ff fd06 	bl	8001b38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212c:	2360      	movs	r3, #96	; 0x60
 800212e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	4619      	mov	r1, r3
 8002142:	4807      	ldr	r0, [pc, #28]	; (8002160 <MX_TIM4_Init+0xa8>)
 8002144:	f002 fd12 	bl	8004b6c <HAL_TIM_PWM_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800214e:	f7ff fcf3 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002152:	4803      	ldr	r0, [pc, #12]	; (8002160 <MX_TIM4_Init+0xa8>)
 8002154:	f000 f870 	bl	8002238 <HAL_TIM_MspPostInit>

}
 8002158:	bf00      	nop
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200002b0 	.word	0x200002b0
 8002164:	40000800 	.word	0x40000800

08002168 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_TIM_PWM_MspInit+0xc0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d116      	bne.n	80021a8 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2105      	movs	r1, #5
 800219a:	2018      	movs	r0, #24
 800219c:	f000 fa08 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80021a0:	2018      	movs	r0, #24
 80021a2:	f000 fa21 	bl	80025e8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80021a6:	e03a      	b.n	800221e <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
}
 80021ce:	e026      	b.n	800221e <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a16      	ldr	r2, [pc, #88]	; (8002230 <HAL_TIM_PWM_MspInit+0xc8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
}
 80021f6:	e012      	b.n	800221e <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM4)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_TIM_PWM_MspInit+0xcc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10d      	bne.n	800221e <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_TIM_PWM_MspInit+0xc4>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40023800 	.word	0x40023800
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800

08002238 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a48      	ldr	r2, [pc, #288]	; (8002378 <HAL_TIM_MspPostInit+0x140>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d11f      	bne.n	800229a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a46      	ldr	r2, [pc, #280]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b44      	ldr	r3, [pc, #272]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002276:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002288:	2301      	movs	r3, #1
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	483b      	ldr	r0, [pc, #236]	; (8002380 <HAL_TIM_MspPostInit+0x148>)
 8002294:	f000 fbd2 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002298:	e06a      	b.n	8002370 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a2:	d11e      	bne.n	80022e2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ac:	4a33      	ldr	r2, [pc, #204]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 80022ae:	f043 0302 	orr.w	r3, r3, #2
 80022b2:	6313      	str	r3, [r2, #48]	; 0x30
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c0:	2308      	movs	r3, #8
 80022c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4619      	mov	r1, r3
 80022da:	482a      	ldr	r0, [pc, #168]	; (8002384 <HAL_TIM_MspPostInit+0x14c>)
 80022dc:	f000 fbae 	bl	8002a3c <HAL_GPIO_Init>
}
 80022e0:	e046      	b.n	8002370 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_TIM_MspPostInit+0x150>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d11e      	bne.n	800232a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a21      	ldr	r2, [pc, #132]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 80022f6:	f043 0302 	orr.w	r3, r3, #2
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002308:	2333      	movs	r3, #51	; 0x33
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002318:	2302      	movs	r3, #2
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <HAL_TIM_MspPostInit+0x14c>)
 8002324:	f000 fb8a 	bl	8002a3c <HAL_GPIO_Init>
}
 8002328:	e022      	b.n	8002370 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_TIM_MspPostInit+0x154>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d11d      	bne.n	8002370 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	4b10      	ldr	r3, [pc, #64]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a0f      	ldr	r2, [pc, #60]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_TIM_MspPostInit+0x144>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002350:	2340      	movs	r3, #64	; 0x40
 8002352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002360:	2302      	movs	r3, #2
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	; (8002384 <HAL_TIM_MspPostInit+0x14c>)
 800236c:	f000 fb66 	bl	8002a3c <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40010000 	.word	0x40010000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800

08002390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ba:	f7ff fd0b 	bl	8001dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f006 f9e1 	bl	8008784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7ff fb37 	bl	8001a34 <main>
  bx  lr    
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023d4:	08008b60 	.word	0x08008b60
  ldr r2, =_sbss
 80023d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023dc:	20004d64 	.word	0x20004d64

080023e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC_IRQHandler>
	...

080023e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_Init+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_Init+0x40>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_Init+0x40>)
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_Init+0x40>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 f8c4 	bl	800259a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002412:	200f      	movs	r0, #15
 8002414:	f7ff fbc2 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002418:	f7ff fb94 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetTick+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200003fc 	.word	0x200003fc

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff4c 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c2:	f7ff ff61 	bl	8002488 <__NVIC_GetPriorityGrouping>
 80025c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	6978      	ldr	r0, [r7, #20]
 80025ce:	f7ff ffb1 	bl	8002534 <NVIC_EncodePriority>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff80 	bl	80024e0 <__NVIC_SetPriority>
}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff54 	bl	80024a4 <__NVIC_EnableIRQ>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002612:	f7ff ff09 	bl	8002428 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d008      	beq.n	8002636 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e052      	b.n	80026dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0216 	bic.w	r2, r2, #22
 8002644:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002654:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_DMA_Abort+0x62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0208 	bic.w	r2, r2, #8
 8002674:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002686:	e013      	b.n	80026b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002688:	f7ff fece 	bl	8002428 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b05      	cmp	r3, #5
 8002694:	d90c      	bls.n	80026b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2203      	movs	r2, #3
 80026a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e015      	b.n	80026dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e4      	bne.n	8002688 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	223f      	movs	r2, #63	; 0x3f
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d004      	beq.n	8002702 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e00c      	b.n	800271c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2205      	movs	r2, #5
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002734:	4b8e      	ldr	r3, [pc, #568]	; (8002970 <HAL_DMA_IRQHandler+0x248>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a8e      	ldr	r2, [pc, #568]	; (8002974 <HAL_DMA_IRQHandler+0x24c>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2208      	movs	r2, #8
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01a      	beq.n	8002794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0204 	bic.w	r2, r2, #4
 800277a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2208      	movs	r2, #8
 8002782:	409a      	lsls	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0201 	orr.w	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f043 0202 	orr.w	r2, r3, #2
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ce:	2204      	movs	r2, #4
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d012      	beq.n	8002800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2204      	movs	r2, #4
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2210      	movs	r2, #16
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d043      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d03c      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2210      	movs	r2, #16
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d108      	bne.n	8002858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d024      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
 8002856:	e01f      	b.n	8002898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e016      	b.n	8002898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d107      	bne.n	8002888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0208 	bic.w	r2, r2, #8
 8002886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2220      	movs	r2, #32
 800289e:	409a      	lsls	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 808f 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8087 	beq.w	80029c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2220      	movs	r2, #32
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d136      	bne.n	8002940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0216 	bic.w	r2, r2, #22
 80028e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <HAL_DMA_IRQHandler+0x1da>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0208 	bic.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	223f      	movs	r2, #63	; 0x3f
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	2b00      	cmp	r3, #0
 8002934:	d07e      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
        }
        return;
 800293e:	e079      	b.n	8002a34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01d      	beq.n	800298a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	2b00      	cmp	r3, #0
 8002962:	d031      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4798      	blx	r3
 800296c:	e02c      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000
 8002974:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
 8002988:	e01e      	b.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10f      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0210 	bic.w	r2, r2, #16
 80029a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d032      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d022      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2205      	movs	r2, #5
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d307      	bcc.n	8002a10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f2      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x2cc>
 8002a0e:	e000      	b.n	8002a12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
 8002a32:	e000      	b.n	8002a36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a34:	bf00      	nop
    }
  }
}
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e159      	b.n	8002d0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8148 	bne.w	8002d06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d130      	bne.n	8002af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d017      	beq.n	8002b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a2 	beq.w	8002d06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bde:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_GPIO_Init+0x2ec>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a49      	ldr	r2, [pc, #292]	; (8002d2c <HAL_GPIO_Init+0x2f0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_Init+0x202>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a48      	ldr	r2, [pc, #288]	; (8002d30 <HAL_GPIO_Init+0x2f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0x1fe>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <HAL_GPIO_Init+0x2f8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <HAL_GPIO_Init+0x2fc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x1f6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a45      	ldr	r2, [pc, #276]	; (8002d3c <HAL_GPIO_Init+0x300>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_Init+0x1f2>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <HAL_GPIO_Init+0x2ec>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a24      	ldr	r2, [pc, #144]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b23      	ldr	r3, [pc, #140]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <HAL_GPIO_Init+0x304>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f aea2 	bls.w	8002a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e12b      	b.n	8002fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe fe00 	bl	80019a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ddc:	f001 fbbc 	bl	8004558 <HAL_RCC_GetPCLK1Freq>
 8002de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a81      	ldr	r2, [pc, #516]	; (8002fec <HAL_I2C_Init+0x274>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d807      	bhi.n	8002dfc <HAL_I2C_Init+0x84>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a80      	ldr	r2, [pc, #512]	; (8002ff0 <HAL_I2C_Init+0x278>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	bf94      	ite	ls
 8002df4:	2301      	movls	r3, #1
 8002df6:	2300      	movhi	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e006      	b.n	8002e0a <HAL_I2C_Init+0x92>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ff4 <HAL_I2C_Init+0x27c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf94      	ite	ls
 8002e04:	2301      	movls	r3, #1
 8002e06:	2300      	movhi	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e0e7      	b.n	8002fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a78      	ldr	r2, [pc, #480]	; (8002ff8 <HAL_I2C_Init+0x280>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0c9b      	lsrs	r3, r3, #18
 8002e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_I2C_Init+0x274>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <HAL_I2C_Init+0xd4>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	e009      	b.n	8002e60 <HAL_I2C_Init+0xe8>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_I2C_Init+0x284>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	3301      	adds	r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	430b      	orrs	r3, r1
 8002e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	495c      	ldr	r1, [pc, #368]	; (8002fec <HAL_I2C_Init+0x274>)
 8002e7c:	428b      	cmp	r3, r1
 8002e7e:	d819      	bhi.n	8002eb4 <HAL_I2C_Init+0x13c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1e59      	subs	r1, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e94:	400b      	ands	r3, r1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_I2C_Init+0x138>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1e59      	subs	r1, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	e051      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	e04f      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <HAL_I2C_Init+0x168>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	440b      	add	r3, r1
 8002eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	e012      	b.n	8002f06 <HAL_I2C_Init+0x18e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Init+0x196>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e022      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10e      	bne.n	8002f34 <HAL_I2C_Init+0x1bc>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1e58      	subs	r0, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	440b      	add	r3, r1
 8002f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f32:	e00f      	b.n	8002f54 <HAL_I2C_Init+0x1dc>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	6809      	ldr	r1, [r1, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6911      	ldr	r1, [r2, #16]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68d2      	ldr	r2, [r2, #12]
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	000186a0 	.word	0x000186a0
 8002ff0:	001e847f 	.word	0x001e847f
 8002ff4:	003d08ff 	.word	0x003d08ff
 8002ff8:	431bde83 	.word	0x431bde83
 8002ffc:	10624dd3 	.word	0x10624dd3

08003000 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800301a:	f7ff fa05 	bl	8002428 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b20      	cmp	r3, #32
 800302a:	f040 80d9 	bne.w	80031e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2319      	movs	r3, #25
 8003034:	2201      	movs	r2, #1
 8003036:	496d      	ldr	r1, [pc, #436]	; (80031ec <HAL_I2C_Mem_Write+0x1ec>)
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fc7f 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
 8003046:	e0cc      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Mem_Write+0x56>
 8003052:	2302      	movs	r3, #2
 8003054:	e0c5      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d007      	beq.n	800307c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0201 	orr.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2221      	movs	r2, #33	; 0x21
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a4d      	ldr	r2, [pc, #308]	; (80031f0 <HAL_I2C_Mem_Write+0x1f0>)
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030be:	88f8      	ldrh	r0, [r7, #6]
 80030c0:	893a      	ldrh	r2, [r7, #8]
 80030c2:	8979      	ldrh	r1, [r7, #10]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4603      	mov	r3, r0
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fab6 	bl	8003640 <I2C_RequestMemoryWrite>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d052      	beq.n	8003180 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e081      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fd00 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d107      	bne.n	8003106 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003104:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06b      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d11b      	bne.n	8003180 <HAL_I2C_Mem_Write+0x180>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d017      	beq.n	8003180 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1aa      	bne.n	80030de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fcec 	bl	8003b6a <I2C_WaitOnBTFFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00d      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2b04      	cmp	r3, #4
 800319e:	d107      	bne.n	80031b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e016      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	00100002 	.word	0x00100002
 80031f0:	ffff0000 	.word	0xffff0000

080031f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800320e:	f7ff f90b 	bl	8002428 <HAL_GetTick>
 8003212:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b20      	cmp	r3, #32
 800321e:	f040 8208 	bne.w	8003632 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2319      	movs	r3, #25
 8003228:	2201      	movs	r2, #1
 800322a:	497b      	ldr	r1, [pc, #492]	; (8003418 <HAL_I2C_Mem_Read+0x224>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb85 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	e1fb      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2C_Mem_Read+0x56>
 8003246:	2302      	movs	r3, #2
 8003248:	e1f4      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d007      	beq.n	8003270 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2222      	movs	r2, #34	; 0x22
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2240      	movs	r2, #64	; 0x40
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_I2C_Mem_Read+0x228>)
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b2:	88f8      	ldrh	r0, [r7, #6]
 80032b4:	893a      	ldrh	r2, [r7, #8]
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4603      	mov	r3, r0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa52 	bl	800376c <I2C_RequestMemoryRead>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e1b0      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d113      	bne.n	8003302 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	623b      	str	r3, [r7, #32]
 80032ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	e184      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003306:	2b01      	cmp	r3, #1
 8003308:	d11b      	bne.n	8003342 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003318:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e164      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	2b02      	cmp	r3, #2
 8003348:	d11b      	bne.n	8003382 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003368:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336a:	2300      	movs	r3, #0
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	e144      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003398:	e138      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b03      	cmp	r3, #3
 80033a0:	f200 80f1 	bhi.w	8003586 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d123      	bne.n	80033f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fc1b 	bl	8003bec <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e139      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033f2:	e10b      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d14e      	bne.n	800349a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003402:	2200      	movs	r2, #0
 8003404:	4906      	ldr	r1, [pc, #24]	; (8003420 <HAL_I2C_Mem_Read+0x22c>)
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fa98 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e10e      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
 8003416:	bf00      	nop
 8003418:	00100002 	.word	0x00100002
 800341c:	ffff0000 	.word	0xffff0000
 8003420:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003498:	e0b8      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a0:	2200      	movs	r2, #0
 80034a2:	4966      	ldr	r1, [pc, #408]	; (800363c <HAL_I2C_Mem_Read+0x448>)
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fa49 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0bf      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	2200      	movs	r2, #0
 80034fe:	494f      	ldr	r1, [pc, #316]	; (800363c <HAL_I2C_Mem_Read+0x448>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fa1b 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e091      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003584:	e042      	b.n	800360c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fb2e 	bl	8003bec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e04c      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d118      	bne.n	800360c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f aec2 	bne.w	800339a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
  }
}
 8003634:	4618      	mov	r0, r3
 8003636:	3728      	adds	r7, #40	; 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	00010004 	.word	0x00010004

08003640 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
 8003652:	460b      	mov	r3, r1
 8003654:	813b      	strh	r3, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003668:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	2200      	movs	r2, #0
 8003672:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f960 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00d      	beq.n	800369e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003690:	d103      	bne.n	800369a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003698:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e05f      	b.n	800375e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800369e:	897b      	ldrh	r3, [r7, #10]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	492d      	ldr	r1, [pc, #180]	; (8003768 <I2C_RequestMemoryWrite+0x128>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f998 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e04c      	b.n	800375e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036dc:	6a39      	ldr	r1, [r7, #32]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fa02 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d107      	bne.n	8003702 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003700:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e02b      	b.n	800375e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370c:	893b      	ldrh	r3, [r7, #8]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	611a      	str	r2, [r3, #16]
 8003716:	e021      	b.n	800375c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003718:	893b      	ldrh	r3, [r7, #8]
 800371a:	0a1b      	lsrs	r3, r3, #8
 800371c:	b29b      	uxth	r3, r3
 800371e:	b2da      	uxtb	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	6a39      	ldr	r1, [r7, #32]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f9dc 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b04      	cmp	r3, #4
 800373c:	d107      	bne.n	800374e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e005      	b.n	800375e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003752:	893b      	ldrh	r3, [r7, #8]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	00010002 	.word	0x00010002

0800376c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	817b      	strh	r3, [r7, #10]
 800377e:	460b      	mov	r3, r1
 8003780:	813b      	strh	r3, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003794:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f8c2 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00d      	beq.n	80037da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d103      	bne.n	80037d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e0aa      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037da:	897b      	ldrh	r3, [r7, #10]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	4952      	ldr	r1, [pc, #328]	; (8003938 <I2C_RequestMemoryRead+0x1cc>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8fa 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e097      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	6a39      	ldr	r1, [r7, #32]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f964 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b04      	cmp	r3, #4
 800382c:	d107      	bne.n	800383e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e076      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	e021      	b.n	8003898 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003854:	893b      	ldrh	r3, [r7, #8]
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b29b      	uxth	r3, r3
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003864:	6a39      	ldr	r1, [r7, #32]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f93e 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b04      	cmp	r3, #4
 8003878:	d107      	bne.n	800388a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003888:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e050      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800388e:	893b      	ldrh	r3, [r7, #8]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	6a39      	ldr	r1, [r7, #32]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f923 	bl	8003ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d107      	bne.n	80038c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e035      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2200      	movs	r2, #0
 80038dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f82b 	bl	800393c <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00d      	beq.n	8003908 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d103      	bne.n	8003904 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e013      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003908:	897b      	ldrh	r3, [r7, #10]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	4906      	ldr	r1, [pc, #24]	; (8003938 <I2C_RequestMemoryRead+0x1cc>)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f863 	bl	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	00010002 	.word	0x00010002

0800393c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394c:	e025      	b.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d021      	beq.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003956:	f7fe fd67 	bl	8002428 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e023      	b.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10d      	bne.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	e00c      	b.n	80039da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4013      	ands	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	bf0c      	ite	eq
 80039d2:	2301      	moveq	r3, #1
 80039d4:	2300      	movne	r3, #0
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d0b6      	beq.n	800394e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f8:	e051      	b.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d123      	bne.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e046      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d021      	beq.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5a:	f7fe fce5 	bl	8002428 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d302      	bcc.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d116      	bne.n	8003a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e020      	b.n	8003ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d10c      	bne.n	8003ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	e00b      	b.n	8003ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d18d      	bne.n	80039fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af4:	e02d      	b.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8ce 	bl	8003c98 <I2C_IsAcknowledgeFailed>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e02d      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d021      	beq.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7fe fc8b 	bl	8002428 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e007      	b.n	8003b62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d1ca      	bne.n	8003af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b76:	e02d      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f88d 	bl	8003c98 <I2C_IsAcknowledgeFailed>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e02d      	b.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d021      	beq.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7fe fc4a 	bl	8002428 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f043 0220 	orr.w	r2, r3, #32
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e007      	b.n	8003be4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d1ca      	bne.n	8003b78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bf8:	e042      	b.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d119      	bne.n	8003c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0210 	mvn.w	r2, #16
 8003c10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e029      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3c:	f7fe fbf4 	bl	8002428 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d1b5      	bne.n	8003bfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cae:	d11b      	bne.n	8003ce8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e267      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d075      	beq.n	8003e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d16:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d00c      	beq.n	8003d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d22:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d112      	bne.n	8003d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2e:	4b82      	ldr	r3, [pc, #520]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d3a:	d10b      	bne.n	8003d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d05b      	beq.n	8003e00 <HAL_RCC_OscConfig+0x108>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d157      	bne.n	8003e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e242      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_OscConfig+0x74>
 8003d5e:	4b76      	ldr	r3, [pc, #472]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a75      	ldr	r2, [pc, #468]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e01d      	b.n	8003da8 <HAL_RCC_OscConfig+0xb0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d74:	d10c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x98>
 8003d76:	4b70      	ldr	r3, [pc, #448]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6f      	ldr	r2, [pc, #444]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b6d      	ldr	r3, [pc, #436]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6c      	ldr	r2, [pc, #432]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e00b      	b.n	8003da8 <HAL_RCC_OscConfig+0xb0>
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a68      	ldr	r2, [pc, #416]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a65      	ldr	r2, [pc, #404]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d013      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe fb3a 	bl	8002428 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fe fb36 	bl	8002428 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	; 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e207      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0xc0>
 8003dd6:	e014      	b.n	8003e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fb26 	bl	8002428 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de0:	f7fe fb22 	bl	8002428 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e1f3      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	4b51      	ldr	r3, [pc, #324]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0xe8>
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d063      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1a:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d11c      	bne.n	8003e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e26:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d116      	bne.n	8003e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e32:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_RCC_OscConfig+0x152>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d001      	beq.n	8003e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e1c7      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4937      	ldr	r1, [pc, #220]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5e:	e03a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCC_OscConfig+0x244>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fe fadb 	bl	8002428 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e76:	f7fe fad7 	bl	8002428 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e1a8      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0f0      	beq.n	8003e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e94:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4925      	ldr	r1, [pc, #148]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]
 8003ea8:	e015      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_RCC_OscConfig+0x244>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fe faba 	bl	8002428 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb8:	f7fe fab6 	bl	8002428 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e187      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d036      	beq.n	8003f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <HAL_RCC_OscConfig+0x248>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef0:	f7fe fa9a 	bl	8002428 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fa96 	bl	8002428 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e167      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x200>
 8003f16:	e01b      	b.n	8003f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f18:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_OscConfig+0x248>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fa83 	bl	8002428 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f24:	e00e      	b.n	8003f44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fe fa7f 	bl	8002428 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d907      	bls.n	8003f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e150      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	42470000 	.word	0x42470000
 8003f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ea      	bne.n	8003f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8097 	beq.w	800408c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b81      	ldr	r3, [pc, #516]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	4b7d      	ldr	r3, [pc, #500]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a7c      	ldr	r2, [pc, #496]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b7a      	ldr	r3, [pc, #488]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8e:	4b77      	ldr	r3, [pc, #476]	; (800416c <HAL_RCC_OscConfig+0x474>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d118      	bne.n	8003fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f9a:	4b74      	ldr	r3, [pc, #464]	; (800416c <HAL_RCC_OscConfig+0x474>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a73      	ldr	r2, [pc, #460]	; (800416c <HAL_RCC_OscConfig+0x474>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fa3f 	bl	8002428 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fae:	f7fe fa3b 	bl	8002428 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e10c      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	4b6a      	ldr	r3, [pc, #424]	; (800416c <HAL_RCC_OscConfig+0x474>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d106      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x2ea>
 8003fd4:	4b64      	ldr	r3, [pc, #400]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a63      	ldr	r2, [pc, #396]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	e01c      	b.n	800401c <HAL_RCC_OscConfig+0x324>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x30c>
 8003fea:	4b5f      	ldr	r3, [pc, #380]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a5e      	ldr	r2, [pc, #376]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a5b      	ldr	r2, [pc, #364]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0x324>
 8004004:	4b58      	ldr	r3, [pc, #352]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a57      	ldr	r2, [pc, #348]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 800400a:	f023 0301 	bic.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b55      	ldr	r3, [pc, #340]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a54      	ldr	r2, [pc, #336]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004016:	f023 0304 	bic.w	r3, r3, #4
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d015      	beq.n	8004050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fe fa00 	bl	8002428 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800402a:	e00a      	b.n	8004042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7fe f9fc 	bl	8002428 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e0cb      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004042:	4b49      	ldr	r3, [pc, #292]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ee      	beq.n	800402c <HAL_RCC_OscConfig+0x334>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004050:	f7fe f9ea 	bl	8002428 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004056:	e00a      	b.n	800406e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7fe f9e6 	bl	8002428 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e0b5      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406e:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ee      	bne.n	8004058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004080:	4b39      	ldr	r3, [pc, #228]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	4a38      	ldr	r2, [pc, #224]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800408a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80a1 	beq.w	80041d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004096:	4b34      	ldr	r3, [pc, #208]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d05c      	beq.n	800415c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d141      	bne.n	800412e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <HAL_RCC_OscConfig+0x478>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe f9ba 	bl	8002428 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe f9b6 	bl	8002428 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e087      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	019b      	lsls	r3, r3, #6
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	3b01      	subs	r3, #1
 80040f0:	041b      	lsls	r3, r3, #16
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	061b      	lsls	r3, r3, #24
 80040fa:	491b      	ldr	r1, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x478>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004106:	f7fe f98f 	bl	8002428 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410e:	f7fe f98b 	bl	8002428 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e05c      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x416>
 800412c:	e054      	b.n	80041d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_RCC_OscConfig+0x478>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe f978 	bl	8002428 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe f974 	bl	8002428 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e045      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x470>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x444>
 800415a:	e03d      	b.n	80041d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e038      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
 8004168:	40023800 	.word	0x40023800
 800416c:	40007000 	.word	0x40007000
 8004170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x4ec>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d028      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d121      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d11a      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d111      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d107      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800

080041e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0cc      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041fc:	4b68      	ldr	r3, [pc, #416]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d90c      	bls.n	8004224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b65      	ldr	r3, [pc, #404]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0b8      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d020      	beq.n	8004272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800423c:	4b59      	ldr	r3, [pc, #356]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a58      	ldr	r2, [pc, #352]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004254:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a52      	ldr	r2, [pc, #328]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800425e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004260:	4b50      	ldr	r3, [pc, #320]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	494d      	ldr	r1, [pc, #308]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d044      	beq.n	8004308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004286:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d119      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d003      	beq.n	80042a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a6:	4b3f      	ldr	r3, [pc, #252]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e06f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b6:	4b3b      	ldr	r3, [pc, #236]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e067      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4934      	ldr	r1, [pc, #208]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d8:	f7fe f8a6 	bl	8002428 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fe f8a2 	bl	8002428 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04f      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	4b2b      	ldr	r3, [pc, #172]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 020c 	and.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	429a      	cmp	r2, r3
 8004306:	d1eb      	bne.n	80042e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d20c      	bcs.n	8004330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e032      	b.n	8004396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433c:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4916      	ldr	r1, [pc, #88]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	490e      	ldr	r1, [pc, #56]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800436e:	f000 f821 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8004372:	4602      	mov	r2, r0
 8004374:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	490a      	ldr	r1, [pc, #40]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004380:	5ccb      	ldrb	r3, [r1, r3]
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	4a09      	ldr	r2, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fc04 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08008b30 	.word	0x08008b30
 80043ac:	20000000 	.word	0x20000000
 80043b0:	20000004 	.word	0x20000004

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b090      	sub	sp, #64	; 0x40
 80043ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
 80043c0:	2300      	movs	r3, #0
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c4:	2300      	movs	r3, #0
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 030c 	and.w	r3, r3, #12
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d00d      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x40>
 80043d8:	2b08      	cmp	r3, #8
 80043da:	f200 80a1 	bhi.w	8004520 <HAL_RCC_GetSysClockFreq+0x16c>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x34>
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d003      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x3a>
 80043e6:	e09b      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b53      	ldr	r3, [pc, #332]	; (8004538 <HAL_RCC_GetSysClockFreq+0x184>)
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043ec:	e09b      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ee:	4b53      	ldr	r3, [pc, #332]	; (800453c <HAL_RCC_GetSysClockFreq+0x188>)
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043f2:	e098      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f4:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043fe:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d028      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	627a      	str	r2, [r7, #36]	; 0x24
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800441c:	2100      	movs	r1, #0
 800441e:	4b47      	ldr	r3, [pc, #284]	; (800453c <HAL_RCC_GetSysClockFreq+0x188>)
 8004420:	fb03 f201 	mul.w	r2, r3, r1
 8004424:	2300      	movs	r3, #0
 8004426:	fb00 f303 	mul.w	r3, r0, r3
 800442a:	4413      	add	r3, r2
 800442c:	4a43      	ldr	r2, [pc, #268]	; (800453c <HAL_RCC_GetSysClockFreq+0x188>)
 800442e:	fba0 1202 	umull	r1, r2, r0, r2
 8004432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004434:	460a      	mov	r2, r1
 8004436:	62ba      	str	r2, [r7, #40]	; 0x28
 8004438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800443a:	4413      	add	r3, r2
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004440:	2200      	movs	r2, #0
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	61fa      	str	r2, [r7, #28]
 8004446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800444a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800444e:	f7fc fb0d 	bl	8000a6c <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4613      	mov	r3, r2
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445a:	e053      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	2200      	movs	r2, #0
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	617a      	str	r2, [r7, #20]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800446e:	f04f 0b00 	mov.w	fp, #0
 8004472:	4652      	mov	r2, sl
 8004474:	465b      	mov	r3, fp
 8004476:	f04f 0000 	mov.w	r0, #0
 800447a:	f04f 0100 	mov.w	r1, #0
 800447e:	0159      	lsls	r1, r3, #5
 8004480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004484:	0150      	lsls	r0, r2, #5
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	ebb2 080a 	subs.w	r8, r2, sl
 800448e:	eb63 090b 	sbc.w	r9, r3, fp
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800449e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044a6:	ebb2 0408 	subs.w	r4, r2, r8
 80044aa:	eb63 0509 	sbc.w	r5, r3, r9
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	00eb      	lsls	r3, r5, #3
 80044b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044bc:	00e2      	lsls	r2, r4, #3
 80044be:	4614      	mov	r4, r2
 80044c0:	461d      	mov	r5, r3
 80044c2:	eb14 030a 	adds.w	r3, r4, sl
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	eb45 030b 	adc.w	r3, r5, fp
 80044cc:	607b      	str	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044da:	4629      	mov	r1, r5
 80044dc:	028b      	lsls	r3, r1, #10
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e4:	4621      	mov	r1, r4
 80044e6:	028a      	lsls	r2, r1, #10
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	2200      	movs	r2, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	60fa      	str	r2, [r7, #12]
 80044f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f8:	f7fc fab8 	bl	8000a6c <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4613      	mov	r3, r2
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_GetSysClockFreq+0x180>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	3301      	adds	r3, #1
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004514:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800451e:	e002      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetSysClockFreq+0x184>)
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004528:	4618      	mov	r0, r3
 800452a:	3740      	adds	r7, #64	; 0x40
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	00f42400 	.word	0x00f42400
 800453c:	017d7840 	.word	0x017d7840

08004540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004544:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_RCC_GetHCLKFreq+0x14>)
 8004546:	681b      	ldr	r3, [r3, #0]
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000000 	.word	0x20000000

08004558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800455c:	f7ff fff0 	bl	8004540 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0a9b      	lsrs	r3, r3, #10
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	; (800457c <HAL_RCC_GetPCLK1Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	08008b40 	.word	0x08008b40

08004580 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	220f      	movs	r2, #15
 800458e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_RCC_GetClockConfig+0x5c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 0203 	and.w	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_RCC_GetClockConfig+0x5c>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_GetClockConfig+0x5c>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	08db      	lsrs	r3, r3, #3
 80045ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <HAL_RCC_GetClockConfig+0x60>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0207 	and.w	r2, r3, #7
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	601a      	str	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40023c00 	.word	0x40023c00

080045e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e041      	b.n	800467a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f839 	bl	8004682 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f000 fb96 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
	...

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e044      	b.n	800473a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d018      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046da:	d013      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	; (800474c <HAL_TIM_Base_Start_IT+0xb4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a19      	ldr	r2, [pc, #100]	; (8004750 <HAL_TIM_Base_Start_IT+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d009      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a17      	ldr	r2, [pc, #92]	; (8004754 <HAL_TIM_Base_Start_IT+0xbc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d004      	beq.n	8004704 <HAL_TIM_Base_Start_IT+0x6c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a16      	ldr	r2, [pc, #88]	; (8004758 <HAL_TIM_Base_Start_IT+0xc0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d111      	bne.n	8004728 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d010      	beq.n	8004738 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f042 0201 	orr.w	r2, r2, #1
 8004724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004726:	e007      	b.n	8004738 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40014000 	.word	0x40014000

0800475c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e041      	b.n	80047f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fcf0 	bl	8002168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 fada 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_TIM_PWM_Start+0x24>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	e022      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d109      	bne.n	800483a <HAL_TIM_PWM_Start+0x3e>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b01      	cmp	r3, #1
 8004830:	bf14      	ite	ne
 8004832:	2301      	movne	r3, #1
 8004834:	2300      	moveq	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	e015      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d109      	bne.n	8004854 <HAL_TIM_PWM_Start+0x58>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e008      	b.n	8004866 <HAL_TIM_PWM_Start+0x6a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e068      	b.n	8004940 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0x82>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	e013      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start+0x92>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	e00b      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d104      	bne.n	800489e <HAL_TIM_PWM_Start+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800489c:	e003      	b.n	80048a6 <HAL_TIM_PWM_Start+0xaa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2201      	movs	r2, #1
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc5c 	bl	800516c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a23      	ldr	r2, [pc, #140]	; (8004948 <HAL_TIM_PWM_Start+0x14c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d107      	bne.n	80048ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <HAL_TIM_PWM_Start+0x14c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e0:	d013      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a19      	ldr	r2, [pc, #100]	; (800494c <HAL_TIM_PWM_Start+0x150>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <HAL_TIM_PWM_Start+0x154>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIM_PWM_Start+0x158>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIM_PWM_Start+0x10e>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_TIM_PWM_Start+0x15c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d111      	bne.n	800492e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d010      	beq.n	800493e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	e007      	b.n	800493e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40010000 	.word	0x40010000
 800494c:	40000400 	.word	0x40000400
 8004950:	40000800 	.word	0x40000800
 8004954:	40000c00 	.word	0x40000c00
 8004958:	40014000 	.word	0x40014000

0800495c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b02      	cmp	r3, #2
 8004970:	d122      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d11b      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0202 	mvn.w	r2, #2
 8004988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f9ba 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 80049a4:	e005      	b.n	80049b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f9ac 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 f9bd 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d122      	bne.n	8004a0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d11b      	bne.n	8004a0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0204 	mvn.w	r2, #4
 80049dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f990 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f982 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f993 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d122      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d11b      	bne.n	8004a60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0208 	mvn.w	r2, #8
 8004a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2204      	movs	r2, #4
 8004a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f966 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004a4c:	e005      	b.n	8004a5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f958 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f969 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d122      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0310 	and.w	r3, r3, #16
 8004a78:	2b10      	cmp	r3, #16
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0210 	mvn.w	r2, #16
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f93c 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f92e 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f93f 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0201 	mvn.w	r2, #1
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f908 	bl	8004cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b80      	cmp	r3, #128	; 0x80
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fc20 	bl	800534c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f904 	bl	8004d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0220 	mvn.w	r2, #32
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fbea 	bl	8005338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0ae      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	f200 809f 	bhi.w	8004cd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bd5 	.word	0x08004bd5
 8004ba4:	08004cd9 	.word	0x08004cd9
 8004ba8:	08004cd9 	.word	0x08004cd9
 8004bac:	08004cd9 	.word	0x08004cd9
 8004bb0:	08004c15 	.word	0x08004c15
 8004bb4:	08004cd9 	.word	0x08004cd9
 8004bb8:	08004cd9 	.word	0x08004cd9
 8004bbc:	08004cd9 	.word	0x08004cd9
 8004bc0:	08004c57 	.word	0x08004c57
 8004bc4:	08004cd9 	.word	0x08004cd9
 8004bc8:	08004cd9 	.word	0x08004cd9
 8004bcc:	08004cd9 	.word	0x08004cd9
 8004bd0:	08004c97 	.word	0x08004c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f93a 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0208 	orr.w	r2, r2, #8
 8004bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0204 	bic.w	r2, r2, #4
 8004bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6999      	ldr	r1, [r3, #24]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	619a      	str	r2, [r3, #24]
      break;
 8004c12:	e064      	b.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f980 	bl	8004f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6999      	ldr	r1, [r3, #24]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	021a      	lsls	r2, r3, #8
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	619a      	str	r2, [r3, #24]
      break;
 8004c54:	e043      	b.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68b9      	ldr	r1, [r7, #8]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f9cb 	bl	8004ff8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f042 0208 	orr.w	r2, r2, #8
 8004c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0204 	bic.w	r2, r2, #4
 8004c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69d9      	ldr	r1, [r3, #28]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	61da      	str	r2, [r3, #28]
      break;
 8004c94:	e023      	b.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa15 	bl	80050cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69d9      	ldr	r1, [r3, #28]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	021a      	lsls	r2, r3, #8
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	61da      	str	r2, [r3, #28]
      break;
 8004cd6:	e002      	b.n	8004cde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	75fb      	strb	r3, [r7, #23]
      break;
 8004cdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a34      	ldr	r2, [pc, #208]	; (8004e38 <TIM_Base_SetConfig+0xe4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00f      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d72:	d00b      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <TIM_Base_SetConfig+0xe8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a30      	ldr	r2, [pc, #192]	; (8004e40 <TIM_Base_SetConfig+0xec>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a2f      	ldr	r2, [pc, #188]	; (8004e44 <TIM_Base_SetConfig+0xf0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d108      	bne.n	8004d9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a25      	ldr	r2, [pc, #148]	; (8004e38 <TIM_Base_SetConfig+0xe4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01b      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dac:	d017      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <TIM_Base_SetConfig+0xe8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <TIM_Base_SetConfig+0xec>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00f      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <TIM_Base_SetConfig+0xf0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00b      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <TIM_Base_SetConfig+0xf4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <TIM_Base_SetConfig+0xf8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <TIM_Base_SetConfig+0xfc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d108      	bne.n	8004df0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <TIM_Base_SetConfig+0xe4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0302 	bic.w	r3, r3, #2
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <TIM_OC1_SetConfig+0xc8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10c      	bne.n	8004eca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0308 	bic.w	r3, r3, #8
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <TIM_OC1_SetConfig+0xc8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d111      	bne.n	8004ef6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40010000 	.word	0x40010000

08004f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f023 0210 	bic.w	r2, r3, #16
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0320 	bic.w	r3, r3, #32
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <TIM_OC2_SetConfig+0xd4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10d      	bne.n	8004f9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a15      	ldr	r2, [pc, #84]	; (8004ff4 <TIM_OC2_SetConfig+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d113      	bne.n	8004fcc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004faa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000

08004ff8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <TIM_OC3_SetConfig+0xd0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10d      	bne.n	8005072 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <TIM_OC3_SetConfig+0xd0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d113      	bne.n	80050a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010000 	.word	0x40010000

080050cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a10      	ldr	r2, [pc, #64]	; (8005168 <TIM_OC4_SetConfig+0x9c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d109      	bne.n	8005140 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000

0800516c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	2201      	movs	r2, #1
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a1a      	ldr	r2, [r3, #32]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	43db      	mvns	r3, r3
 800518e:	401a      	ands	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	fa01 f303 	lsl.w	r3, r1, r3
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e050      	b.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d013      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a18      	ldr	r2, [pc, #96]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a16      	ldr	r2, [pc, #88]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d10c      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	4313      	orrs	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40014000 	.word	0x40014000

08005294 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e03d      	b.n	800532c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b0ba      	sub	sp, #232	; 0xe8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800538c:	2300      	movs	r3, #0
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005396:	f003 030f 	and.w	r3, r3, #15
 800539a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800539e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d009      	beq.n	80053c6 <HAL_UART_IRQHandler+0x66>
 80053b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fb65 	bl	8005a8e <UART_Receive_IT>
      return;
 80053c4:	e256      	b.n	8005874 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 80de 	beq.w	800558c <HAL_UART_IRQHandler+0x22c>
 80053d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80d1 	beq.w	800558c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_UART_IRQHandler+0xae>
 80053f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_UART_IRQHandler+0xd2>
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f043 0202 	orr.w	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <HAL_UART_IRQHandler+0xf6>
 800543e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f043 0204 	orr.w	r2, r3, #4
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d011      	beq.n	8005486 <HAL_UART_IRQHandler+0x126>
 8005462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d105      	bne.n	800547a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800546e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f043 0208 	orr.w	r2, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 81ed 	beq.w	800586a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_UART_IRQHandler+0x14e>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 faf0 	bl	8005a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	bf0c      	ite	eq
 80054bc:	2301      	moveq	r3, #1
 80054be:	2300      	movne	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <HAL_UART_IRQHandler+0x17a>
 80054d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d04f      	beq.n	800557a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9f8 	bl	80058d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d141      	bne.n	8005572 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3314      	adds	r3, #20
 80054f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005504:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800550c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3314      	adds	r3, #20
 8005516:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800551a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800551e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005526:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1d9      	bne.n	80054ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	2b00      	cmp	r3, #0
 8005540:	d013      	beq.n	800556a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	4a7d      	ldr	r2, [pc, #500]	; (800573c <HAL_UART_IRQHandler+0x3dc>)
 8005548:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd f8c8 	bl	80026e4 <HAL_DMA_Abort_IT>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005564:	4610      	mov	r0, r2
 8005566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e00e      	b.n	8005588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f99a 	bl	80058a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005570:	e00a      	b.n	8005588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f996 	bl	80058a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	e006      	b.n	8005588 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f992 	bl	80058a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005586:	e170      	b.n	800586a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	bf00      	nop
    return;
 800558a:	e16e      	b.n	800586a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	2b01      	cmp	r3, #1
 8005592:	f040 814a 	bne.w	800582a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8143 	beq.w	800582a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 813c 	beq.w	800582a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	f040 80b4 	bne.w	8005740 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 8140 	beq.w	800586e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055f6:	429a      	cmp	r2, r3
 80055f8:	f080 8139 	bcs.w	800586e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005602:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560e:	f000 8088 	beq.w	8005722 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800562c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800563e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800564a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1d9      	bne.n	8005612 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	3314      	adds	r3, #20
 8005664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800566e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005682:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005686:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800568a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e1      	bne.n	800565e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3314      	adds	r3, #20
 80056a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e3      	bne.n	800569a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f2:	f023 0310 	bic.w	r3, r3, #16
 80056f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005704:	65ba      	str	r2, [r7, #88]	; 0x58
 8005706:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800570a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e3      	bne.n	80056e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	4618      	mov	r0, r3
 800571e:	f7fc ff71 	bl	8002604 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800572a:	b29b      	uxth	r3, r3
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	b29b      	uxth	r3, r3
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8c0 	bl	80058b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005738:	e099      	b.n	800586e <HAL_UART_IRQHandler+0x50e>
 800573a:	bf00      	nop
 800573c:	08005997 	.word	0x08005997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005748:	b29b      	uxth	r3, r3
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 808b 	beq.w	8005872 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800575c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8086 	beq.w	8005872 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	330c      	adds	r3, #12
 800576c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800577c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800578a:	647a      	str	r2, [r7, #68]	; 0x44
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e3      	bne.n	8005766 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3314      	adds	r3, #20
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	623b      	str	r3, [r7, #32]
   return(result);
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3314      	adds	r3, #20
 80057be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057c2:	633a      	str	r2, [r7, #48]	; 0x30
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e3      	bne.n	800579e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005808:	61fa      	str	r2, [r7, #28]
 800580a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	69b9      	ldr	r1, [r7, #24]
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	617b      	str	r3, [r7, #20]
   return(result);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e3      	bne.n	80057e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800581c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f848 	bl	80058b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005828:	e023      	b.n	8005872 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800582a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <HAL_UART_IRQHandler+0x4ea>
 8005836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8bb 	bl	80059be <UART_Transmit_IT>
    return;
 8005848:	e014      	b.n	8005874 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00e      	beq.n	8005874 <HAL_UART_IRQHandler+0x514>
 8005856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d008      	beq.n	8005874 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8fb 	bl	8005a5e <UART_EndTransmit_IT>
    return;
 8005868:	e004      	b.n	8005874 <HAL_UART_IRQHandler+0x514>
    return;
 800586a:	bf00      	nop
 800586c:	e002      	b.n	8005874 <HAL_UART_IRQHandler+0x514>
      return;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <HAL_UART_IRQHandler+0x514>
      return;
 8005872:	bf00      	nop
  }
}
 8005874:	37e8      	adds	r7, #232	; 0xe8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop

0800587c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b095      	sub	sp, #84	; 0x54
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e2:	e853 3f00 	ldrex	r3, [r3]
 80058e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058f8:	643a      	str	r2, [r7, #64]	; 0x40
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005900:	e841 2300 	strex	r3, r2, [r1]
 8005904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1e5      	bne.n	80058d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	61fb      	str	r3, [r7, #28]
   return(result);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f023 0301 	bic.w	r3, r3, #1
 8005922:	64bb      	str	r3, [r7, #72]	; 0x48
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3314      	adds	r3, #20
 800592a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e5      	bne.n	800590c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	2b01      	cmp	r3, #1
 8005946:	d119      	bne.n	800597c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	60bb      	str	r3, [r7, #8]
   return(result);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f023 0310 	bic.w	r3, r3, #16
 800595e:	647b      	str	r3, [r7, #68]	; 0x44
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005968:	61ba      	str	r2, [r7, #24]
 800596a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	613b      	str	r3, [r7, #16]
   return(result);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e5      	bne.n	8005948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800598a:	bf00      	nop
 800598c:	3754      	adds	r7, #84	; 0x54
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ff77 	bl	80058a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b6:	bf00      	nop
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b21      	cmp	r3, #33	; 0x21
 80059d0:	d13e      	bne.n	8005a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	d114      	bne.n	8005a06 <UART_Transmit_IT+0x48>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d110      	bne.n	8005a06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	1c9a      	adds	r2, r3, #2
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	621a      	str	r2, [r3, #32]
 8005a04:	e008      	b.n	8005a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6211      	str	r1, [r2, #32]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4619      	mov	r1, r3
 8005a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10f      	bne.n	8005a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68da      	ldr	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e000      	b.n	8005a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a50:	2302      	movs	r3, #2
  }
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff fefc 	bl	800587c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b08c      	sub	sp, #48	; 0x30
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b22      	cmp	r3, #34	; 0x22
 8005aa0:	f040 80ab 	bne.w	8005bfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aac:	d117      	bne.n	8005ade <UART_Receive_IT+0x50>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d113      	bne.n	8005ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	1c9a      	adds	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	629a      	str	r2, [r3, #40]	; 0x28
 8005adc:	e026      	b.n	8005b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d007      	beq.n	8005b02 <UART_Receive_IT+0x74>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <UART_Receive_IT+0x82>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e008      	b.n	8005b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d15a      	bne.n	8005bf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0220 	bic.w	r2, r2, #32
 8005b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d135      	bne.n	8005bec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	330c      	adds	r3, #12
 8005b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba6:	623a      	str	r2, [r7, #32]
 8005ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	69f9      	ldr	r1, [r7, #28]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d10a      	bne.n	8005bde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7ff fe67 	bl	80058b8 <HAL_UARTEx_RxEventCallback>
 8005bea:	e002      	b.n	8005bf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fe4f 	bl	8005890 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e002      	b.n	8005bfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e000      	b.n	8005bfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bfa:	2302      	movs	r3, #2
  }
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3730      	adds	r7, #48	; 0x30
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <__NVIC_SetPriority>:
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6039      	str	r1, [r7, #0]
 8005c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	db0a      	blt.n	8005c2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	490c      	ldr	r1, [pc, #48]	; (8005c50 <__NVIC_SetPriority+0x4c>)
 8005c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c22:	0112      	lsls	r2, r2, #4
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	440b      	add	r3, r1
 8005c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c2c:	e00a      	b.n	8005c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4908      	ldr	r1, [pc, #32]	; (8005c54 <__NVIC_SetPriority+0x50>)
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3b04      	subs	r3, #4
 8005c3c:	0112      	lsls	r2, r2, #4
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	440b      	add	r3, r1
 8005c42:	761a      	strb	r2, [r3, #24]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	e000e100 	.word	0xe000e100
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <SysTick_Handler+0x1c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005c60:	f001 fcfe 	bl	8007660 <xTaskGetSchedulerState>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d001      	beq.n	8005c6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005c6a:	f002 fae5 	bl	8008238 <xPortSysTickHandler>
  }
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	e000e010 	.word	0xe000e010

08005c78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	f06f 0004 	mvn.w	r0, #4
 8005c82:	f7ff ffbf 	bl	8005c04 <__NVIC_SetPriority>
#endif
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c92:	f3ef 8305 	mrs	r3, IPSR
 8005c96:	603b      	str	r3, [r7, #0]
  return(result);
 8005c98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005c9e:	f06f 0305 	mvn.w	r3, #5
 8005ca2:	607b      	str	r3, [r7, #4]
 8005ca4:	e00c      	b.n	8005cc0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <osKernelInitialize+0x44>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d105      	bne.n	8005cba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <osKernelInitialize+0x44>)
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	e002      	b.n	8005cc0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005cc0:	687b      	ldr	r3, [r7, #4]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	20000400 	.word	0x20000400

08005cd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cda:	f3ef 8305 	mrs	r3, IPSR
 8005cde:	603b      	str	r3, [r7, #0]
  return(result);
 8005ce0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <osKernelStart+0x1a>
    stat = osErrorISR;
 8005ce6:	f06f 0305 	mvn.w	r3, #5
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	e010      	b.n	8005d10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <osKernelStart+0x48>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d109      	bne.n	8005d0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cf6:	f7ff ffbf 	bl	8005c78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <osKernelStart+0x48>)
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d00:	f001 f866 	bl	8006dd0 <vTaskStartScheduler>
      stat = osOK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	607b      	str	r3, [r7, #4]
 8005d08:	e002      	b.n	8005d10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d10:	687b      	ldr	r3, [r7, #4]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000400 	.word	0x20000400

08005d20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	; 0x38
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d30:	f3ef 8305 	mrs	r3, IPSR
 8005d34:	617b      	str	r3, [r7, #20]
  return(result);
 8005d36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d17e      	bne.n	8005e3a <osThreadNew+0x11a>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d07b      	beq.n	8005e3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d42:	2380      	movs	r3, #128	; 0x80
 8005d44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d46:	2318      	movs	r3, #24
 8005d48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d045      	beq.n	8005de6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <osThreadNew+0x48>
        name = attr->name;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <osThreadNew+0x6e>
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b38      	cmp	r3, #56	; 0x38
 8005d80:	d805      	bhi.n	8005d8e <osThreadNew+0x6e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <osThreadNew+0x72>
        return (NULL);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e054      	b.n	8005e3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00e      	beq.n	8005dc8 <osThreadNew+0xa8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b5b      	cmp	r3, #91	; 0x5b
 8005db0:	d90a      	bls.n	8005dc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d006      	beq.n	8005dc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <osThreadNew+0xa8>
        mem = 1;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	e010      	b.n	8005dea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10c      	bne.n	8005dea <osThreadNew+0xca>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <osThreadNew+0xca>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <osThreadNew+0xca>
          mem = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	e001      	b.n	8005dea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d110      	bne.n	8005e12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005df8:	9202      	str	r2, [sp, #8]
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6a3a      	ldr	r2, [r7, #32]
 8005e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fe0c 	bl	8006a24 <xTaskCreateStatic>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e013      	b.n	8005e3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d110      	bne.n	8005e3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f107 0310 	add.w	r3, r7, #16
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fe57 	bl	8006ade <xTaskCreate>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d001      	beq.n	8005e3a <osThreadNew+0x11a>
            hTask = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e3a:	693b      	ldr	r3, [r7, #16]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3728      	adds	r7, #40	; 0x28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e4c:	f3ef 8305 	mrs	r3, IPSR
 8005e50:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <osDelay+0x1c>
    stat = osErrorISR;
 8005e58:	f06f 0305 	mvn.w	r3, #5
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	e007      	b.n	8005e70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 ff7c 	bl	8006d68 <vTaskDelay>
    }
  }

  return (stat);
 8005e70:	68fb      	ldr	r3, [r7, #12]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a07      	ldr	r2, [pc, #28]	; (8005ea8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a06      	ldr	r2, [pc, #24]	; (8005eac <vApplicationGetIdleTaskMemory+0x30>)
 8005e92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2280      	movs	r2, #128	; 0x80
 8005e98:	601a      	str	r2, [r3, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000404 	.word	0x20000404
 8005eac:	20000460 	.word	0x20000460

08005eb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a07      	ldr	r2, [pc, #28]	; (8005edc <vApplicationGetTimerTaskMemory+0x2c>)
 8005ec0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a06      	ldr	r2, [pc, #24]	; (8005ee0 <vApplicationGetTimerTaskMemory+0x30>)
 8005ec6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20000660 	.word	0x20000660
 8005ee0:	200006bc 	.word	0x200006bc

08005ee4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f103 0208 	add.w	r2, r3, #8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f103 0208 	add.w	r2, r3, #8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f103 0208 	add.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d103      	bne.n	8005fa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	e00c      	b.n	8005fc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3308      	adds	r3, #8
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e002      	b.n	8005fb4 <vListInsert+0x2e>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d2f6      	bcs.n	8005fae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6892      	ldr	r2, [r2, #8]
 800600e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6852      	ldr	r2, [r2, #4]
 8006018:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d103      	bne.n	800602c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	1e5a      	subs	r2, r3, #1
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006076:	f002 f84d 	bl	8008114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	441a      	add	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	3b01      	subs	r3, #1
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060ac:	fb01 f303 	mul.w	r3, r1, r3
 80060b0:	441a      	add	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	22ff      	movs	r2, #255	; 0xff
 80060ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	22ff      	movs	r2, #255	; 0xff
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d114      	bne.n	80060f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01a      	beq.n	800610a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3310      	adds	r3, #16
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 f903 	bl	80072e4 <xTaskRemoveFromEventList>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d012      	beq.n	800610a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060e4:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <xQueueGenericReset+0xcc>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	e009      	b.n	800610a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3310      	adds	r3, #16
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fef2 	bl	8005ee4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3324      	adds	r3, #36	; 0x24
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff feed 	bl	8005ee4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800610a:	f002 f833 	bl	8008174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800610e:	2301      	movs	r3, #1
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	; 0x38
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <xQueueGenericCreateStatic+0x52>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <xQueueGenericCreateStatic+0x56>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueGenericCreateStatic+0x58>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	623b      	str	r3, [r7, #32]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <xQueueGenericCreateStatic+0x7e>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <xQueueGenericCreateStatic+0x82>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericCreateStatic+0x84>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	61fb      	str	r3, [r7, #28]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061ba:	2350      	movs	r3, #80	; 0x50
 80061bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b50      	cmp	r3, #80	; 0x50
 80061c2:	d00a      	beq.n	80061da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c8:	f383 8811 	msr	BASEPRI, r3
 80061cc:	f3bf 8f6f 	isb	sy
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	61bb      	str	r3, [r7, #24]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4613      	mov	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f805 	bl	800620c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006204:	4618      	mov	r0, r3
 8006206:	3730      	adds	r7, #48	; 0x30
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e002      	b.n	800622e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800623a:	2101      	movs	r1, #1
 800623c:	69b8      	ldr	r0, [r7, #24]
 800623e:	f7ff ff05 	bl	800604c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08e      	sub	sp, #56	; 0x38
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006262:	2300      	movs	r3, #0
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10a      	bne.n	8006286 <xQueueGenericSend+0x32>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d103      	bne.n	8006294 <xQueueGenericSend+0x40>
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xQueueGenericSend+0x44>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xQueueGenericSend+0x46>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xQueueGenericSend+0x60>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x6e>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericSend+0x72>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericSend+0x74>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e2:	f001 f9bd 	bl	8007660 <xTaskGetSchedulerState>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <xQueueGenericSend+0x9e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <xQueueGenericSend+0xa2>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueGenericSend+0xa4>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueGenericSend+0xbe>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61fb      	str	r3, [r7, #28]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006312:	f001 feff 	bl	8008114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <xQueueGenericSend+0xd4>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b02      	cmp	r3, #2
 8006326:	d129      	bne.n	800637c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800632e:	f000 fa0b 	bl	8006748 <prvCopyDataToQueue>
 8006332:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	d010      	beq.n	800635e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	3324      	adds	r3, #36	; 0x24
 8006340:	4618      	mov	r0, r3
 8006342:	f000 ffcf 	bl	80072e4 <xTaskRemoveFromEventList>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d013      	beq.n	8006374 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800634c:	4b3f      	ldr	r3, [pc, #252]	; (800644c <xQueueGenericSend+0x1f8>)
 800634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	e00a      	b.n	8006374 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006364:	4b39      	ldr	r3, [pc, #228]	; (800644c <xQueueGenericSend+0x1f8>)
 8006366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006374:	f001 fefe 	bl	8008174 <vPortExitCritical>
				return pdPASS;
 8006378:	2301      	movs	r3, #1
 800637a:	e063      	b.n	8006444 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d103      	bne.n	800638a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006382:	f001 fef7 	bl	8008174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006386:	2300      	movs	r3, #0
 8006388:	e05c      	b.n	8006444 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006390:	f107 0314 	add.w	r3, r7, #20
 8006394:	4618      	mov	r0, r3
 8006396:	f001 f809 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800639a:	2301      	movs	r3, #1
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800639e:	f001 fee9 	bl	8008174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063a2:	f000 fd7b 	bl	8006e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063a6:	f001 feb5 	bl	8008114 <vPortEnterCritical>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b0:	b25b      	sxtb	r3, r3
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d103      	bne.n	80063c0 <xQueueGenericSend+0x16c>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c6:	b25b      	sxtb	r3, r3
 80063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063cc:	d103      	bne.n	80063d6 <xQueueGenericSend+0x182>
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d6:	f001 fecd 	bl	8008174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063da:	1d3a      	adds	r2, r7, #4
 80063dc:	f107 0314 	add.w	r3, r7, #20
 80063e0:	4611      	mov	r1, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fff8 	bl	80073d8 <xTaskCheckForTimeOut>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d124      	bne.n	8006438 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f0:	f000 faa2 	bl	8006938 <prvIsQueueFull>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d018      	beq.n	800642c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	3310      	adds	r3, #16
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4611      	mov	r1, r2
 8006402:	4618      	mov	r0, r3
 8006404:	f000 ff1e 	bl	8007244 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800640a:	f000 fa2d 	bl	8006868 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800640e:	f000 fd53 	bl	8006eb8 <xTaskResumeAll>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	f47f af7c 	bne.w	8006312 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800641a:	4b0c      	ldr	r3, [pc, #48]	; (800644c <xQueueGenericSend+0x1f8>)
 800641c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	e772      	b.n	8006312 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800642c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800642e:	f000 fa1b 	bl	8006868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006432:	f000 fd41 	bl	8006eb8 <xTaskResumeAll>
 8006436:	e76c      	b.n	8006312 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643a:	f000 fa15 	bl	8006868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800643e:	f000 fd3b 	bl	8006eb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006442:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006444:	4618      	mov	r0, r3
 8006446:	3738      	adds	r7, #56	; 0x38
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	e000ed04 	.word	0xe000ed04

08006450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b090      	sub	sp, #64	; 0x40
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10a      	bne.n	800647e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d103      	bne.n	800648c <xQueueGenericSendFromISR+0x3c>
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xQueueGenericSendFromISR+0x40>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <xQueueGenericSendFromISR+0x42>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSendFromISR+0x6a>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <xQueueGenericSendFromISR+0x6e>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <xQueueGenericSendFromISR+0x70>
 80064be:	2300      	movs	r3, #0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	623b      	str	r3, [r7, #32]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064da:	f001 fefd 	bl	80082d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064de:	f3ef 8211 	mrs	r2, BASEPRI
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	61fa      	str	r2, [r7, #28]
 80064f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	429a      	cmp	r2, r3
 8006504:	d302      	bcc.n	800650c <xQueueGenericSendFromISR+0xbc>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d12f      	bne.n	800656c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006522:	f000 f911 	bl	8006748 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006526:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d112      	bne.n	8006556 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	d016      	beq.n	8006566 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	3324      	adds	r3, #36	; 0x24
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fed1 	bl	80072e4 <xTaskRemoveFromEventList>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00e      	beq.n	8006566 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	e007      	b.n	8006566 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800655a:	3301      	adds	r3, #1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	b25a      	sxtb	r2, r3
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006566:	2301      	movs	r3, #1
 8006568:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800656a:	e001      	b.n	8006570 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800656c:	2300      	movs	r3, #0
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800657a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800657c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800657e:	4618      	mov	r0, r3
 8006580:	3740      	adds	r7, #64	; 0x40
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08c      	sub	sp, #48	; 0x30
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <xQueueReceive+0x30>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	623b      	str	r3, [r7, #32]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <xQueueReceive+0x3e>
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <xQueueReceive+0x42>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <xQueueReceive+0x44>
 80065ca:	2300      	movs	r3, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <xQueueReceive+0x5e>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	61fb      	str	r3, [r7, #28]
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065e6:	f001 f83b 	bl	8007660 <xTaskGetSchedulerState>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <xQueueReceive+0x6e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <xQueueReceive+0x72>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <xQueueReceive+0x74>
 80065fa:	2300      	movs	r3, #0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xQueueReceive+0x8e>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	61bb      	str	r3, [r7, #24]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006616:	f001 fd7d 	bl	8008114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	2b00      	cmp	r3, #0
 8006624:	d01f      	beq.n	8006666 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800662a:	f000 f8f7 	bl	800681c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	1e5a      	subs	r2, r3, #1
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00f      	beq.n	800665e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	3310      	adds	r3, #16
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fe4e 	bl	80072e4 <xTaskRemoveFromEventList>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800664e:	4b3d      	ldr	r3, [pc, #244]	; (8006744 <xQueueReceive+0x1bc>)
 8006650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800665e:	f001 fd89 	bl	8008174 <vPortExitCritical>
				return pdPASS;
 8006662:	2301      	movs	r3, #1
 8006664:	e069      	b.n	800673a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800666c:	f001 fd82 	bl	8008174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006670:	2300      	movs	r3, #0
 8006672:	e062      	b.n	800673a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800667a:	f107 0310 	add.w	r3, r7, #16
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fe94 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006688:	f001 fd74 	bl	8008174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800668c:	f000 fc06 	bl	8006e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006690:	f001 fd40 	bl	8008114 <vPortEnterCritical>
 8006694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800669a:	b25b      	sxtb	r3, r3
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d103      	bne.n	80066aa <xQueueReceive+0x122>
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d103      	bne.n	80066c0 <xQueueReceive+0x138>
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c0:	f001 fd58 	bl	8008174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c4:	1d3a      	adds	r2, r7, #4
 80066c6:	f107 0310 	add.w	r3, r7, #16
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fe83 	bl	80073d8 <xTaskCheckForTimeOut>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d123      	bne.n	8006720 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066da:	f000 f917 	bl	800690c <prvIsQueueEmpty>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d017      	beq.n	8006714 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	3324      	adds	r3, #36	; 0x24
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fda9 	bl	8007244 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066f4:	f000 f8b8 	bl	8006868 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066f8:	f000 fbde 	bl	8006eb8 <xTaskResumeAll>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d189      	bne.n	8006616 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006702:	4b10      	ldr	r3, [pc, #64]	; (8006744 <xQueueReceive+0x1bc>)
 8006704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	e780      	b.n	8006616 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006716:	f000 f8a7 	bl	8006868 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800671a:	f000 fbcd 	bl	8006eb8 <xTaskResumeAll>
 800671e:	e77a      	b.n	8006616 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006722:	f000 f8a1 	bl	8006868 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006726:	f000 fbc7 	bl	8006eb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800672a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672c:	f000 f8ee 	bl	800690c <prvIsQueueEmpty>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	f43f af6f 	beq.w	8006616 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006738:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800673a:	4618      	mov	r0, r3
 800673c:	3730      	adds	r7, #48	; 0x30
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	e000ed04 	.word	0xe000ed04

08006748 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d14d      	bne.n	800680a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 ff92 	bl	800769c <xTaskPriorityDisinherit>
 8006778:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	609a      	str	r2, [r3, #8]
 8006780:	e043      	b.n	800680a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d119      	bne.n	80067bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6858      	ldr	r0, [r3, #4]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	461a      	mov	r2, r3
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	f002 f82a 	bl	80087ec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d32b      	bcc.n	800680a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	605a      	str	r2, [r3, #4]
 80067ba:	e026      	b.n	800680a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68d8      	ldr	r0, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c4:	461a      	mov	r2, r3
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	f002 f810 	bl	80087ec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	425b      	negs	r3, r3
 80067d6:	441a      	add	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d207      	bcs.n	80067f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689a      	ldr	r2, [r3, #8]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	425b      	negs	r3, r3
 80067f2:	441a      	add	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d105      	bne.n	800680a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	3b01      	subs	r3, #1
 8006808:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1c5a      	adds	r2, r3, #1
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006812:	697b      	ldr	r3, [r7, #20]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	441a      	add	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	429a      	cmp	r2, r3
 8006846:	d303      	bcc.n	8006850 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68d9      	ldr	r1, [r3, #12]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	461a      	mov	r2, r3
 800685a:	6838      	ldr	r0, [r7, #0]
 800685c:	f001 ffc6 	bl	80087ec <memcpy>
	}
}
 8006860:	bf00      	nop
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006870:	f001 fc50 	bl	8008114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800687a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800687c:	e011      	b.n	80068a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d012      	beq.n	80068ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3324      	adds	r3, #36	; 0x24
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fd2a 	bl	80072e4 <xTaskRemoveFromEventList>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006896:	f000 fe01 	bl	800749c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	3b01      	subs	r3, #1
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dce9      	bgt.n	800687e <prvUnlockQueue+0x16>
 80068aa:	e000      	b.n	80068ae <prvUnlockQueue+0x46>
					break;
 80068ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068b6:	f001 fc5d 	bl	8008174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068ba:	f001 fc2b 	bl	8008114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068c6:	e011      	b.n	80068ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3310      	adds	r3, #16
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fd05 	bl	80072e4 <xTaskRemoveFromEventList>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068e0:	f000 fddc 	bl	800749c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dce9      	bgt.n	80068c8 <prvUnlockQueue+0x60>
 80068f4:	e000      	b.n	80068f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	22ff      	movs	r2, #255	; 0xff
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006900:	f001 fc38 	bl	8008174 <vPortExitCritical>
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006914:	f001 fbfe 	bl	8008114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	e001      	b.n	800692a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800692a:	f001 fc23 	bl	8008174 <vPortExitCritical>

	return xReturn;
 800692e:	68fb      	ldr	r3, [r7, #12]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006940:	f001 fbe8 	bl	8008114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	429a      	cmp	r2, r3
 800694e:	d102      	bne.n	8006956 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	e001      	b.n	800695a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800695a:	f001 fc0b 	bl	8008174 <vPortExitCritical>

	return xReturn;
 800695e:	68fb      	ldr	r3, [r7, #12]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	e014      	b.n	80069a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006978:	4a0f      	ldr	r2, [pc, #60]	; (80069b8 <vQueueAddToRegistry+0x50>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10b      	bne.n	800699c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006984:	490c      	ldr	r1, [pc, #48]	; (80069b8 <vQueueAddToRegistry+0x50>)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800698e:	4a0a      	ldr	r2, [pc, #40]	; (80069b8 <vQueueAddToRegistry+0x50>)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800699a:	e006      	b.n	80069aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	3301      	adds	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2b07      	cmp	r3, #7
 80069a6:	d9e7      	bls.n	8006978 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000abc 	.word	0x20000abc

080069bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069cc:	f001 fba2 	bl	8008114 <vPortEnterCritical>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d6:	b25b      	sxtb	r3, r3
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d103      	bne.n	80069e6 <vQueueWaitForMessageRestricted+0x2a>
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d103      	bne.n	80069fc <vQueueWaitForMessageRestricted+0x40>
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069fc:	f001 fbba 	bl	8008174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d106      	bne.n	8006a16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	3324      	adds	r3, #36	; 0x24
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fc3b 	bl	800728c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a16:	6978      	ldr	r0, [r7, #20]
 8006a18:	f7ff ff26 	bl	8006868 <prvUnlockQueue>
	}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08e      	sub	sp, #56	; 0x38
 8006a28:	af04      	add	r7, sp, #16
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	623b      	str	r3, [r7, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	e7fe      	b.n	8006a4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xTaskCreateStatic+0x46>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	61fb      	str	r3, [r7, #28]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a6a:	235c      	movs	r3, #92	; 0x5c
 8006a6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b5c      	cmp	r3, #92	; 0x5c
 8006a72:	d00a      	beq.n	8006a8a <xTaskCreateStatic+0x66>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	61bb      	str	r3, [r7, #24]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a8a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d01e      	beq.n	8006ad0 <xTaskCreateStatic+0xac>
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01b      	beq.n	8006ad0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	9302      	str	r3, [sp, #8]
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f850 	bl	8006b68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aca:	f000 f8dd 	bl	8006c88 <prvAddNewTaskToReadyList>
 8006ace:	e001      	b.n	8006ad4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ad4:	697b      	ldr	r3, [r7, #20]
	}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3728      	adds	r7, #40	; 0x28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b08c      	sub	sp, #48	; 0x30
 8006ae2:	af04      	add	r7, sp, #16
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006aee:	88fb      	ldrh	r3, [r7, #6]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 fc30 	bl	8008358 <pvPortMalloc>
 8006af8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00e      	beq.n	8006b1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b00:	205c      	movs	r0, #92	; 0x5c
 8006b02:	f001 fc29 	bl	8008358 <pvPortMalloc>
 8006b06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
 8006b14:	e005      	b.n	8006b22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b16:	6978      	ldr	r0, [r7, #20]
 8006b18:	f001 fcea 	bl	80084f0 <vPortFree>
 8006b1c:	e001      	b.n	8006b22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d017      	beq.n	8006b58 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	2300      	movs	r3, #0
 8006b34:	9303      	str	r3, [sp, #12]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	9302      	str	r3, [sp, #8]
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	9301      	str	r3, [sp, #4]
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 f80e 	bl	8006b68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b4c:	69f8      	ldr	r0, [r7, #28]
 8006b4e:	f000 f89b 	bl	8006c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b52:	2301      	movs	r3, #1
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e002      	b.n	8006b5e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b58:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
	}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	461a      	mov	r2, r3
 8006b80:	21a5      	movs	r1, #165	; 0xa5
 8006b82:	f001 fe41 	bl	8008808 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b90:	3b01      	subs	r3, #1
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
 8006b9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	617b      	str	r3, [r7, #20]
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01f      	beq.n	8006c06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	e012      	b.n	8006bf2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	7819      	ldrb	r1, [r3, #0]
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3334      	adds	r3, #52	; 0x34
 8006bdc:	460a      	mov	r2, r1
 8006bde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	61fb      	str	r3, [r7, #28]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b0f      	cmp	r3, #15
 8006bf6:	d9e9      	bls.n	8006bcc <prvInitialiseNewTask+0x64>
 8006bf8:	e000      	b.n	8006bfc <prvInitialiseNewTask+0x94>
			{
				break;
 8006bfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c04:	e003      	b.n	8006c0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	2b37      	cmp	r3, #55	; 0x37
 8006c12:	d901      	bls.n	8006c18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c14:	2337      	movs	r3, #55	; 0x37
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2200      	movs	r2, #0
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff f978 	bl	8005f24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	3318      	adds	r3, #24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff f973 	bl	8005f24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	2200      	movs	r2, #0
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	68f9      	ldr	r1, [r7, #12]
 8006c66:	69b8      	ldr	r0, [r7, #24]
 8006c68:	f001 f928 	bl	8007ebc <pxPortInitialiseStack>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c7e:	bf00      	nop
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c90:	f001 fa40 	bl	8008114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c94:	4b2d      	ldr	r3, [pc, #180]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	4a2c      	ldr	r2, [pc, #176]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c9e:	4b2c      	ldr	r3, [pc, #176]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ca6:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cac:	4b27      	ldr	r3, [pc, #156]	; (8006d4c <prvAddNewTaskToReadyList+0xc4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d110      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cb4:	f000 fc16 	bl	80074e4 <prvInitialiseTaskLists>
 8006cb8:	e00d      	b.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cba:	4b26      	ldr	r3, [pc, #152]	; (8006d54 <prvAddNewTaskToReadyList+0xcc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cc2:	4b23      	ldr	r3, [pc, #140]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d802      	bhi.n	8006cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cd0:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cd6:	4b20      	ldr	r3, [pc, #128]	; (8006d58 <prvAddNewTaskToReadyList+0xd0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	4a1e      	ldr	r2, [pc, #120]	; (8006d58 <prvAddNewTaskToReadyList+0xd0>)
 8006cde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	; (8006d58 <prvAddNewTaskToReadyList+0xd0>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	4b1b      	ldr	r3, [pc, #108]	; (8006d5c <prvAddNewTaskToReadyList+0xd4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d903      	bls.n	8006cfc <prvAddNewTaskToReadyList+0x74>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	4a18      	ldr	r2, [pc, #96]	; (8006d5c <prvAddNewTaskToReadyList+0xd4>)
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <prvAddNewTaskToReadyList+0xd8>)
 8006d0a:	441a      	add	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4619      	mov	r1, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	f7ff f913 	bl	8005f3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d18:	f001 fa2c 	bl	8008174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <prvAddNewTaskToReadyList+0xcc>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00e      	beq.n	8006d42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d24:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <prvAddNewTaskToReadyList+0xc8>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d207      	bcs.n	8006d42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d32:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <prvAddNewTaskToReadyList+0xdc>)
 8006d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d42:	bf00      	nop
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000fd0 	.word	0x20000fd0
 8006d50:	20000afc 	.word	0x20000afc
 8006d54:	20000fdc 	.word	0x20000fdc
 8006d58:	20000fec 	.word	0x20000fec
 8006d5c:	20000fd8 	.word	0x20000fd8
 8006d60:	20000b00 	.word	0x20000b00
 8006d64:	e000ed04 	.word	0xe000ed04

08006d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d017      	beq.n	8006daa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <vTaskDelay+0x60>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00a      	beq.n	8006d98 <vTaskDelay+0x30>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	60bb      	str	r3, [r7, #8]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d98:	f000 f880 	bl	8006e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fcea 	bl	8007778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006da4:	f000 f888 	bl	8006eb8 <xTaskResumeAll>
 8006da8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d107      	bne.n	8006dc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <vTaskDelay+0x64>)
 8006db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20000ff8 	.word	0x20000ff8
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08a      	sub	sp, #40	; 0x28
 8006dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dde:	463a      	mov	r2, r7
 8006de0:	1d39      	adds	r1, r7, #4
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff f848 	bl	8005e7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	9202      	str	r2, [sp, #8]
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	460a      	mov	r2, r1
 8006dfe:	4921      	ldr	r1, [pc, #132]	; (8006e84 <vTaskStartScheduler+0xb4>)
 8006e00:	4821      	ldr	r0, [pc, #132]	; (8006e88 <vTaskStartScheduler+0xb8>)
 8006e02:	f7ff fe0f 	bl	8006a24 <xTaskCreateStatic>
 8006e06:	4603      	mov	r3, r0
 8006e08:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <vTaskStartScheduler+0xbc>)
 8006e0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e0c:	4b1f      	ldr	r3, [pc, #124]	; (8006e8c <vTaskStartScheduler+0xbc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e14:	2301      	movs	r3, #1
 8006e16:	617b      	str	r3, [r7, #20]
 8006e18:	e001      	b.n	8006e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d102      	bne.n	8006e2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e24:	f000 fcfc 	bl	8007820 <xTimerCreateTimerTask>
 8006e28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d116      	bne.n	8006e5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	613b      	str	r3, [r7, #16]
}
 8006e42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e44:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <vTaskStartScheduler+0xc0>)
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e4c:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <vTaskStartScheduler+0xc4>)
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e52:	4b11      	ldr	r3, [pc, #68]	; (8006e98 <vTaskStartScheduler+0xc8>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e58:	f001 f8ba 	bl	8007fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e5c:	e00e      	b.n	8006e7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e64:	d10a      	bne.n	8006e7c <vTaskStartScheduler+0xac>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60fb      	str	r3, [r7, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <vTaskStartScheduler+0xaa>
}
 8006e7c:	bf00      	nop
 8006e7e:	3718      	adds	r7, #24
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08008ad0 	.word	0x08008ad0
 8006e88:	080074b5 	.word	0x080074b5
 8006e8c:	20000ff4 	.word	0x20000ff4
 8006e90:	20000ff0 	.word	0x20000ff0
 8006e94:	20000fdc 	.word	0x20000fdc
 8006e98:	20000fd4 	.word	0x20000fd4

08006e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <vTaskSuspendAll+0x18>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	4a03      	ldr	r2, [pc, #12]	; (8006eb4 <vTaskSuspendAll+0x18>)
 8006ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eaa:	bf00      	nop
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	20000ff8 	.word	0x20000ff8

08006eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ec6:	4b42      	ldr	r3, [pc, #264]	; (8006fd0 <xTaskResumeAll+0x118>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	603b      	str	r3, [r7, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ee4:	f001 f916 	bl	8008114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ee8:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <xTaskResumeAll+0x118>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <xTaskResumeAll+0x118>)
 8006ef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ef2:	4b37      	ldr	r3, [pc, #220]	; (8006fd0 <xTaskResumeAll+0x118>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d162      	bne.n	8006fc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006efa:	4b36      	ldr	r3, [pc, #216]	; (8006fd4 <xTaskResumeAll+0x11c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d05e      	beq.n	8006fc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f02:	e02f      	b.n	8006f64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f04:	4b34      	ldr	r3, [pc, #208]	; (8006fd8 <xTaskResumeAll+0x120>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f871 	bl	8005ff8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3304      	adds	r3, #4
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff f86c 	bl	8005ff8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f24:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <xTaskResumeAll+0x124>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d903      	bls.n	8006f34 <xTaskResumeAll+0x7c>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <xTaskResumeAll+0x124>)
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4a27      	ldr	r2, [pc, #156]	; (8006fe0 <xTaskResumeAll+0x128>)
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f7fe fff7 	bl	8005f3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b23      	ldr	r3, [pc, #140]	; (8006fe4 <xTaskResumeAll+0x12c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d302      	bcc.n	8006f64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f5e:	4b22      	ldr	r3, [pc, #136]	; (8006fe8 <xTaskResumeAll+0x130>)
 8006f60:	2201      	movs	r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f64:	4b1c      	ldr	r3, [pc, #112]	; (8006fd8 <xTaskResumeAll+0x120>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1cb      	bne.n	8006f04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f72:	f000 fb55 	bl	8007620 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f76:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <xTaskResumeAll+0x134>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d010      	beq.n	8006fa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f82:	f000 f847 	bl	8007014 <xTaskIncrementTick>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f8c:	4b16      	ldr	r3, [pc, #88]	; (8006fe8 <xTaskResumeAll+0x130>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f1      	bne.n	8006f82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <xTaskResumeAll+0x134>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fa4:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <xTaskResumeAll+0x130>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d009      	beq.n	8006fc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <xTaskResumeAll+0x138>)
 8006fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fc0:	f001 f8d8 	bl	8008174 <vPortExitCritical>

	return xAlreadyYielded;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000ff8 	.word	0x20000ff8
 8006fd4:	20000fd0 	.word	0x20000fd0
 8006fd8:	20000f90 	.word	0x20000f90
 8006fdc:	20000fd8 	.word	0x20000fd8
 8006fe0:	20000b00 	.word	0x20000b00
 8006fe4:	20000afc 	.word	0x20000afc
 8006fe8:	20000fe4 	.word	0x20000fe4
 8006fec:	20000fe0 	.word	0x20000fe0
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <xTaskGetTickCount+0x1c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007000:	687b      	ldr	r3, [r7, #4]
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000fd4 	.word	0x20000fd4

08007014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800701e:	4b4f      	ldr	r3, [pc, #316]	; (800715c <xTaskIncrementTick+0x148>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 808f 	bne.w	8007146 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007028:	4b4d      	ldr	r3, [pc, #308]	; (8007160 <xTaskIncrementTick+0x14c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3301      	adds	r3, #1
 800702e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007030:	4a4b      	ldr	r2, [pc, #300]	; (8007160 <xTaskIncrementTick+0x14c>)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d120      	bne.n	800707e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800703c:	4b49      	ldr	r3, [pc, #292]	; (8007164 <xTaskIncrementTick+0x150>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <xTaskIncrementTick+0x48>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	603b      	str	r3, [r7, #0]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <xTaskIncrementTick+0x46>
 800705c:	4b41      	ldr	r3, [pc, #260]	; (8007164 <xTaskIncrementTick+0x150>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	4b41      	ldr	r3, [pc, #260]	; (8007168 <xTaskIncrementTick+0x154>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a3f      	ldr	r2, [pc, #252]	; (8007164 <xTaskIncrementTick+0x150>)
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4a3f      	ldr	r2, [pc, #252]	; (8007168 <xTaskIncrementTick+0x154>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	4b3e      	ldr	r3, [pc, #248]	; (800716c <xTaskIncrementTick+0x158>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	4a3d      	ldr	r2, [pc, #244]	; (800716c <xTaskIncrementTick+0x158>)
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	f000 fad1 	bl	8007620 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800707e:	4b3c      	ldr	r3, [pc, #240]	; (8007170 <xTaskIncrementTick+0x15c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	429a      	cmp	r2, r3
 8007086:	d349      	bcc.n	800711c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007088:	4b36      	ldr	r3, [pc, #216]	; (8007164 <xTaskIncrementTick+0x150>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d104      	bne.n	800709c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007092:	4b37      	ldr	r3, [pc, #220]	; (8007170 <xTaskIncrementTick+0x15c>)
 8007094:	f04f 32ff 	mov.w	r2, #4294967295
 8007098:	601a      	str	r2, [r3, #0]
					break;
 800709a:	e03f      	b.n	800711c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709c:	4b31      	ldr	r3, [pc, #196]	; (8007164 <xTaskIncrementTick+0x150>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d203      	bcs.n	80070bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070b4:	4a2e      	ldr	r2, [pc, #184]	; (8007170 <xTaskIncrementTick+0x15c>)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070ba:	e02f      	b.n	800711c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3304      	adds	r3, #4
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe ff99 	bl	8005ff8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d004      	beq.n	80070d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	3318      	adds	r3, #24
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe ff90 	bl	8005ff8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070dc:	4b25      	ldr	r3, [pc, #148]	; (8007174 <xTaskIncrementTick+0x160>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d903      	bls.n	80070ec <xTaskIncrementTick+0xd8>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e8:	4a22      	ldr	r2, [pc, #136]	; (8007174 <xTaskIncrementTick+0x160>)
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4a1f      	ldr	r2, [pc, #124]	; (8007178 <xTaskIncrementTick+0x164>)
 80070fa:	441a      	add	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3304      	adds	r3, #4
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f7fe ff1b 	bl	8005f3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <xTaskIncrementTick+0x168>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	429a      	cmp	r2, r3
 8007114:	d3b8      	bcc.n	8007088 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800711a:	e7b5      	b.n	8007088 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800711c:	4b17      	ldr	r3, [pc, #92]	; (800717c <xTaskIncrementTick+0x168>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007122:	4915      	ldr	r1, [pc, #84]	; (8007178 <xTaskIncrementTick+0x164>)
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d901      	bls.n	8007138 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007138:	4b11      	ldr	r3, [pc, #68]	; (8007180 <xTaskIncrementTick+0x16c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007140:	2301      	movs	r3, #1
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	e004      	b.n	8007150 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007146:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <xTaskIncrementTick+0x170>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <xTaskIncrementTick+0x170>)
 800714e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007150:	697b      	ldr	r3, [r7, #20]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000ff8 	.word	0x20000ff8
 8007160:	20000fd4 	.word	0x20000fd4
 8007164:	20000f88 	.word	0x20000f88
 8007168:	20000f8c 	.word	0x20000f8c
 800716c:	20000fe8 	.word	0x20000fe8
 8007170:	20000ff0 	.word	0x20000ff0
 8007174:	20000fd8 	.word	0x20000fd8
 8007178:	20000b00 	.word	0x20000b00
 800717c:	20000afc 	.word	0x20000afc
 8007180:	20000fe4 	.word	0x20000fe4
 8007184:	20000fe0 	.word	0x20000fe0

08007188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800718e:	4b28      	ldr	r3, [pc, #160]	; (8007230 <vTaskSwitchContext+0xa8>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007196:	4b27      	ldr	r3, [pc, #156]	; (8007234 <vTaskSwitchContext+0xac>)
 8007198:	2201      	movs	r2, #1
 800719a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800719c:	e041      	b.n	8007222 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800719e:	4b25      	ldr	r3, [pc, #148]	; (8007234 <vTaskSwitchContext+0xac>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a4:	4b24      	ldr	r3, [pc, #144]	; (8007238 <vTaskSwitchContext+0xb0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	e010      	b.n	80071ce <vTaskSwitchContext+0x46>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	607b      	str	r3, [r7, #4]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vTaskSwitchContext+0x3e>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	491b      	ldr	r1, [pc, #108]	; (800723c <vTaskSwitchContext+0xb4>)
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d0e4      	beq.n	80071ac <vTaskSwitchContext+0x24>
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4a13      	ldr	r2, [pc, #76]	; (800723c <vTaskSwitchContext+0xb4>)
 80071ee:	4413      	add	r3, r2
 80071f0:	60bb      	str	r3, [r7, #8]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	605a      	str	r2, [r3, #4]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	3308      	adds	r3, #8
 8007204:	429a      	cmp	r2, r3
 8007206:	d104      	bne.n	8007212 <vTaskSwitchContext+0x8a>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	605a      	str	r2, [r3, #4]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <vTaskSwitchContext+0xb8>)
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	4a06      	ldr	r2, [pc, #24]	; (8007238 <vTaskSwitchContext+0xb0>)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6013      	str	r3, [r2, #0]
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000ff8 	.word	0x20000ff8
 8007234:	20000fe4 	.word	0x20000fe4
 8007238:	20000fd8 	.word	0x20000fd8
 800723c:	20000b00 	.word	0x20000b00
 8007240:	20000afc 	.word	0x20000afc

08007244 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10a      	bne.n	800726a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	60fb      	str	r3, [r7, #12]
}
 8007266:	bf00      	nop
 8007268:	e7fe      	b.n	8007268 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800726a:	4b07      	ldr	r3, [pc, #28]	; (8007288 <vTaskPlaceOnEventList+0x44>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3318      	adds	r3, #24
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fe fe87 	bl	8005f86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007278:	2101      	movs	r1, #1
 800727a:	6838      	ldr	r0, [r7, #0]
 800727c:	f000 fa7c 	bl	8007778 <prvAddCurrentTaskToDelayedList>
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000afc 	.word	0x20000afc

0800728c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	617b      	str	r3, [r7, #20]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3318      	adds	r3, #24
 80072ba:	4619      	mov	r1, r3
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7fe fe3e 	bl	8005f3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072c8:	f04f 33ff 	mov.w	r3, #4294967295
 80072cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	68b8      	ldr	r0, [r7, #8]
 80072d2:	f000 fa51 	bl	8007778 <prvAddCurrentTaskToDelayedList>
	}
 80072d6:	bf00      	nop
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000afc 	.word	0x20000afc

080072e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10a      	bne.n	8007310 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	60fb      	str	r3, [r7, #12]
}
 800730c:	bf00      	nop
 800730e:	e7fe      	b.n	800730e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3318      	adds	r3, #24
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fe6f 	bl	8005ff8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <xTaskRemoveFromEventList+0xb0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d11d      	bne.n	800735e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fe66 	bl	8005ff8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4b19      	ldr	r3, [pc, #100]	; (8007398 <xTaskRemoveFromEventList+0xb4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d903      	bls.n	8007340 <xTaskRemoveFromEventList+0x5c>
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <xTaskRemoveFromEventList+0xb4>)
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <xTaskRemoveFromEventList+0xb8>)
 800734e:	441a      	add	r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fe fdf1 	bl	8005f3e <vListInsertEnd>
 800735c:	e005      	b.n	800736a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	3318      	adds	r3, #24
 8007362:	4619      	mov	r1, r3
 8007364:	480e      	ldr	r0, [pc, #56]	; (80073a0 <xTaskRemoveFromEventList+0xbc>)
 8007366:	f7fe fdea 	bl	8005f3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <xTaskRemoveFromEventList+0xc0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	429a      	cmp	r2, r3
 8007376:	d905      	bls.n	8007384 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <xTaskRemoveFromEventList+0xc4>)
 800737e:	2201      	movs	r2, #1
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e001      	b.n	8007388 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007388:	697b      	ldr	r3, [r7, #20]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000ff8 	.word	0x20000ff8
 8007398:	20000fd8 	.word	0x20000fd8
 800739c:	20000b00 	.word	0x20000b00
 80073a0:	20000f90 	.word	0x20000f90
 80073a4:	20000afc 	.word	0x20000afc
 80073a8:	20000fe4 	.word	0x20000fe4

080073ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <vTaskInternalSetTimeOutState+0x24>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <vTaskInternalSetTimeOutState+0x28>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000fe8 	.word	0x20000fe8
 80073d4:	20000fd4 	.word	0x20000fd4

080073d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	60fb      	str	r3, [r7, #12]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800741a:	f000 fe7b 	bl	8008114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <xTaskCheckForTimeOut+0xbc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d102      	bne.n	800743e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e023      	b.n	8007486 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4b15      	ldr	r3, [pc, #84]	; (8007498 <xTaskCheckForTimeOut+0xc0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d007      	beq.n	800745a <xTaskCheckForTimeOut+0x82>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	429a      	cmp	r2, r3
 8007452:	d302      	bcc.n	800745a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007454:	2301      	movs	r3, #1
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e015      	b.n	8007486 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	429a      	cmp	r2, r3
 8007462:	d20b      	bcs.n	800747c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1ad2      	subs	r2, r2, r3
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7ff ff9b 	bl	80073ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e004      	b.n	8007486 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007482:	2301      	movs	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007486:	f000 fe75 	bl	8008174 <vPortExitCritical>

	return xReturn;
 800748a:	69fb      	ldr	r3, [r7, #28]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3720      	adds	r7, #32
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000fd4 	.word	0x20000fd4
 8007498:	20000fe8 	.word	0x20000fe8

0800749c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074a0:	4b03      	ldr	r3, [pc, #12]	; (80074b0 <vTaskMissedYield+0x14>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000fe4 	.word	0x20000fe4

080074b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074bc:	f000 f852 	bl	8007564 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074c0:	4b06      	ldr	r3, [pc, #24]	; (80074dc <prvIdleTask+0x28>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d9f9      	bls.n	80074bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <prvIdleTask+0x2c>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d8:	e7f0      	b.n	80074bc <prvIdleTask+0x8>
 80074da:	bf00      	nop
 80074dc:	20000b00 	.word	0x20000b00
 80074e0:	e000ed04 	.word	0xe000ed04

080074e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ea:	2300      	movs	r3, #0
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	e00c      	b.n	800750a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4a12      	ldr	r2, [pc, #72]	; (8007544 <prvInitialiseTaskLists+0x60>)
 80074fc:	4413      	add	r3, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fcf0 	bl	8005ee4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b37      	cmp	r3, #55	; 0x37
 800750e:	d9ef      	bls.n	80074f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007510:	480d      	ldr	r0, [pc, #52]	; (8007548 <prvInitialiseTaskLists+0x64>)
 8007512:	f7fe fce7 	bl	8005ee4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007516:	480d      	ldr	r0, [pc, #52]	; (800754c <prvInitialiseTaskLists+0x68>)
 8007518:	f7fe fce4 	bl	8005ee4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800751c:	480c      	ldr	r0, [pc, #48]	; (8007550 <prvInitialiseTaskLists+0x6c>)
 800751e:	f7fe fce1 	bl	8005ee4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007522:	480c      	ldr	r0, [pc, #48]	; (8007554 <prvInitialiseTaskLists+0x70>)
 8007524:	f7fe fcde 	bl	8005ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007528:	480b      	ldr	r0, [pc, #44]	; (8007558 <prvInitialiseTaskLists+0x74>)
 800752a:	f7fe fcdb 	bl	8005ee4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <prvInitialiseTaskLists+0x78>)
 8007530:	4a05      	ldr	r2, [pc, #20]	; (8007548 <prvInitialiseTaskLists+0x64>)
 8007532:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvInitialiseTaskLists+0x7c>)
 8007536:	4a05      	ldr	r2, [pc, #20]	; (800754c <prvInitialiseTaskLists+0x68>)
 8007538:	601a      	str	r2, [r3, #0]
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000b00 	.word	0x20000b00
 8007548:	20000f60 	.word	0x20000f60
 800754c:	20000f74 	.word	0x20000f74
 8007550:	20000f90 	.word	0x20000f90
 8007554:	20000fa4 	.word	0x20000fa4
 8007558:	20000fbc 	.word	0x20000fbc
 800755c:	20000f88 	.word	0x20000f88
 8007560:	20000f8c 	.word	0x20000f8c

08007564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800756a:	e019      	b.n	80075a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800756c:	f000 fdd2 	bl	8008114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007570:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <prvCheckTasksWaitingTermination+0x50>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fd3b 	bl	8005ff8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <prvCheckTasksWaitingTermination+0x54>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3b01      	subs	r3, #1
 8007588:	4a0b      	ldr	r2, [pc, #44]	; (80075b8 <prvCheckTasksWaitingTermination+0x54>)
 800758a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <prvCheckTasksWaitingTermination+0x58>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3b01      	subs	r3, #1
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <prvCheckTasksWaitingTermination+0x58>)
 8007594:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007596:	f000 fded 	bl	8008174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f810 	bl	80075c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075a0:	4b06      	ldr	r3, [pc, #24]	; (80075bc <prvCheckTasksWaitingTermination+0x58>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e1      	bne.n	800756c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000fa4 	.word	0x20000fa4
 80075b8:	20000fd0 	.word	0x20000fd0
 80075bc:	20000fb8 	.word	0x20000fb8

080075c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d108      	bne.n	80075e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 ff8a 	bl	80084f0 <vPortFree>
				vPortFree( pxTCB );
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 ff87 	bl	80084f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075e2:	e018      	b.n	8007616 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d103      	bne.n	80075f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 ff7e 	bl	80084f0 <vPortFree>
	}
 80075f4:	e00f      	b.n	8007616 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d00a      	beq.n	8007616 <prvDeleteTCB+0x56>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	60fb      	str	r3, [r7, #12]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <prvDeleteTCB+0x54>
	}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvResetNextTaskUnblockTime+0x38>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <prvResetNextTaskUnblockTime+0x3c>)
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007638:	e008      	b.n	800764c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <prvResetNextTaskUnblockTime+0x38>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a04      	ldr	r2, [pc, #16]	; (800765c <prvResetNextTaskUnblockTime+0x3c>)
 800764a:	6013      	str	r3, [r2, #0]
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	20000f88 	.word	0x20000f88
 800765c:	20000ff0 	.word	0x20000ff0

08007660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <xTaskGetSchedulerState+0x34>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800766e:	2301      	movs	r3, #1
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	e008      	b.n	8007686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007674:	4b08      	ldr	r3, [pc, #32]	; (8007698 <xTaskGetSchedulerState+0x38>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800767c:	2302      	movs	r3, #2
 800767e:	607b      	str	r3, [r7, #4]
 8007680:	e001      	b.n	8007686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007686:	687b      	ldr	r3, [r7, #4]
	}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000fdc 	.word	0x20000fdc
 8007698:	20000ff8 	.word	0x20000ff8

0800769c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d056      	beq.n	8007760 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076b2:	4b2e      	ldr	r3, [pc, #184]	; (800776c <xTaskPriorityDisinherit+0xd0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d00a      	beq.n	80076d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60bb      	str	r3, [r7, #8]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007702:	429a      	cmp	r2, r3
 8007704:	d02c      	beq.n	8007760 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	2b00      	cmp	r3, #0
 800770c:	d128      	bne.n	8007760 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fc70 	bl	8005ff8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007724:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <xTaskPriorityDisinherit+0xd4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d903      	bls.n	8007740 <xTaskPriorityDisinherit+0xa4>
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	4a0c      	ldr	r2, [pc, #48]	; (8007770 <xTaskPriorityDisinherit+0xd4>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a09      	ldr	r2, [pc, #36]	; (8007774 <xTaskPriorityDisinherit+0xd8>)
 800774e:	441a      	add	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fbf1 	bl	8005f3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800775c:	2301      	movs	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007760:	697b      	ldr	r3, [r7, #20]
	}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000afc 	.word	0x20000afc
 8007770:	20000fd8 	.word	0x20000fd8
 8007774:	20000b00 	.word	0x20000b00

08007778 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007782:	4b21      	ldr	r3, [pc, #132]	; (8007808 <prvAddCurrentTaskToDelayedList+0x90>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007788:	4b20      	ldr	r3, [pc, #128]	; (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fc32 	bl	8005ff8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	d10a      	bne.n	80077b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a2:	4b1a      	ldr	r3, [pc, #104]	; (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4819      	ldr	r0, [pc, #100]	; (8007810 <prvAddCurrentTaskToDelayedList+0x98>)
 80077ac:	f7fe fbc7 	bl	8005f3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077b0:	e026      	b.n	8007800 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077ba:	4b14      	ldr	r3, [pc, #80]	; (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d209      	bcs.n	80077de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ca:	4b12      	ldr	r3, [pc, #72]	; (8007814 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4b0f      	ldr	r3, [pc, #60]	; (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe fbd5 	bl	8005f86 <vListInsert>
}
 80077dc:	e010      	b.n	8007800 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b0a      	ldr	r3, [pc, #40]	; (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7fe fbcb 	bl	8005f86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d202      	bcs.n	8007800 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077fa:	4a08      	ldr	r2, [pc, #32]	; (800781c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000fd4 	.word	0x20000fd4
 800780c:	20000afc 	.word	0x20000afc
 8007810:	20000fbc 	.word	0x20000fbc
 8007814:	20000f8c 	.word	0x20000f8c
 8007818:	20000f88 	.word	0x20000f88
 800781c:	20000ff0 	.word	0x20000ff0

08007820 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800782a:	f000 fb07 	bl	8007e3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <xTimerCreateTimerTask+0x80>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d021      	beq.n	800787a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800783e:	1d3a      	adds	r2, r7, #4
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fb31 	bl	8005eb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	9202      	str	r2, [sp, #8]
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	2302      	movs	r3, #2
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	2300      	movs	r3, #0
 800785e:	460a      	mov	r2, r1
 8007860:	4910      	ldr	r1, [pc, #64]	; (80078a4 <xTimerCreateTimerTask+0x84>)
 8007862:	4811      	ldr	r0, [pc, #68]	; (80078a8 <xTimerCreateTimerTask+0x88>)
 8007864:	f7ff f8de 	bl	8006a24 <xTaskCreateStatic>
 8007868:	4603      	mov	r3, r0
 800786a:	4a10      	ldr	r2, [pc, #64]	; (80078ac <xTimerCreateTimerTask+0x8c>)
 800786c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800786e:	4b0f      	ldr	r3, [pc, #60]	; (80078ac <xTimerCreateTimerTask+0x8c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10a      	bne.n	8007896 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	e7fe      	b.n	8007894 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007896:	697b      	ldr	r3, [r7, #20]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	2000102c 	.word	0x2000102c
 80078a4:	08008ad8 	.word	0x08008ad8
 80078a8:	080079e5 	.word	0x080079e5
 80078ac:	20001030 	.word	0x20001030

080078b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078be:	2300      	movs	r3, #0
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <xTimerGenericCommand+0x2e>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	623b      	str	r3, [r7, #32]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <xTimerGenericCommand+0x98>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d02a      	beq.n	800793c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b05      	cmp	r3, #5
 80078f6:	dc18      	bgt.n	800792a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078f8:	f7ff feb2 	bl	8007660 <xTaskGetSchedulerState>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d109      	bne.n	8007916 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <xTimerGenericCommand+0x98>)
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f107 0110 	add.w	r1, r7, #16
 800790a:	2300      	movs	r3, #0
 800790c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790e:	f7fe fca1 	bl	8006254 <xQueueGenericSend>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24
 8007914:	e012      	b.n	800793c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <xTimerGenericCommand+0x98>)
 8007918:	6818      	ldr	r0, [r3, #0]
 800791a:	f107 0110 	add.w	r1, r7, #16
 800791e:	2300      	movs	r3, #0
 8007920:	2200      	movs	r2, #0
 8007922:	f7fe fc97 	bl	8006254 <xQueueGenericSend>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24
 8007928:	e008      	b.n	800793c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800792a:	4b07      	ldr	r3, [pc, #28]	; (8007948 <xTimerGenericCommand+0x98>)
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f107 0110 	add.w	r1, r7, #16
 8007932:	2300      	movs	r3, #0
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	f7fe fd8b 	bl	8006450 <xQueueGenericSendFromISR>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800793e:	4618      	mov	r0, r3
 8007940:	3728      	adds	r7, #40	; 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	2000102c 	.word	0x2000102c

0800794c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007956:	4b22      	ldr	r3, [pc, #136]	; (80079e0 <prvProcessExpiredTimer+0x94>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	3304      	adds	r3, #4
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fb47 	bl	8005ff8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d022      	beq.n	80079be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	18d1      	adds	r1, r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	6978      	ldr	r0, [r7, #20]
 8007986:	f000 f8d1 	bl	8007b2c <prvInsertTimerInActiveList>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01f      	beq.n	80079d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007990:	2300      	movs	r3, #0
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	2300      	movs	r3, #0
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	2100      	movs	r1, #0
 800799a:	6978      	ldr	r0, [r7, #20]
 800799c:	f7ff ff88 	bl	80078b0 <xTimerGenericCommand>
 80079a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d113      	bne.n	80079d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	60fb      	str	r3, [r7, #12]
}
 80079ba:	bf00      	nop
 80079bc:	e7fe      	b.n	80079bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	6978      	ldr	r0, [r7, #20]
 80079d6:	4798      	blx	r3
}
 80079d8:	bf00      	nop
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20001024 	.word	0x20001024

080079e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079ec:	f107 0308 	add.w	r3, r7, #8
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f857 	bl	8007aa4 <prvGetNextExpireTime>
 80079f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4619      	mov	r1, r3
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f803 	bl	8007a08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a02:	f000 f8d5 	bl	8007bb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a06:	e7f1      	b.n	80079ec <prvTimerTask+0x8>

08007a08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a12:	f7ff fa43 	bl	8006e9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a16:	f107 0308 	add.w	r3, r7, #8
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 f866 	bl	8007aec <prvSampleTimeNow>
 8007a20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d130      	bne.n	8007a8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <prvProcessTimerOrBlockTask+0x3c>
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d806      	bhi.n	8007a44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a36:	f7ff fa3f 	bl	8006eb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7ff ff85 	bl	800794c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a42:	e024      	b.n	8007a8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a4a:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <prvProcessTimerOrBlockTask+0x90>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <prvProcessTimerOrBlockTask+0x50>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <prvProcessTimerOrBlockTask+0x52>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <prvProcessTimerOrBlockTask+0x94>)
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f7fe ffa7 	bl	80069bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a6e:	f7ff fa23 	bl	8006eb8 <xTaskResumeAll>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10a      	bne.n	8007a8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a78:	4b09      	ldr	r3, [pc, #36]	; (8007aa0 <prvProcessTimerOrBlockTask+0x98>)
 8007a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	f3bf 8f6f 	isb	sy
}
 8007a88:	e001      	b.n	8007a8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a8a:	f7ff fa15 	bl	8006eb8 <xTaskResumeAll>
}
 8007a8e:	bf00      	nop
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	20001028 	.word	0x20001028
 8007a9c:	2000102c 	.word	0x2000102c
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <prvGetNextExpireTime+0x44>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <prvGetNextExpireTime+0x16>
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	e000      	b.n	8007abc <prvGetNextExpireTime+0x18>
 8007aba:	2200      	movs	r2, #0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ac8:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <prvGetNextExpireTime+0x44>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	e001      	b.n	8007ad8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	20001024 	.word	0x20001024

08007aec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007af4:	f7ff fa7e 	bl	8006ff4 <xTaskGetTickCount>
 8007af8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <prvSampleTimeNow+0x3c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d205      	bcs.n	8007b10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b04:	f000 f936 	bl	8007d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	e002      	b.n	8007b16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b16:	4a04      	ldr	r2, [pc, #16]	; (8007b28 <prvSampleTimeNow+0x3c>)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20001034 	.word	0x20001034

08007b2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d812      	bhi.n	8007b78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d302      	bcc.n	8007b66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e01b      	b.n	8007b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b66:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <prvInsertTimerInActiveList+0x7c>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4610      	mov	r0, r2
 8007b72:	f7fe fa08 	bl	8005f86 <vListInsert>
 8007b76:	e012      	b.n	8007b9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d206      	bcs.n	8007b8e <prvInsertTimerInActiveList+0x62>
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d302      	bcc.n	8007b8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e007      	b.n	8007b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <prvInsertTimerInActiveList+0x80>)
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3304      	adds	r3, #4
 8007b96:	4619      	mov	r1, r3
 8007b98:	4610      	mov	r0, r2
 8007b9a:	f7fe f9f4 	bl	8005f86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b9e:	697b      	ldr	r3, [r7, #20]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20001028 	.word	0x20001028
 8007bac:	20001024 	.word	0x20001024

08007bb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08e      	sub	sp, #56	; 0x38
 8007bb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bb6:	e0ca      	b.n	8007d4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da18      	bge.n	8007bf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bbe:	1d3b      	adds	r3, r7, #4
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	61fb      	str	r3, [r7, #28]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007be6:	6850      	ldr	r0, [r2, #4]
 8007be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bea:	6892      	ldr	r2, [r2, #8]
 8007bec:	4611      	mov	r1, r2
 8007bee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f2c0 80aa 	blt.w	8007d4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	3304      	adds	r3, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe f9f5 	bl	8005ff8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c0e:	463b      	mov	r3, r7
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff ff6b 	bl	8007aec <prvSampleTimeNow>
 8007c16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b09      	cmp	r3, #9
 8007c1c:	f200 8097 	bhi.w	8007d4e <prvProcessReceivedCommands+0x19e>
 8007c20:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <prvProcessReceivedCommands+0x78>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c51 	.word	0x08007c51
 8007c34:	08007cc5 	.word	0x08007cc5
 8007c38:	08007cd9 	.word	0x08007cd9
 8007c3c:	08007d23 	.word	0x08007d23
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c51 	.word	0x08007c51
 8007c48:	08007cc5 	.word	0x08007cc5
 8007c4c:	08007cd9 	.word	0x08007cd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	b2da      	uxtb	r2, r3
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	18d1      	adds	r1, r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f7ff ff5c 	bl	8007b2c <prvInsertTimerInActiveList>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d069      	beq.n	8007d4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d05e      	beq.n	8007d4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	441a      	add	r2, r3
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca2:	f7ff fe05 	bl	80078b0 <xTimerGenericCommand>
 8007ca6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d14f      	bne.n	8007d4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	61bb      	str	r3, [r7, #24]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cd6:	e03a      	b.n	8007d4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	617b      	str	r3, [r7, #20]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	18d1      	adds	r1, r2, r3
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1c:	f7ff ff06 	bl	8007b2c <prvInsertTimerInActiveList>
					break;
 8007d20:	e015      	b.n	8007d4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d103      	bne.n	8007d38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d32:	f000 fbdd 	bl	80084f0 <vPortFree>
 8007d36:	e00a      	b.n	8007d4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d3e:	f023 0301 	bic.w	r3, r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d4a:	e000      	b.n	8007d4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <prvProcessReceivedCommands+0x1c0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	1d39      	adds	r1, r7, #4
 8007d54:	2200      	movs	r2, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fc16 	bl	8006588 <xQueueReceive>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f47f af2a 	bne.w	8007bb8 <prvProcessReceivedCommands+0x8>
	}
}
 8007d64:	bf00      	nop
 8007d66:	bf00      	nop
 8007d68:	3730      	adds	r7, #48	; 0x30
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000102c 	.word	0x2000102c

08007d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d7a:	e048      	b.n	8007e0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d7c:	4b2d      	ldr	r3, [pc, #180]	; (8007e34 <prvSwitchTimerLists+0xc0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d86:	4b2b      	ldr	r3, [pc, #172]	; (8007e34 <prvSwitchTimerLists+0xc0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe f92f 	bl	8005ff8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02e      	beq.n	8007e0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4413      	add	r3, r2
 8007db8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d90e      	bls.n	8007de0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dce:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <prvSwitchTimerLists+0xc0>)
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f7fe f8d4 	bl	8005f86 <vListInsert>
 8007dde:	e016      	b.n	8007e0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007de0:	2300      	movs	r3, #0
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	2300      	movs	r3, #0
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	2100      	movs	r1, #0
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7ff fd60 	bl	80078b0 <xTimerGenericCommand>
 8007df0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	603b      	str	r3, [r7, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <prvSwitchTimerLists+0xc0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1b1      	bne.n	8007d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <prvSwitchTimerLists+0xc0>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <prvSwitchTimerLists+0xc4>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <prvSwitchTimerLists+0xc0>)
 8007e24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e26:	4a04      	ldr	r2, [pc, #16]	; (8007e38 <prvSwitchTimerLists+0xc4>)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	6013      	str	r3, [r2, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20001024 	.word	0x20001024
 8007e38:	20001028 	.word	0x20001028

08007e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e42:	f000 f967 	bl	8008114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d120      	bne.n	8007e90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e4e:	4814      	ldr	r0, [pc, #80]	; (8007ea0 <prvCheckForValidListAndQueue+0x64>)
 8007e50:	f7fe f848 	bl	8005ee4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e54:	4813      	ldr	r0, [pc, #76]	; (8007ea4 <prvCheckForValidListAndQueue+0x68>)
 8007e56:	f7fe f845 	bl	8005ee4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e5a:	4b13      	ldr	r3, [pc, #76]	; (8007ea8 <prvCheckForValidListAndQueue+0x6c>)
 8007e5c:	4a10      	ldr	r2, [pc, #64]	; (8007ea0 <prvCheckForValidListAndQueue+0x64>)
 8007e5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e60:	4b12      	ldr	r3, [pc, #72]	; (8007eac <prvCheckForValidListAndQueue+0x70>)
 8007e62:	4a10      	ldr	r2, [pc, #64]	; (8007ea4 <prvCheckForValidListAndQueue+0x68>)
 8007e64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e66:	2300      	movs	r3, #0
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <prvCheckForValidListAndQueue+0x74>)
 8007e6c:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <prvCheckForValidListAndQueue+0x78>)
 8007e6e:	2110      	movs	r1, #16
 8007e70:	200a      	movs	r0, #10
 8007e72:	f7fe f953 	bl	800611c <xQueueGenericCreateStatic>
 8007e76:	4603      	mov	r3, r0
 8007e78:	4a08      	ldr	r2, [pc, #32]	; (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e7c:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e84:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <prvCheckForValidListAndQueue+0x60>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	490b      	ldr	r1, [pc, #44]	; (8007eb8 <prvCheckForValidListAndQueue+0x7c>)
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fe fd6c 	bl	8006968 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e90:	f000 f970 	bl	8008174 <vPortExitCritical>
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	2000102c 	.word	0x2000102c
 8007ea0:	20000ffc 	.word	0x20000ffc
 8007ea4:	20001010 	.word	0x20001010
 8007ea8:	20001024 	.word	0x20001024
 8007eac:	20001028 	.word	0x20001028
 8007eb0:	200010d8 	.word	0x200010d8
 8007eb4:	20001038 	.word	0x20001038
 8007eb8:	08008ae0 	.word	0x08008ae0

08007ebc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3b04      	subs	r3, #4
 8007ecc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3b04      	subs	r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f023 0201 	bic.w	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007eec:	4a0c      	ldr	r2, [pc, #48]	; (8007f20 <pxPortInitialiseStack+0x64>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3b14      	subs	r3, #20
 8007ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3b04      	subs	r3, #4
 8007f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f06f 0202 	mvn.w	r2, #2
 8007f0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3b20      	subs	r3, #32
 8007f10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f12:	68fb      	ldr	r3, [r7, #12]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	08007f25 	.word	0x08007f25

08007f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvTaskExitError+0x54>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d00a      	beq.n	8007f4e <prvTaskExitError+0x2a>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <prvTaskExitError+0x28>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60bb      	str	r3, [r7, #8]
}
 8007f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f62:	bf00      	nop
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0fc      	beq.n	8007f64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	20000008 	.word	0x20000008
 8007f7c:	00000000 	.word	0x00000000

08007f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <pxCurrentTCBConst2>)
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	6808      	ldr	r0, [r1, #0]
 8007f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f380 8809 	msr	PSP, r0
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8811 	msr	BASEPRI, r0
 8007f9a:	4770      	bx	lr
 8007f9c:	f3af 8000 	nop.w

08007fa0 <pxCurrentTCBConst2>:
 8007fa0:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fa8:	4808      	ldr	r0, [pc, #32]	; (8007fcc <prvPortStartFirstTask+0x24>)
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	6800      	ldr	r0, [r0, #0]
 8007fae:	f380 8808 	msr	MSP, r0
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8814 	msr	CONTROL, r0
 8007fba:	b662      	cpsie	i
 8007fbc:	b661      	cpsie	f
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	df00      	svc	0
 8007fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fca:	bf00      	nop
 8007fcc:	e000ed08 	.word	0xe000ed08

08007fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fd6:	4b46      	ldr	r3, [pc, #280]	; (80080f0 <xPortStartScheduler+0x120>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a46      	ldr	r2, [pc, #280]	; (80080f4 <xPortStartScheduler+0x124>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10a      	bne.n	8007ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	613b      	str	r3, [r7, #16]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ff6:	4b3e      	ldr	r3, [pc, #248]	; (80080f0 <xPortStartScheduler+0x120>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a3f      	ldr	r2, [pc, #252]	; (80080f8 <xPortStartScheduler+0x128>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10a      	bne.n	8008016 <xPortStartScheduler+0x46>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	60fb      	str	r3, [r7, #12]
}
 8008012:	bf00      	nop
 8008014:	e7fe      	b.n	8008014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008016:	4b39      	ldr	r3, [pc, #228]	; (80080fc <xPortStartScheduler+0x12c>)
 8008018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	22ff      	movs	r2, #255	; 0xff
 8008026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4b31      	ldr	r3, [pc, #196]	; (8008100 <xPortStartScheduler+0x130>)
 800803c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800803e:	4b31      	ldr	r3, [pc, #196]	; (8008104 <xPortStartScheduler+0x134>)
 8008040:	2207      	movs	r2, #7
 8008042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008044:	e009      	b.n	800805a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008046:	4b2f      	ldr	r3, [pc, #188]	; (8008104 <xPortStartScheduler+0x134>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3b01      	subs	r3, #1
 800804c:	4a2d      	ldr	r2, [pc, #180]	; (8008104 <xPortStartScheduler+0x134>)
 800804e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d0ef      	beq.n	8008046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008066:	4b27      	ldr	r3, [pc, #156]	; (8008104 <xPortStartScheduler+0x134>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1c3 0307 	rsb	r3, r3, #7
 800806e:	2b04      	cmp	r3, #4
 8008070:	d00a      	beq.n	8008088 <xPortStartScheduler+0xb8>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	60bb      	str	r3, [r7, #8]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008088:	4b1e      	ldr	r3, [pc, #120]	; (8008104 <xPortStartScheduler+0x134>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <xPortStartScheduler+0x134>)
 8008090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <xPortStartScheduler+0x134>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800809a:	4a1a      	ldr	r2, [pc, #104]	; (8008104 <xPortStartScheduler+0x134>)
 800809c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080a6:	4b18      	ldr	r3, [pc, #96]	; (8008108 <xPortStartScheduler+0x138>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a17      	ldr	r2, [pc, #92]	; (8008108 <xPortStartScheduler+0x138>)
 80080ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <xPortStartScheduler+0x138>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a14      	ldr	r2, [pc, #80]	; (8008108 <xPortStartScheduler+0x138>)
 80080b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080be:	f000 f8dd 	bl	800827c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080c2:	4b12      	ldr	r3, [pc, #72]	; (800810c <xPortStartScheduler+0x13c>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080c8:	f000 f8fc 	bl	80082c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080cc:	4b10      	ldr	r3, [pc, #64]	; (8008110 <xPortStartScheduler+0x140>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0f      	ldr	r2, [pc, #60]	; (8008110 <xPortStartScheduler+0x140>)
 80080d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080d8:	f7ff ff66 	bl	8007fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080dc:	f7ff f854 	bl	8007188 <vTaskSwitchContext>
	prvTaskExitError();
 80080e0:	f7ff ff20 	bl	8007f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	e000ed00 	.word	0xe000ed00
 80080f4:	410fc271 	.word	0x410fc271
 80080f8:	410fc270 	.word	0x410fc270
 80080fc:	e000e400 	.word	0xe000e400
 8008100:	20001128 	.word	0x20001128
 8008104:	2000112c 	.word	0x2000112c
 8008108:	e000ed20 	.word	0xe000ed20
 800810c:	20000008 	.word	0x20000008
 8008110:	e000ef34 	.word	0xe000ef34

08008114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800812e:	4b0f      	ldr	r3, [pc, #60]	; (800816c <vPortEnterCritical+0x58>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3301      	adds	r3, #1
 8008134:	4a0d      	ldr	r2, [pc, #52]	; (800816c <vPortEnterCritical+0x58>)
 8008136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <vPortEnterCritical+0x58>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d10f      	bne.n	8008160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008140:	4b0b      	ldr	r3, [pc, #44]	; (8008170 <vPortEnterCritical+0x5c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <vPortEnterCritical+0x4c>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	603b      	str	r3, [r7, #0]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <vPortEnterCritical+0x4a>
	}
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	20000008 	.word	0x20000008
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800817a:	4b12      	ldr	r3, [pc, #72]	; (80081c4 <vPortExitCritical+0x50>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10a      	bne.n	8008198 <vPortExitCritical+0x24>
	__asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	607b      	str	r3, [r7, #4]
}
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <vPortExitCritical+0x50>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3b01      	subs	r3, #1
 800819e:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <vPortExitCritical+0x50>)
 80081a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081a2:	4b08      	ldr	r3, [pc, #32]	; (80081c4 <vPortExitCritical+0x50>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <vPortExitCritical+0x42>
 80081aa:	2300      	movs	r3, #0
 80081ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	f383 8811 	msr	BASEPRI, r3
}
 80081b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20000008 	.word	0x20000008
	...

080081d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081d0:	f3ef 8009 	mrs	r0, PSP
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4b15      	ldr	r3, [pc, #84]	; (8008230 <pxCurrentTCBConst>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	f01e 0f10 	tst.w	lr, #16
 80081e0:	bf08      	it	eq
 80081e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081f4:	f380 8811 	msr	BASEPRI, r0
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f7fe ffc2 	bl	8007188 <vTaskSwitchContext>
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f380 8811 	msr	BASEPRI, r0
 800820c:	bc09      	pop	{r0, r3}
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	6808      	ldr	r0, [r1, #0]
 8008212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008216:	f01e 0f10 	tst.w	lr, #16
 800821a:	bf08      	it	eq
 800821c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008220:	f380 8809 	msr	PSP, r0
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst>:
 8008230:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	607b      	str	r3, [r7, #4]
}
 8008250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008252:	f7fe fedf 	bl	8007014 <xTaskIncrementTick>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800825c:	4b06      	ldr	r3, [pc, #24]	; (8008278 <xPortSysTickHandler+0x40>)
 800825e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008262:	601a      	str	r2, [r3, #0]
 8008264:	2300      	movs	r3, #0
 8008266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	f383 8811 	msr	BASEPRI, r3
}
 800826e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800827c:	b480      	push	{r7}
 800827e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008280:	4b0b      	ldr	r3, [pc, #44]	; (80082b0 <vPortSetupTimerInterrupt+0x34>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008286:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <vPortSetupTimerInterrupt+0x38>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <vPortSetupTimerInterrupt+0x3c>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a0a      	ldr	r2, [pc, #40]	; (80082bc <vPortSetupTimerInterrupt+0x40>)
 8008292:	fba2 2303 	umull	r2, r3, r2, r3
 8008296:	099b      	lsrs	r3, r3, #6
 8008298:	4a09      	ldr	r2, [pc, #36]	; (80082c0 <vPortSetupTimerInterrupt+0x44>)
 800829a:	3b01      	subs	r3, #1
 800829c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800829e:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <vPortSetupTimerInterrupt+0x34>)
 80082a0:	2207      	movs	r2, #7
 80082a2:	601a      	str	r2, [r3, #0]
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	e000e010 	.word	0xe000e010
 80082b4:	e000e018 	.word	0xe000e018
 80082b8:	20000000 	.word	0x20000000
 80082bc:	10624dd3 	.word	0x10624dd3
 80082c0:	e000e014 	.word	0xe000e014

080082c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082d4 <vPortEnableVFP+0x10>
 80082c8:	6801      	ldr	r1, [r0, #0]
 80082ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ce:	6001      	str	r1, [r0, #0]
 80082d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082d2:	bf00      	nop
 80082d4:	e000ed88 	.word	0xe000ed88

080082d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082de:	f3ef 8305 	mrs	r3, IPSR
 80082e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d914      	bls.n	8008314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ea:	4a17      	ldr	r2, [pc, #92]	; (8008348 <vPortValidateInterruptPriority+0x70>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082f4:	4b15      	ldr	r3, [pc, #84]	; (800834c <vPortValidateInterruptPriority+0x74>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	7afa      	ldrb	r2, [r7, #11]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d20a      	bcs.n	8008314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	607b      	str	r3, [r7, #4]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008314:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <vPortValidateInterruptPriority+0x78>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800831c:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <vPortValidateInterruptPriority+0x7c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d90a      	bls.n	800833a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	603b      	str	r3, [r7, #0]
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <vPortValidateInterruptPriority+0x60>
	}
 800833a:	bf00      	nop
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	e000e3f0 	.word	0xe000e3f0
 800834c:	20001128 	.word	0x20001128
 8008350:	e000ed0c 	.word	0xe000ed0c
 8008354:	2000112c 	.word	0x2000112c

08008358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008364:	f7fe fd9a 	bl	8006e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008368:	4b5b      	ldr	r3, [pc, #364]	; (80084d8 <pvPortMalloc+0x180>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008370:	f000 f920 	bl	80085b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008374:	4b59      	ldr	r3, [pc, #356]	; (80084dc <pvPortMalloc+0x184>)
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4013      	ands	r3, r2
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 8093 	bne.w	80084a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01d      	beq.n	80083c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008388:	2208      	movs	r2, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b00      	cmp	r3, #0
 8008398:	d014      	beq.n	80083c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f023 0307 	bic.w	r3, r3, #7
 80083a0:	3308      	adds	r3, #8
 80083a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <pvPortMalloc+0x6c>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	617b      	str	r3, [r7, #20]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d06e      	beq.n	80084a8 <pvPortMalloc+0x150>
 80083ca:	4b45      	ldr	r3, [pc, #276]	; (80084e0 <pvPortMalloc+0x188>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d869      	bhi.n	80084a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083d4:	4b43      	ldr	r3, [pc, #268]	; (80084e4 <pvPortMalloc+0x18c>)
 80083d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083d8:	4b42      	ldr	r3, [pc, #264]	; (80084e4 <pvPortMalloc+0x18c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083de:	e004      	b.n	80083ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d903      	bls.n	80083fc <pvPortMalloc+0xa4>
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f1      	bne.n	80083e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083fc:	4b36      	ldr	r3, [pc, #216]	; (80084d8 <pvPortMalloc+0x180>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008402:	429a      	cmp	r2, r3
 8008404:	d050      	beq.n	80084a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2208      	movs	r2, #8
 800840c:	4413      	add	r3, r2
 800840e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	2308      	movs	r3, #8
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	429a      	cmp	r2, r3
 8008426:	d91f      	bls.n	8008468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <pvPortMalloc+0xf8>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	613b      	str	r3, [r7, #16]
}
 800844c:	bf00      	nop
 800844e:	e7fe      	b.n	800844e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008462:	69b8      	ldr	r0, [r7, #24]
 8008464:	f000 f908 	bl	8008678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <pvPortMalloc+0x188>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	4a1b      	ldr	r2, [pc, #108]	; (80084e0 <pvPortMalloc+0x188>)
 8008474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008476:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <pvPortMalloc+0x188>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <pvPortMalloc+0x190>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d203      	bcs.n	800848a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008482:	4b17      	ldr	r3, [pc, #92]	; (80084e0 <pvPortMalloc+0x188>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <pvPortMalloc+0x190>)
 8008488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	4b13      	ldr	r3, [pc, #76]	; (80084dc <pvPortMalloc+0x184>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	431a      	orrs	r2, r3
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	2200      	movs	r2, #0
 800849c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800849e:	4b13      	ldr	r3, [pc, #76]	; (80084ec <pvPortMalloc+0x194>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4a11      	ldr	r2, [pc, #68]	; (80084ec <pvPortMalloc+0x194>)
 80084a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084a8:	f7fe fd06 	bl	8006eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <pvPortMalloc+0x174>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <pvPortMalloc+0x172>
	return pvReturn;
 80084cc:	69fb      	ldr	r3, [r7, #28]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3728      	adds	r7, #40	; 0x28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20004d38 	.word	0x20004d38
 80084dc:	20004d4c 	.word	0x20004d4c
 80084e0:	20004d3c 	.word	0x20004d3c
 80084e4:	20004d30 	.word	0x20004d30
 80084e8:	20004d40 	.word	0x20004d40
 80084ec:	20004d44 	.word	0x20004d44

080084f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d04d      	beq.n	800859e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008502:	2308      	movs	r3, #8
 8008504:	425b      	negs	r3, r3
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4413      	add	r3, r2
 800850a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <vPortFree+0xb8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4013      	ands	r3, r2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <vPortFree+0x44>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <vPortFree+0x62>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	60bb      	str	r3, [r7, #8]
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <vPortFree+0xb8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4013      	ands	r3, r2
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01e      	beq.n	800859e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d11a      	bne.n	800859e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <vPortFree+0xb8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	43db      	mvns	r3, r3
 8008572:	401a      	ands	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008578:	f7fe fc90 	bl	8006e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	4b0a      	ldr	r3, [pc, #40]	; (80085ac <vPortFree+0xbc>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4413      	add	r3, r2
 8008586:	4a09      	ldr	r2, [pc, #36]	; (80085ac <vPortFree+0xbc>)
 8008588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f000 f874 	bl	8008678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <vPortFree+0xc0>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a06      	ldr	r2, [pc, #24]	; (80085b0 <vPortFree+0xc0>)
 8008598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800859a:	f7fe fc8d 	bl	8006eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800859e:	bf00      	nop
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20004d4c 	.word	0x20004d4c
 80085ac:	20004d3c 	.word	0x20004d3c
 80085b0:	20004d48 	.word	0x20004d48

080085b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085c0:	4b27      	ldr	r3, [pc, #156]	; (8008660 <prvHeapInit+0xac>)
 80085c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3307      	adds	r3, #7
 80085d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	4a1f      	ldr	r2, [pc, #124]	; (8008660 <prvHeapInit+0xac>)
 80085e4:	4413      	add	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085ec:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <prvHeapInit+0xb0>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085f2:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <prvHeapInit+0xb0>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	4413      	add	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008600:	2208      	movs	r2, #8
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0307 	bic.w	r3, r3, #7
 800860e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a15      	ldr	r2, [pc, #84]	; (8008668 <prvHeapInit+0xb4>)
 8008614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <prvHeapInit+0xb4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800861e:	4b12      	ldr	r3, [pc, #72]	; (8008668 <prvHeapInit+0xb4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvHeapInit+0xb4>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4a0a      	ldr	r2, [pc, #40]	; (800866c <prvHeapInit+0xb8>)
 8008642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	4a09      	ldr	r2, [pc, #36]	; (8008670 <prvHeapInit+0xbc>)
 800864a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <prvHeapInit+0xc0>)
 800864e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008652:	601a      	str	r2, [r3, #0]
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20001130 	.word	0x20001130
 8008664:	20004d30 	.word	0x20004d30
 8008668:	20004d38 	.word	0x20004d38
 800866c:	20004d40 	.word	0x20004d40
 8008670:	20004d3c 	.word	0x20004d3c
 8008674:	20004d4c 	.word	0x20004d4c

08008678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <prvInsertBlockIntoFreeList+0xac>)
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e002      	b.n	800868c <prvInsertBlockIntoFreeList+0x14>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d8f7      	bhi.n	8008686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d108      	bne.n	80086ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	441a      	add	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d118      	bne.n	8008700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b15      	ldr	r3, [pc, #84]	; (8008728 <prvInsertBlockIntoFreeList+0xb0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d00d      	beq.n	80086f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e008      	b.n	8008708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <prvInsertBlockIntoFreeList+0xb0>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e003      	b.n	8008708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	d002      	beq.n	8008716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20004d30 	.word	0x20004d30
 8008728:	20004d38 	.word	0x20004d38

0800872c <_ZdlPvj>:
 800872c:	f000 b811 	b.w	8008752 <_ZdlPv>

08008730 <_Znwj>:
 8008730:	2801      	cmp	r0, #1
 8008732:	bf38      	it	cc
 8008734:	2001      	movcc	r0, #1
 8008736:	b510      	push	{r4, lr}
 8008738:	4604      	mov	r4, r0
 800873a:	4620      	mov	r0, r4
 800873c:	f000 f846 	bl	80087cc <malloc>
 8008740:	b930      	cbnz	r0, 8008750 <_Znwj+0x20>
 8008742:	f000 f809 	bl	8008758 <_ZSt15get_new_handlerv>
 8008746:	b908      	cbnz	r0, 800874c <_Znwj+0x1c>
 8008748:	f000 f80e 	bl	8008768 <abort>
 800874c:	4780      	blx	r0
 800874e:	e7f4      	b.n	800873a <_Znwj+0xa>
 8008750:	bd10      	pop	{r4, pc}

08008752 <_ZdlPv>:
 8008752:	f000 b843 	b.w	80087dc <free>
	...

08008758 <_ZSt15get_new_handlerv>:
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <_ZSt15get_new_handlerv+0xc>)
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	f3bf 8f5b 	dmb	ish
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	20004d50 	.word	0x20004d50

08008768 <abort>:
 8008768:	b508      	push	{r3, lr}
 800876a:	2006      	movs	r0, #6
 800876c:	f000 f96c 	bl	8008a48 <raise>
 8008770:	2001      	movs	r0, #1
 8008772:	f7f9 faef 	bl	8001d54 <_exit>
	...

08008778 <__errno>:
 8008778:	4b01      	ldr	r3, [pc, #4]	; (8008780 <__errno+0x8>)
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	2000000c 	.word	0x2000000c

08008784 <__libc_init_array>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	4d0d      	ldr	r5, [pc, #52]	; (80087bc <__libc_init_array+0x38>)
 8008788:	4c0d      	ldr	r4, [pc, #52]	; (80087c0 <__libc_init_array+0x3c>)
 800878a:	1b64      	subs	r4, r4, r5
 800878c:	10a4      	asrs	r4, r4, #2
 800878e:	2600      	movs	r6, #0
 8008790:	42a6      	cmp	r6, r4
 8008792:	d109      	bne.n	80087a8 <__libc_init_array+0x24>
 8008794:	4d0b      	ldr	r5, [pc, #44]	; (80087c4 <__libc_init_array+0x40>)
 8008796:	4c0c      	ldr	r4, [pc, #48]	; (80087c8 <__libc_init_array+0x44>)
 8008798:	f000 f980 	bl	8008a9c <_init>
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	10a4      	asrs	r4, r4, #2
 80087a0:	2600      	movs	r6, #0
 80087a2:	42a6      	cmp	r6, r4
 80087a4:	d105      	bne.n	80087b2 <__libc_init_array+0x2e>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ac:	4798      	blx	r3
 80087ae:	3601      	adds	r6, #1
 80087b0:	e7ee      	b.n	8008790 <__libc_init_array+0xc>
 80087b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b6:	4798      	blx	r3
 80087b8:	3601      	adds	r6, #1
 80087ba:	e7f2      	b.n	80087a2 <__libc_init_array+0x1e>
 80087bc:	08008b50 	.word	0x08008b50
 80087c0:	08008b50 	.word	0x08008b50
 80087c4:	08008b50 	.word	0x08008b50
 80087c8:	08008b58 	.word	0x08008b58

080087cc <malloc>:
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <malloc+0xc>)
 80087ce:	4601      	mov	r1, r0
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	f000 b88d 	b.w	80088f0 <_malloc_r>
 80087d6:	bf00      	nop
 80087d8:	2000000c 	.word	0x2000000c

080087dc <free>:
 80087dc:	4b02      	ldr	r3, [pc, #8]	; (80087e8 <free+0xc>)
 80087de:	4601      	mov	r1, r0
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	f000 b819 	b.w	8008818 <_free_r>
 80087e6:	bf00      	nop
 80087e8:	2000000c 	.word	0x2000000c

080087ec <memcpy>:
 80087ec:	440a      	add	r2, r1
 80087ee:	4291      	cmp	r1, r2
 80087f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087f4:	d100      	bne.n	80087f8 <memcpy+0xc>
 80087f6:	4770      	bx	lr
 80087f8:	b510      	push	{r4, lr}
 80087fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008802:	4291      	cmp	r1, r2
 8008804:	d1f9      	bne.n	80087fa <memcpy+0xe>
 8008806:	bd10      	pop	{r4, pc}

08008808 <memset>:
 8008808:	4402      	add	r2, r0
 800880a:	4603      	mov	r3, r0
 800880c:	4293      	cmp	r3, r2
 800880e:	d100      	bne.n	8008812 <memset+0xa>
 8008810:	4770      	bx	lr
 8008812:	f803 1b01 	strb.w	r1, [r3], #1
 8008816:	e7f9      	b.n	800880c <memset+0x4>

08008818 <_free_r>:
 8008818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800881a:	2900      	cmp	r1, #0
 800881c:	d044      	beq.n	80088a8 <_free_r+0x90>
 800881e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008822:	9001      	str	r0, [sp, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f1a1 0404 	sub.w	r4, r1, #4
 800882a:	bfb8      	it	lt
 800882c:	18e4      	addlt	r4, r4, r3
 800882e:	f000 f927 	bl	8008a80 <__malloc_lock>
 8008832:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <_free_r+0x94>)
 8008834:	9801      	ldr	r0, [sp, #4]
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	b933      	cbnz	r3, 8008848 <_free_r+0x30>
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	6014      	str	r4, [r2, #0]
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008844:	f000 b922 	b.w	8008a8c <__malloc_unlock>
 8008848:	42a3      	cmp	r3, r4
 800884a:	d908      	bls.n	800885e <_free_r+0x46>
 800884c:	6825      	ldr	r5, [r4, #0]
 800884e:	1961      	adds	r1, r4, r5
 8008850:	428b      	cmp	r3, r1
 8008852:	bf01      	itttt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	1949      	addeq	r1, r1, r5
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	e7ed      	b.n	800883a <_free_r+0x22>
 800885e:	461a      	mov	r2, r3
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b10b      	cbz	r3, 8008868 <_free_r+0x50>
 8008864:	42a3      	cmp	r3, r4
 8008866:	d9fa      	bls.n	800885e <_free_r+0x46>
 8008868:	6811      	ldr	r1, [r2, #0]
 800886a:	1855      	adds	r5, r2, r1
 800886c:	42a5      	cmp	r5, r4
 800886e:	d10b      	bne.n	8008888 <_free_r+0x70>
 8008870:	6824      	ldr	r4, [r4, #0]
 8008872:	4421      	add	r1, r4
 8008874:	1854      	adds	r4, r2, r1
 8008876:	42a3      	cmp	r3, r4
 8008878:	6011      	str	r1, [r2, #0]
 800887a:	d1e0      	bne.n	800883e <_free_r+0x26>
 800887c:	681c      	ldr	r4, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	6053      	str	r3, [r2, #4]
 8008882:	4421      	add	r1, r4
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7da      	b.n	800883e <_free_r+0x26>
 8008888:	d902      	bls.n	8008890 <_free_r+0x78>
 800888a:	230c      	movs	r3, #12
 800888c:	6003      	str	r3, [r0, #0]
 800888e:	e7d6      	b.n	800883e <_free_r+0x26>
 8008890:	6825      	ldr	r5, [r4, #0]
 8008892:	1961      	adds	r1, r4, r5
 8008894:	428b      	cmp	r3, r1
 8008896:	bf04      	itt	eq
 8008898:	6819      	ldreq	r1, [r3, #0]
 800889a:	685b      	ldreq	r3, [r3, #4]
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	bf04      	itt	eq
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6054      	str	r4, [r2, #4]
 80088a6:	e7ca      	b.n	800883e <_free_r+0x26>
 80088a8:	b003      	add	sp, #12
 80088aa:	bd30      	pop	{r4, r5, pc}
 80088ac:	20004d54 	.word	0x20004d54

080088b0 <sbrk_aligned>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	4e0e      	ldr	r6, [pc, #56]	; (80088ec <sbrk_aligned+0x3c>)
 80088b4:	460c      	mov	r4, r1
 80088b6:	6831      	ldr	r1, [r6, #0]
 80088b8:	4605      	mov	r5, r0
 80088ba:	b911      	cbnz	r1, 80088c2 <sbrk_aligned+0x12>
 80088bc:	f000 f88c 	bl	80089d8 <_sbrk_r>
 80088c0:	6030      	str	r0, [r6, #0]
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f887 	bl	80089d8 <_sbrk_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d00a      	beq.n	80088e4 <sbrk_aligned+0x34>
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d007      	beq.n	80088e8 <sbrk_aligned+0x38>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 f87c 	bl	80089d8 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d101      	bne.n	80088e8 <sbrk_aligned+0x38>
 80088e4:	f04f 34ff 	mov.w	r4, #4294967295
 80088e8:	4620      	mov	r0, r4
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	20004d58 	.word	0x20004d58

080088f0 <_malloc_r>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4607      	mov	r7, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d905      	bls.n	8008918 <_malloc_r+0x28>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	2600      	movs	r6, #0
 8008912:	4630      	mov	r0, r6
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	4e2e      	ldr	r6, [pc, #184]	; (80089d4 <_malloc_r+0xe4>)
 800891a:	f000 f8b1 	bl	8008a80 <__malloc_lock>
 800891e:	6833      	ldr	r3, [r6, #0]
 8008920:	461c      	mov	r4, r3
 8008922:	bb34      	cbnz	r4, 8008972 <_malloc_r+0x82>
 8008924:	4629      	mov	r1, r5
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ffc2 	bl	80088b0 <sbrk_aligned>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	4604      	mov	r4, r0
 8008930:	d14d      	bne.n	80089ce <_malloc_r+0xde>
 8008932:	6834      	ldr	r4, [r6, #0]
 8008934:	4626      	mov	r6, r4
 8008936:	2e00      	cmp	r6, #0
 8008938:	d140      	bne.n	80089bc <_malloc_r+0xcc>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4631      	mov	r1, r6
 800893e:	4638      	mov	r0, r7
 8008940:	eb04 0803 	add.w	r8, r4, r3
 8008944:	f000 f848 	bl	80089d8 <_sbrk_r>
 8008948:	4580      	cmp	r8, r0
 800894a:	d13a      	bne.n	80089c2 <_malloc_r+0xd2>
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	3503      	adds	r5, #3
 8008950:	1a6d      	subs	r5, r5, r1
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ffa5 	bl	80088b0 <sbrk_aligned>
 8008966:	3001      	adds	r0, #1
 8008968:	d02b      	beq.n	80089c2 <_malloc_r+0xd2>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	442b      	add	r3, r5
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	e00e      	b.n	8008990 <_malloc_r+0xa0>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	1b52      	subs	r2, r2, r5
 8008976:	d41e      	bmi.n	80089b6 <_malloc_r+0xc6>
 8008978:	2a0b      	cmp	r2, #11
 800897a:	d916      	bls.n	80089aa <_malloc_r+0xba>
 800897c:	1961      	adds	r1, r4, r5
 800897e:	42a3      	cmp	r3, r4
 8008980:	6025      	str	r5, [r4, #0]
 8008982:	bf18      	it	ne
 8008984:	6059      	strne	r1, [r3, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	bf08      	it	eq
 800898a:	6031      	streq	r1, [r6, #0]
 800898c:	5162      	str	r2, [r4, r5]
 800898e:	604b      	str	r3, [r1, #4]
 8008990:	4638      	mov	r0, r7
 8008992:	f104 060b 	add.w	r6, r4, #11
 8008996:	f000 f879 	bl	8008a8c <__malloc_unlock>
 800899a:	f026 0607 	bic.w	r6, r6, #7
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	1af2      	subs	r2, r6, r3
 80089a2:	d0b6      	beq.n	8008912 <_malloc_r+0x22>
 80089a4:	1b9b      	subs	r3, r3, r6
 80089a6:	50a3      	str	r3, [r4, r2]
 80089a8:	e7b3      	b.n	8008912 <_malloc_r+0x22>
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	bf0c      	ite	eq
 80089b0:	6032      	streq	r2, [r6, #0]
 80089b2:	605a      	strne	r2, [r3, #4]
 80089b4:	e7ec      	b.n	8008990 <_malloc_r+0xa0>
 80089b6:	4623      	mov	r3, r4
 80089b8:	6864      	ldr	r4, [r4, #4]
 80089ba:	e7b2      	b.n	8008922 <_malloc_r+0x32>
 80089bc:	4634      	mov	r4, r6
 80089be:	6876      	ldr	r6, [r6, #4]
 80089c0:	e7b9      	b.n	8008936 <_malloc_r+0x46>
 80089c2:	230c      	movs	r3, #12
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4638      	mov	r0, r7
 80089c8:	f000 f860 	bl	8008a8c <__malloc_unlock>
 80089cc:	e7a1      	b.n	8008912 <_malloc_r+0x22>
 80089ce:	6025      	str	r5, [r4, #0]
 80089d0:	e7de      	b.n	8008990 <_malloc_r+0xa0>
 80089d2:	bf00      	nop
 80089d4:	20004d54 	.word	0x20004d54

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 f9c0 	bl	8001d68 <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20004d5c 	.word	0x20004d5c

080089f8 <_raise_r>:
 80089f8:	291f      	cmp	r1, #31
 80089fa:	b538      	push	{r3, r4, r5, lr}
 80089fc:	4604      	mov	r4, r0
 80089fe:	460d      	mov	r5, r1
 8008a00:	d904      	bls.n	8008a0c <_raise_r+0x14>
 8008a02:	2316      	movs	r3, #22
 8008a04:	6003      	str	r3, [r0, #0]
 8008a06:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a0e:	b112      	cbz	r2, 8008a16 <_raise_r+0x1e>
 8008a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a14:	b94b      	cbnz	r3, 8008a2a <_raise_r+0x32>
 8008a16:	4620      	mov	r0, r4
 8008a18:	f000 f830 	bl	8008a7c <_getpid_r>
 8008a1c:	462a      	mov	r2, r5
 8008a1e:	4601      	mov	r1, r0
 8008a20:	4620      	mov	r0, r4
 8008a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a26:	f000 b817 	b.w	8008a58 <_kill_r>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d00a      	beq.n	8008a44 <_raise_r+0x4c>
 8008a2e:	1c59      	adds	r1, r3, #1
 8008a30:	d103      	bne.n	8008a3a <_raise_r+0x42>
 8008a32:	2316      	movs	r3, #22
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	2001      	movs	r0, #1
 8008a38:	e7e7      	b.n	8008a0a <_raise_r+0x12>
 8008a3a:	2400      	movs	r4, #0
 8008a3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a40:	4628      	mov	r0, r5
 8008a42:	4798      	blx	r3
 8008a44:	2000      	movs	r0, #0
 8008a46:	e7e0      	b.n	8008a0a <_raise_r+0x12>

08008a48 <raise>:
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <raise+0xc>)
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f7ff bfd3 	b.w	80089f8 <_raise_r>
 8008a52:	bf00      	nop
 8008a54:	2000000c 	.word	0x2000000c

08008a58 <_kill_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d07      	ldr	r5, [pc, #28]	; (8008a78 <_kill_r+0x20>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	4611      	mov	r1, r2
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	f7f9 f965 	bl	8001d34 <_kill>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d102      	bne.n	8008a74 <_kill_r+0x1c>
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	b103      	cbz	r3, 8008a74 <_kill_r+0x1c>
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	bd38      	pop	{r3, r4, r5, pc}
 8008a76:	bf00      	nop
 8008a78:	20004d5c 	.word	0x20004d5c

08008a7c <_getpid_r>:
 8008a7c:	f7f9 b952 	b.w	8001d24 <_getpid>

08008a80 <__malloc_lock>:
 8008a80:	4801      	ldr	r0, [pc, #4]	; (8008a88 <__malloc_lock+0x8>)
 8008a82:	f000 b809 	b.w	8008a98 <__retarget_lock_acquire_recursive>
 8008a86:	bf00      	nop
 8008a88:	20004d60 	.word	0x20004d60

08008a8c <__malloc_unlock>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__malloc_unlock+0x8>)
 8008a8e:	f000 b804 	b.w	8008a9a <__retarget_lock_release_recursive>
 8008a92:	bf00      	nop
 8008a94:	20004d60 	.word	0x20004d60

08008a98 <__retarget_lock_acquire_recursive>:
 8008a98:	4770      	bx	lr

08008a9a <__retarget_lock_release_recursive>:
 8008a9a:	4770      	bx	lr

08008a9c <_init>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_fini>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr


V8_Roomba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800b064  0800b064  0001b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b124  0800b124  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b124  0800b124  0001b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b12c  0800b12c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b134  0800b134  0001b134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb0  20000078  0800b1b0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004d28  0800b1b0  00024d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027064  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a84  00000000  00000000  00047108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  0004bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  0004d5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dd72  00000000  00000000  0004ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fdb3  00000000  00000000  0006cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1331  00000000  00000000  0008c965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012dc96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007304  00000000  00000000  0012dce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b04c 	.word	0x0800b04c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800b04c 	.word	0x0800b04c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <_ZN10Controller7CommandC1Ev>:
    UART_HandleTypeDef *huart;
    Chasis *chasis;
    MPU_6050 *imu_1, *imu_2;
    IMU_Data *imuData1, *imuData2;

    struct Command{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	709a      	strb	r2, [r3, #2]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	70da      	strb	r2, [r3, #3]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_ZN10ControllerC1EP20__UART_HandleTypeDefP6ChasisP8MPU_6050S5_>:
#include "Controller.hpp"

Controller::Controller(UART_HandleTypeDef * huart_in, Chasis *chasis_in,
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	603b      	str	r3, [r7, #0]
      MPU_6050 *imu1_in, MPU_6050 *imu2_in):
huart(huart_in), chasis(chasis_in), imu_1(imu1_in), imu_2(imu2_in)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ffc6 	bl	8000d70 <_ZN10Controller7CommandC1Ev>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3338      	adds	r3, #56	; 0x38
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	811a      	strh	r2, [r3, #8]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3342      	adds	r3, #66	; 0x42
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]
 8000e0a:	761a      	strb	r2, [r3, #24]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
{}
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN10Controller12startUpStateEv>:

void Controller::startUpState()
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  chasis->init();
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f86b 	bl	8001f0e <_ZN6Chasis4initEv>
  imu_1->startPins();
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fc97 	bl	8001770 <_ZN8MPU_60509startPinsEv>
  imu_2->startPins();
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fc92 	bl	8001770 <_ZN8MPU_60509startPinsEv>
  controllerState = CALIBRATION;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  systemStarted = true;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_ZN10Controller16calibrationStateEv>:

void Controller::calibrationState()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  imu_1->initialize();
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fc9a 	bl	80017aa <_ZN8MPU_605010initializeEv>
  imu_2->initialize();
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fc95 	bl	80017aa <_ZN8MPU_605010initializeEv>
  imuData1 = imu_1->generateNewResult();
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 ff1f 	bl	8001cc8 <_ZN8MPU_605017generateNewResultEv>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  imuData2 = imu_2->generateNewResult();
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 ff17 	bl	8001cc8 <_ZN8MPU_605017generateNewResultEv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	615a      	str	r2, [r3, #20]
  controllerState = OPERATING;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2202      	movs	r2, #2
 8000ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  systemCalibrated = true;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  receiveCommands();
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f8d3 	bl	800105c <_ZN10Controller15receiveCommandsEv>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_ZN10Controller14operatingStateEv>:

void Controller::operatingState()
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  chasis->steer(currentCommand.angle,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ed6:	eef0 0a47 	vmov.f32	s1, s14
 8000eda:	eeb0 0a67 	vmov.f32	s0, s15
 8000ede:	4610      	mov	r0, r2
 8000ee0:	f001 f831 	bl	8001f46 <_ZN6Chasis5steerEff>
  //   controllerState = FAILURE;
  // else if (currentCommand.shutDown)
  //   controllerState = SHUTDOWN;
  // else if (!currentCommand.operating)
  //   controllerState = IDLE;
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <_ZN10Controller9idleStateEv>:

void Controller::idleState()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  chasis->steer(0,0);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8000f38 <_ZN10Controller9idleStateEv+0x4c>
 8000efc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000f38 <_ZN10Controller9idleStateEv+0x4c>
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 f820 	bl	8001f46 <_ZN6Chasis5steerEff>

//  if (!currentCommand.operating)
//  {
//    return;
//  }
  if (time_ms > checkVal2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d904      	bls.n	8000f1c <_ZN10Controller9idleStateEv+0x30>
  {
    controllerState = SHUTDOWN;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2205      	movs	r2, #5
 8000f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
  else if (time_ms < checkVal)
  {
    controllerState = OPERATING;
  }
}
 8000f1a:	e009      	b.n	8000f30 <_ZN10Controller9idleStateEv+0x44>
  else if (time_ms < checkVal)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d203      	bcs.n	8000f30 <_ZN10Controller9idleStateEv+0x44>
    controllerState = OPERATING;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	00000000 	.word	0x00000000

08000f3c <_ZN10Controller9failStateEv>:

void Controller::failState()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  chasis->steer(0,0);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8000f74 <_ZN10Controller9failStateEv+0x38>
 8000f4c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000f74 <_ZN10Controller9failStateEv+0x38>
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fff8 	bl	8001f46 <_ZN6Chasis5steerEff>
  if (!currentCommand.failure)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7e9b      	ldrb	r3, [r3, #26]
 8000f5a:	f083 0301 	eor.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <_ZN10Controller9failStateEv+0x30>
    controllerState = OPERATING;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	00000000 	.word	0x00000000

08000f78 <_ZN10Controller13shutdownStateEv>:

void Controller::shutdownState()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if (currentCommand.shutDown)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e5b      	ldrb	r3, [r3, #25]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <_ZN10Controller13shutdownStateEv+0x18>
  {
	receiveCommands(); // attempt to restart connection
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f867 	bl	800105c <_ZN10Controller15receiveCommandsEv>
    return;
 8000f8e:	e003      	b.n	8000f98 <_ZN10Controller13shutdownStateEv+0x20>
  }
  controllerState = START_UP;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <_ZN10Controller4loopEv>:

void Controller::loop()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  time_ms = HAL_GetTick();
 8000fa8:	f001 ff96 	bl	8002ed8 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c

  imu_1->updateData();
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd94 	bl	8001ae4 <_ZN8MPU_605010updateDataEv>
  imu_2->updateData();
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 fd8f 	bl	8001ae4 <_ZN8MPU_605010updateDataEv>

  checkVal = currentCommand.time_ms + CONNECTION_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	631a      	str	r2, [r3, #48]	; 0x30
  checkVal2 = currentCommand.time_ms + CONNECTION_TIMEOUT * 2;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34

  if (time_ms > checkVal && controllerState != SHUTDOWN)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d908      	bls.n	8000ffc <_ZN10Controller4loopEv+0x5c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d003      	beq.n	8000ffc <_ZN10Controller4loopEv+0x5c>
  {
    controllerState = IDLE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }

  switch(controllerState)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001002:	2b05      	cmp	r3, #5
 8001004:	d826      	bhi.n	8001054 <_ZN10Controller4loopEv+0xb4>
 8001006:	a201      	add	r2, pc, #4	; (adr r2, 800100c <_ZN10Controller4loopEv+0x6c>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	08001025 	.word	0x08001025
 8001010:	0800102d 	.word	0x0800102d
 8001014:	08001035 	.word	0x08001035
 8001018:	08001045 	.word	0x08001045
 800101c:	0800103d 	.word	0x0800103d
 8001020:	0800104d 	.word	0x0800104d
  {
    case START_UP:
      startUpState();
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fefe 	bl	8000e26 <_ZN10Controller12startUpStateEv>
      break;
 800102a:	e013      	b.n	8001054 <_ZN10Controller4loopEv+0xb4>
    
    case CALIBRATION:
      calibrationState();
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff19 	bl	8000e64 <_ZN10Controller16calibrationStateEv>
      break;
 8001032:	e00f      	b.n	8001054 <_ZN10Controller4loopEv+0xb4>

    case OPERATING:
      operatingState();
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff42 	bl	8000ebe <_ZN10Controller14operatingStateEv>
      break;
 800103a:	e00b      	b.n	8001054 <_ZN10Controller4loopEv+0xb4>
    
    case IDLE:
      idleState();
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff55 	bl	8000eec <_ZN10Controller9idleStateEv>
      break;
 8001042:	e007      	b.n	8001054 <_ZN10Controller4loopEv+0xb4>

    case FAILURE:
      failState();
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff79 	bl	8000f3c <_ZN10Controller9failStateEv>
      break;
 800104a:	e003      	b.n	8001054 <_ZN10Controller4loopEv+0xb4>
    
    case SHUTDOWN:
      shutdownState();
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff93 	bl	8000f78 <_ZN10Controller13shutdownStateEv>
      break;
 8001052:	bf00      	nop
  }
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN10Controller15receiveCommandsEv>:

void Controller::receiveCommands()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef test = HAL_UART_Receive_IT(&huart1, receiveBuffer, 5);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3338      	adds	r3, #56	; 0x38
 8001068:	2205      	movs	r2, #5
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <_ZN10Controller15receiveCommandsEv+0x28>)
 800106e:	f006 f914 	bl	800729a <HAL_UART_Receive_IT>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
  trasnmitCommands();
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f9c6 	bl	8001408 <_ZN10Controller16trasnmitCommandsEv>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000037c 	.word	0x2000037c

08001088 <_ZN10Controller13parseReceivedEv>:

void Controller::parseReceived()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  currentCommand.failure = (receiveBuffer[0] & 0b00001000);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	bf14      	ite	ne
 800109e:	2301      	movne	r3, #1
 80010a0:	2300      	moveq	r3, #0
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	769a      	strb	r2, [r3, #26]
  currentCommand.shutDown = !(receiveBuffer[0] & 0b00000100);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf0c      	ite	eq
 80010b6:	2301      	moveq	r3, #1
 80010b8:	2300      	movne	r3, #0
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	765a      	strb	r2, [r3, #25]
  currentCommand.operating = (receiveBuffer[0] & 0b00000010);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	76da      	strb	r2, [r3, #27]
  currentCommand.omniDrive = (receiveBuffer[0] & 0b00000001);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	bf14      	ite	ne
 80010e6:	2301      	movne	r3, #1
 80010e8:	2300      	moveq	r3, #0
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	761a      	strb	r2, [r3, #24]

  currentCommand.angle = int16_t(receiveBuffer[1] << 8 | receiveBuffer[2])/1000.0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f9bc 	bl	8000484 <__aeabi_i2d>
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <_ZN10Controller13parseReceivedEv+0xec>)
 8001112:	f7ff fb4b 	bl	80007ac <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fc55 	bl	80009cc <__aeabi_d2f>
 8001122:	4602      	mov	r2, r0
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	61da      	str	r2, [r3, #28]
  currentCommand.speed = int16_t(receiveBuffer[3] << 8 | receiveBuffer[4])/1000.0;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9a0 	bl	8000484 <__aeabi_i2d>
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <_ZN10Controller13parseReceivedEv+0xec>)
 800114a:	f7ff fb2f 	bl	80007ac <__aeabi_ddiv>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fc39 	bl	80009cc <__aeabi_d2f>
 800115a:	4602      	mov	r2, r0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	621a      	str	r2, [r3, #32]

  currentCommand.time_ms = HAL_GetTick();;
 8001160:	f001 feba 	bl	8002ed8 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	408f4000 	.word	0x408f4000

08001178 <_ZN10Controller12prepTransmitEv>:

void Controller::prepTransmit()
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  transmitBuffer[0] = int(systemStarted) << 1 
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001186:	005b      	lsls	r3, r3, #1
					            | int(systemCalibrated);
 8001188:	b25a      	sxtb	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001190:	b25b      	sxtb	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b25b      	sxtb	r3, r3
 8001196:	b2da      	uxtb	r2, r3
  transmitBuffer[0] = int(systemStarted) << 1 
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  int16_t accX = imuData1->accX * 1000;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 80011aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b2:	ee17 3a90 	vmov	r3, s15
 80011b6:	82fb      	strh	r3, [r7, #22]
  int16_t accY = imuData1->accY * 1000;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c0:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 80011c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	ee17 3a90 	vmov	r3, s15
 80011d0:	82bb      	strh	r3, [r7, #20]
  int16_t accZ = imuData1->accZ * 1000;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011da:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	827b      	strh	r3, [r7, #18]
  int16_t gyroX = imuData1->gyroX * 1000;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	823b      	strh	r3, [r7, #16]
  int16_t gyroY = imuData1->gyroY * 1000;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	edd3 7a04 	vldr	s15, [r3, #16]
 800120e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	81fb      	strh	r3, [r7, #14]
  int16_t gyroZ = imuData1->gyroZ * 1000;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	edd3 7a05 	vldr	s15, [r3, #20]
 8001228:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001234:	ee17 3a90 	vmov	r3, s15
 8001238:	81bb      	strh	r3, [r7, #12]


  transmitBuffer[1] = (accX & 0b1111111100000000) >> 8;
 800123a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800123e:	121b      	asrs	r3, r3, #8
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  transmitBuffer[2] = (accX & 0b0000000011111111);
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  transmitBuffer[3] = (accY & 0b1111111100000000) >> 8;
 8001252:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001256:	121b      	asrs	r3, r3, #8
 8001258:	b2da      	uxtb	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  transmitBuffer[4] = (accY & 0b0000000011111111);
 8001260:	8abb      	ldrh	r3, [r7, #20]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  transmitBuffer[5] = (accZ & 0b1111111100000000) >> 8;
 800126a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800126e:	121b      	asrs	r3, r3, #8
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  transmitBuffer[6] = (accZ & 0b0000000011111111);
 8001278:	8a7b      	ldrh	r3, [r7, #18]
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  transmitBuffer[7] = (gyroX & 0b1111111100000000) >> 8;
 8001282:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  transmitBuffer[8] = (gyroX & 0b0000000011111111);
 8001290:	8a3b      	ldrh	r3, [r7, #16]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  transmitBuffer[9] = (gyroY & 0b1111111100000000) >> 8;
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	121b      	asrs	r3, r3, #8
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  transmitBuffer[10] = (gyroY & 0b0000000011111111);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  transmitBuffer[11] = (gyroZ & 0b1111111100000000) >> 8;
 80012b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b6:	121b      	asrs	r3, r3, #8
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  transmitBuffer[12] = (gyroZ & 0b0000000011111111);
 80012c0:	89bb      	ldrh	r3, [r7, #12]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

  accX = imuData2->accX * 1000;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 80012d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012de:	ee17 3a90 	vmov	r3, s15
 80012e2:	82fb      	strh	r3, [r7, #22]
  accY = imuData2->accY * 1000;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ec:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f8:	ee17 3a90 	vmov	r3, s15
 80012fc:	82bb      	strh	r3, [r7, #20]
  accZ = imuData2->accZ * 1000;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	edd3 7a02 	vldr	s15, [r3, #8]
 8001306:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 800130a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800130e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001312:	ee17 3a90 	vmov	r3, s15
 8001316:	827b      	strh	r3, [r7, #18]
  gyroX = imuData2->gyroX * 1000;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001320:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 8001324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132c:	ee17 3a90 	vmov	r3, s15
 8001330:	823b      	strh	r3, [r7, #16]
  gyroY = imuData2->gyroY * 1000;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	edd3 7a04 	vldr	s15, [r3, #16]
 800133a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 800133e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001346:	ee17 3a90 	vmov	r3, s15
 800134a:	81fb      	strh	r3, [r7, #14]
  gyroZ = imuData2->gyroZ * 1000;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	edd3 7a05 	vldr	s15, [r3, #20]
 8001354:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001404 <_ZN10Controller12prepTransmitEv+0x28c>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 3a90 	vmov	r3, s15
 8001364:	81bb      	strh	r3, [r7, #12]

  transmitBuffer[13] = (accX & 0b1111111100000000) >> 8;
 8001366:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800136a:	121b      	asrs	r3, r3, #8
 800136c:	b2da      	uxtb	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
  transmitBuffer[14] = (accX & 0b0000000011111111);
 8001374:	8afb      	ldrh	r3, [r7, #22]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  transmitBuffer[15] = (accY & 0b1111111100000000) >> 8;
 800137e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001382:	121b      	asrs	r3, r3, #8
 8001384:	b2da      	uxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  transmitBuffer[16] = (accY & 0b0000000011111111);
 800138c:	8abb      	ldrh	r3, [r7, #20]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  transmitBuffer[17] = (accZ & 0b1111111100000000) >> 8;
 8001396:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800139a:	121b      	asrs	r3, r3, #8
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
  transmitBuffer[18] = (accZ & 0b0000000011111111);
 80013a4:	8a7b      	ldrh	r3, [r7, #18]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  transmitBuffer[19] = (gyroX & 0b1111111100000000) >> 8;
 80013ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013b2:	121b      	asrs	r3, r3, #8
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  transmitBuffer[20] = (gyroX & 0b0000000011111111);
 80013bc:	8a3b      	ldrh	r3, [r7, #16]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56

  transmitBuffer[21] = (gyroY & 0b1111111100000000) >> 8;
 80013c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ca:	121b      	asrs	r3, r3, #8
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  transmitBuffer[22] = (gyroY & 0b0000000011111111);
 80013d4:	89fb      	ldrh	r3, [r7, #14]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  transmitBuffer[23] = (gyroZ & 0b1111111100000000) >> 8;
 80013de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e2:	121b      	asrs	r3, r3, #8
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
  transmitBuffer[24] = (gyroZ & 0b0000000011111111);
 80013ec:	89bb      	ldrh	r3, [r7, #12]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	447a0000 	.word	0x447a0000

08001408 <_ZN10Controller16trasnmitCommandsEv>:

void Controller::trasnmitCommands()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  prepTransmit();
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff feb1 	bl	8001178 <_ZN10Controller12prepTransmitEv>
  HAL_UART_Transmit(&huart1, transmitBuffer, sizeof(transmitBuffer), 1000);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f103 0142 	add.w	r1, r3, #66	; 0x42
 800141c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001420:	2219      	movs	r2, #25
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <_ZN10Controller16trasnmitCommandsEv+0x28>)
 8001424:	f005 fea7 	bl	8007176 <HAL_UART_Transmit>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000037c 	.word	0x2000037c

08001434 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>:
#include "MPU_6050_Driver.hpp"

MPU_6050::MPU_6050(bool setAddressHigh, I2C_HandleTypeDef *hi2c_in,
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	460b      	mov	r3, r1
 8001442:	72fb      	strb	r3, [r7, #11]
  GPIO_TypeDef* addressPinReg, uint16_t addressPin):
  addressPin(addressPinReg), addressPinVal(addressPin)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8b3a      	ldrh	r2, [r7, #24]
 800144e:	879a      	strh	r2, [r3, #60]	; 0x3c
{
  if (setAddressHigh)
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft+0x2a>
  {
    address = ADDRESS_HIGH;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2269      	movs	r2, #105	; 0x69
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	e002      	b.n	8001464 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft+0x30>
  }
  else
    address= ADDRESS_LOW;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2268      	movs	r2, #104	; 0x68
 8001462:	801a      	strh	r2, [r3, #0]

  imuData = new IMU_Data();
 8001464:	201c      	movs	r0, #28
 8001466:	f009 fc3b 	bl	800ace0 <_Znwj>
 800146a:	4603      	mov	r3, r0
 800146c:	4619      	mov	r1, r3
 800146e:	460a      	mov	r2, r1
 8001470:	2300      	movs	r3, #0
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	6053      	str	r3, [r2, #4]
 8001476:	6093      	str	r3, [r2, #8]
 8001478:	60d3      	str	r3, [r2, #12]
 800147a:	6113      	str	r3, [r2, #16]
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6419      	str	r1, [r3, #64]	; 0x40

  hi2c = hi2c_in;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
} 
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4618      	mov	r0, r3
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZN8MPU_6050D1Ev>:

MPU_6050::~MPU_6050()
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
{
	delete imuData;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <_ZN8MPU_6050D1Ev+0x18>
 80014a4:	211c      	movs	r1, #28
 80014a6:	4618      	mov	r0, r3
 80014a8:	f009 fc18 	bl	800acdc <_ZdlPvj>
}
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <_ZN8MPU_605012calibrateMPUEv>:

void MPU_6050::calibrateMPU(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  // take 4000 measurements and average them out;
  float buffAx = 0, buffAy = 0, buffAz = 0;
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  float buffGx = 0, buffGy = 0, buffGz = 0;
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  const int TOTAL_MEASUREMENTS = 200;
 80014e4:	23c8      	movs	r3, #200	; 0xc8
 80014e6:	60bb      	str	r3, [r7, #8]

  for (int measIter = 0; measIter < TOTAL_MEASUREMENTS; measIter ++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2bc7      	cmp	r3, #199	; 0xc7
 80014f0:	dc58      	bgt.n	80015a4 <_ZN8MPU_605012calibrateMPUEv+0xec>
  {
    readTempRegisters();
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 faa8 	bl	8001a48 <_ZN8MPU_605017readTempRegistersEv>
	  readGyroRegisters();
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fa52 	bl	80019a2 <_ZN8MPU_605017readGyroRegistersEv>
	  readAccelRegisters();
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f9fe 	bl	8001900 <_ZN8MPU_605018readAccelRegistersEv>

    buffAx += imuData->accX;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    buffAy += imuData->accY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001520:	ed97 7a08 	vldr	s14, [r7, #32]
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001528:	edc7 7a08 	vstr	s15, [r7, #32]
    buffAz += imuData->accZ - LSB_g * (address == ADDRESS_HIGH?-1:1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	ed93 7a02 	vldr	s14, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edd3 7a06 	vldr	s15, [r3, #24]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	2b69      	cmp	r3, #105	; 0x69
 8001540:	d102      	bne.n	8001548 <_ZN8MPU_605012calibrateMPUEv+0x90>
 8001542:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001546:	e001      	b.n	800154c <_ZN8MPU_605012calibrateMPUEv+0x94>
 8001548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800154c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	ed97 7a07 	vldr	s14, [r7, #28]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	edc7 7a07 	vstr	s15, [r7, #28]

    buffGx += imuData->gyroX;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	edd3 7a03 	vldr	s15, [r3, #12]
 8001568:	ed97 7a06 	vldr	s14, [r7, #24]
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	edc7 7a06 	vstr	s15, [r7, #24]
    buffGy += imuData->gyroY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	edd3 7a04 	vldr	s15, [r3, #16]
 800157c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001584:	edc7 7a05 	vstr	s15, [r7, #20]
    buffGz += imuData->gyroZ;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001590:	ed97 7a04 	vldr	s14, [r7, #16]
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	edc7 7a04 	vstr	s15, [r7, #16]
  for (int measIter = 0; measIter < TOTAL_MEASUREMENTS; measIter ++)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e7a3      	b.n	80014ec <_ZN8MPU_605012calibrateMPUEv+0x34>
  }

  calibAx = buffAx / TOTAL_MEASUREMENTS;
 80015a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015a8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001618 <_ZN8MPU_605012calibrateMPUEv+0x160>
 80015ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	edc3 7a08 	vstr	s15, [r3, #32]
  calibAy = buffAy / TOTAL_MEASUREMENTS;
 80015b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80015ba:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001618 <_ZN8MPU_605012calibrateMPUEv+0x160>
 80015be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  calibAz = buffAz / TOTAL_MEASUREMENTS;
 80015c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80015cc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001618 <_ZN8MPU_605012calibrateMPUEv+0x160>
 80015d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  calibGx = buffGx / TOTAL_MEASUREMENTS;
 80015da:	ed97 7a06 	vldr	s14, [r7, #24]
 80015de:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001618 <_ZN8MPU_605012calibrateMPUEv+0x160>
 80015e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  calibGy = buffGy / TOTAL_MEASUREMENTS;
 80015ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80015f0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001618 <_ZN8MPU_605012calibrateMPUEv+0x160>
 80015f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  calibGz = buffGz / TOTAL_MEASUREMENTS;
 80015fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001602:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001618 <_ZN8MPU_605012calibrateMPUEv+0x160>
 8001606:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	43480000 	.word	0x43480000
 800161c:	00000000 	.word	0x00000000

08001620 <_ZN8MPU_605011correctDataEv>:

void MPU_6050::correctData(void)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  imuData->accX = (imuData->accX - calibAx)/LSB_g;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edd3 7a08 	vldr	s15, [r3, #32]
 8001636:	ee77 6a67 	vsub.f32	s13, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001648:	edc3 7a00 	vstr	s15, [r3]
  imuData->accY = (imuData->accY - calibAy)/LSB_g;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	ed93 7a01 	vldr	s14, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800165a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ed93 7a06 	vldr	s14, [r3, #24]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166c:	edc3 7a01 	vstr	s15, [r3, #4]
  imuData->accZ = (imuData->accZ - calibAz)/LSB_g;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	ed93 7a02 	vldr	s14, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800167e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	ed93 7a06 	vldr	s14, [r3, #24]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001690:	edc3 7a02 	vstr	s15, [r3, #8]

  imuData->gyroX = (imuData->gyroX - calibGx)/LSB_deg_s * 0.01745329; //deg to rad
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	ed93 7a03 	vldr	s14, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80016a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80016ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016b0:	ee16 0a90 	vmov	r0, s13
 80016b4:	f7fe fef8 	bl	80004a8 <__aeabi_f2d>
 80016b8:	a32b      	add	r3, pc, #172	; (adr r3, 8001768 <_ZN8MPU_605011correctDataEv+0x148>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ff4b 	bl	8000558 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80016ce:	f7ff f97d 	bl	80009cc <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	60e3      	str	r3, [r4, #12]
  imuData->gyroY = (imuData->gyroY - calibGy)/LSB_deg_s * 0.01745329;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	ed93 7a04 	vldr	s14, [r3, #16]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80016ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016f2:	ee16 0a90 	vmov	r0, s13
 80016f6:	f7fe fed7 	bl	80004a8 <__aeabi_f2d>
 80016fa:	a31b      	add	r3, pc, #108	; (adr r3, 8001768 <_ZN8MPU_605011correctDataEv+0x148>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff2a 	bl	8000558 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001710:	f7ff f95c 	bl	80009cc <__aeabi_d2f>
 8001714:	4603      	mov	r3, r0
 8001716:	6123      	str	r3, [r4, #16]
  imuData->gyroZ = (imuData->gyroZ - calibGz)/LSB_deg_s * 0.01745329;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001730:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001734:	ee16 0a90 	vmov	r0, s13
 8001738:	f7fe feb6 	bl	80004a8 <__aeabi_f2d>
 800173c:	a30a      	add	r3, pc, #40	; (adr r3, 8001768 <_ZN8MPU_605011correctDataEv+0x148>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe ff09 	bl	8000558 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001752:	f7ff f93b 	bl	80009cc <__aeabi_d2f>
 8001756:	4603      	mov	r3, r0
 8001758:	6163      	str	r3, [r4, #20]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	7707c94d 	.word	0x7707c94d
 800176c:	3f91df46 	.word	0x3f91df46

08001770 <_ZN8MPU_60509startPinsEv>:

void MPU_6050::startPins()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if (address == ADDRESS_HIGH)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2b69      	cmp	r3, #105	; 0x69
 800177e:	d108      	bne.n	8001792 <_ZN8MPU_60509startPinsEv+0x22>
  {
	HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_SET);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001788:	2201      	movs	r2, #1
 800178a:	4619      	mov	r1, r3
 800178c:	f001 fee6 	bl	800355c <HAL_GPIO_WritePin>
  }
  else
  {
	  HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_RESET);
  }
}
 8001790:	e007      	b.n	80017a2 <_ZN8MPU_60509startPinsEv+0x32>
	  HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_RESET);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800179a:	2200      	movs	r2, #0
 800179c:	4619      	mov	r1, r3
 800179e:	f001 fedd 	bl	800355c <HAL_GPIO_WritePin>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_ZN8MPU_605010initializeEv>:

bool MPU_6050::initialize(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  sleepMode(false);
 80017b2:	2100      	movs	r1, #0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f9c5 	bl	8001b44 <_ZN8MPU_60509sleepModeEb>
  resetRegisters();
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f9a6 	bl	8001b0c <_ZN8MPU_605014resetRegistersEv>
  disableTemp(false);
 80017c0:	2100      	movs	r1, #0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fa3d 	bl	8001c42 <_ZN8MPU_605011disableTempEb>
  setFullScaleAccel(ACCEL_FULLSCALE_16);
 80017c8:	2103      	movs	r1, #3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f856 	bl	800187c <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale>
  setFullScaleGyro(GYRO_FULLSCALE_1000);
 80017d0:	2102      	movs	r1, #2
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f80c 	bl	80017f0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale>
  selectClockSource(INTERNAL_8MHZ);
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f9f5 	bl	8001bca <_ZN8MPU_605017selectClockSourceE12Clock_Select>
  calibrateMPU();
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe69 	bl	80014b8 <_ZN8MPU_605012calibrateMPUEv>
//  if (!selfTest())
//  {
//    return INIT_FAIL;
//  }
  return INIT_SUCCESS;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale>:
  HAL_I2C_Mem_Write(hi2c, (address<<1), SMPLRT_DIV, 1,
    rate_divider, 1, HAL_MAX_DELAY);
}

void MPU_6050::setFullScaleGyro(Gyro_FullScale gyro_fs_setting)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af04      	add	r7, sp, #16
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
  uint8_t config[1] = {(uint8_t)(gyro_fs_setting << 3)};
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), GYRO_CONFIG, 1,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	b299      	uxth	r1, r3
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	f107 030c 	add.w	r3, r7, #12
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	221b      	movs	r2, #27
 8001824:	f001 fff8 	bl	8003818 <HAL_I2C_Mem_Write>
    config, 1, HAL_MAX_DELAY);

  switch(gyro_fs_setting)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	2b03      	cmp	r3, #3
 800182c:	d81a      	bhi.n	8001864 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
 800182e:	a201      	add	r2, pc, #4	; (adr r2, 8001834 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x44>)
 8001830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001834:	08001845 	.word	0x08001845
 8001838:	0800184d 	.word	0x0800184d
 800183c:	08001855 	.word	0x08001855
 8001840:	0800185d 	.word	0x0800185d
  {
    case 0x00: // 250
      LSB_deg_s = GYRO_FS_250_RANGE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x7c>)
 8001848:	61da      	str	r2, [r3, #28]
      break; 
 800184a:	e00b      	b.n	8001864 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x01: //500
      LSB_deg_s = GYRO_FS_500_RANGE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x80>)
 8001850:	61da      	str	r2, [r3, #28]
      break;
 8001852:	e007      	b.n	8001864 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x02: // 1000
      LSB_deg_s = GYRO_FS_1000_RANGE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x84>)
 8001858:	61da      	str	r2, [r3, #28]
      break;
 800185a:	e003      	b.n	8001864 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x03: // 2000
      LSB_deg_s = GYRO_FS_2000_RANGE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a06      	ldr	r2, [pc, #24]	; (8001878 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x88>)
 8001860:	61da      	str	r2, [r3, #28]
      break;
 8001862:	bf00      	nop
  }
}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	43030000 	.word	0x43030000
 8001870:	42830000 	.word	0x42830000
 8001874:	42033333 	.word	0x42033333
 8001878:	41833333 	.word	0x41833333

0800187c <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale>:

void MPU_6050::setFullScaleAccel(Accel_FullScale accel_fs_setting)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af04      	add	r7, sp, #16
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	460b      	mov	r3, r1
 8001886:	70fb      	strb	r3, [r7, #3]
  uint8_t config[1] = {(uint8_t)(accel_fs_setting << 3)};
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), ACCEL_CONFIG, 1,
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	b299      	uxth	r1, r3
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	2301      	movs	r3, #1
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	2301      	movs	r3, #1
 80018ae:	221c      	movs	r2, #28
 80018b0:	f001 ffb2 	bl	8003818 <HAL_I2C_Mem_Write>
    config, 1, HAL_MAX_DELAY);

  switch(accel_fs_setting)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d81e      	bhi.n	80018f8 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x44>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	080018db 	.word	0x080018db
 80018c8:	080018e5 	.word	0x080018e5
 80018cc:	080018ef 	.word	0x080018ef
  {
    case 0x00: // 2
      LSB_g = ACCEL_FS_2_RANGE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80018d6:	619a      	str	r2, [r3, #24]
      break; 
 80018d8:	e00e      	b.n	80018f8 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x01: // 4
      LSB_g = ACCEL_FS_4_RANGE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80018e0:	619a      	str	r2, [r3, #24]
      break;
 80018e2:	e009      	b.n	80018f8 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x02: // 8
      LSB_g = ACCEL_FS_8_RANGE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80018ea:	619a      	str	r2, [r3, #24]
      break;
 80018ec:	e004      	b.n	80018f8 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x03: // 16
      LSB_g = ACCEL_FS_16_RANGE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80018f4:	619a      	str	r2, [r3, #24]
      break;
 80018f6:	bf00      	nop
  }
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_ZN8MPU_605018readAccelRegistersEv>:


void MPU_6050::readAccelRegisters(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af04      	add	r7, sp, #16
 8001906:	6078      	str	r0, [r7, #4]
  int16_t accelX, accelY, accelZ;
  uint8_t accelRec[6];

  HAL_I2C_Mem_Read(hi2c,(address<<1) | 0x01, ACCEL_XOUT_H, 1,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	b21b      	sxth	r3, r3
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	b21b      	sxth	r3, r3
 800191a:	b299      	uxth	r1, r3
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2306      	movs	r3, #6
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	223b      	movs	r2, #59	; 0x3b
 8001930:	f002 f86c 	bl	8003a0c <HAL_I2C_Mem_Read>
    accelRec, 6, HAL_MAX_DELAY);
  
  accelX = (int16_t)(accelRec[0] << 8 | accelRec[1]);
 8001934:	7b3b      	ldrb	r3, [r7, #12]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	b21a      	sxth	r2, r3
 800193a:	7b7b      	ldrb	r3, [r7, #13]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	82fb      	strh	r3, [r7, #22]
  accelY = (int16_t)(accelRec[2] << 8 | accelRec[3]);
 8001942:	7bbb      	ldrb	r3, [r7, #14]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	b21b      	sxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	82bb      	strh	r3, [r7, #20]
  accelZ = (int16_t)(accelRec[4] << 8 | accelRec[5]);
 8001950:	7c3b      	ldrb	r3, [r7, #16]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21a      	sxth	r2, r3
 8001956:	7c7b      	ldrb	r3, [r7, #17]
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	827b      	strh	r3, [r7, #18]

  imuData->accX = accelX;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001966:	ee07 2a90 	vmov	s15, r2
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	edc3 7a00 	vstr	s15, [r3]
  imuData->accY = accelY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800197a:	ee07 2a90 	vmov	s15, r2
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	edc3 7a01 	vstr	s15, [r3, #4]
  imuData->accZ = accelZ;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800198e:	ee07 2a90 	vmov	s15, r2
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZN8MPU_605017readGyroRegistersEv>:

void MPU_6050::readGyroRegisters(void)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08a      	sub	sp, #40	; 0x28
 80019a6:	af04      	add	r7, sp, #16
 80019a8:	6078      	str	r0, [r7, #4]
  int16_t gyroX, gyroY, gyroZ;
  uint8_t gyroRec[6];

  HAL_I2C_Mem_Read(hi2c,(address<<1) | 0x01,GYRO_XOUT_H, 1,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	b299      	uxth	r1, r3
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2306      	movs	r3, #6
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2243      	movs	r2, #67	; 0x43
 80019d2:	f002 f81b 	bl	8003a0c <HAL_I2C_Mem_Read>
    gyroRec, 6, HAL_MAX_DELAY);
  
  gyroX = (int16_t)(gyroRec[0] << 8 | gyroRec[1]);
 80019d6:	7b3b      	ldrb	r3, [r7, #12]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b21a      	sxth	r2, r3
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	82fb      	strh	r3, [r7, #22]
  gyroY = (int16_t)(gyroRec[2] << 8 | gyroRec[3]);
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	82bb      	strh	r3, [r7, #20]
  gyroZ = (int16_t)(gyroRec[4] << 8 | gyroRec[5]);
 80019f2:	7c3b      	ldrb	r3, [r7, #16]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	7c7b      	ldrb	r3, [r7, #17]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	827b      	strh	r3, [r7, #18]

  imuData->gyroX = gyroX;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a08:	ee07 2a90 	vmov	s15, r2
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	edc3 7a03 	vstr	s15, [r3, #12]
  imuData->gyroY = gyroY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a1c:	ee07 2a90 	vmov	s15, r2
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	edc3 7a04 	vstr	s15, [r3, #16]
  imuData->gyroZ = gyroZ;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a30:	ee07 2a90 	vmov	s15, r2
 8001a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a38:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	0000      	movs	r0, r0
	...

08001a48 <_ZN8MPU_605017readTempRegistersEv>:

void MPU_6050::readTempRegisters(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af04      	add	r7, sp, #16
 8001a4e:	6078      	str	r0, [r7, #4]
  int16_t temp;
  uint8_t tempRecv[2];

  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, TEMP_OUT_H, 1,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	b299      	uxth	r1, r3
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9301      	str	r3, [sp, #4]
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2301      	movs	r3, #1
 8001a76:	2241      	movs	r2, #65	; 0x41
 8001a78:	f001 ffc8 	bl	8003a0c <HAL_I2C_Mem_Read>
    tempRecv, 2, HAL_MAX_DELAY);

  temp = (int16_t)(tempRecv[0] << 8 | tempRecv[1]);
 8001a7c:	7b3b      	ldrb	r3, [r7, #12]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	7b7b      	ldrb	r3, [r7, #13]
 8001a84:	b21b      	sxth	r3, r3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	81fb      	strh	r3, [r7, #14]
  temp = temp / 340 + 36.53;
 8001a8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <_ZN8MPU_605017readTempRegistersEv+0x98>)
 8001a90:	fb82 1203 	smull	r1, r2, r2, r3
 8001a94:	11d2      	asrs	r2, r2, #7
 8001a96:	17db      	asrs	r3, r3, #31
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fcf1 	bl	8000484 <__aeabi_i2d>
 8001aa2:	a30d      	add	r3, pc, #52	; (adr r3, 8001ad8 <_ZN8MPU_605017readTempRegistersEv+0x90>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fba0 	bl	80001ec <__adddf3>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7fe ff62 	bl	800097c <__aeabi_d2iz>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	81fb      	strh	r3, [r7, #14]

  imuData->temp = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ac4:	ee07 2a90 	vmov	s15, r2
 8001ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001acc:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	0a3d70a4 	.word	0x0a3d70a4
 8001adc:	404243d7 	.word	0x404243d7
 8001ae0:	60606061 	.word	0x60606061

08001ae4 <_ZN8MPU_605010updateDataEv>:

void MPU_6050::updateData(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  readTempRegisters();
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffab 	bl	8001a48 <_ZN8MPU_605017readTempRegistersEv>
  readGyroRegisters();
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff55 	bl	80019a2 <_ZN8MPU_605017readGyroRegistersEv>
  readAccelRegisters();
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff01 	bl	8001900 <_ZN8MPU_605018readAccelRegistersEv>
  correctData();
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fd8e 	bl	8001620 <_ZN8MPU_605011correctDataEv>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN8MPU_605014resetRegistersEv>:

void MPU_6050::resetRegisters(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af04      	add	r7, sp, #16
 8001b12:	6078      	str	r0, [r7, #4]
  uint8_t resetRegisters[1] = {0b00000111};
 8001b14:	2307      	movs	r3, #7
 8001b16:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), SIGNAL_PATH_RESET, 1,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	b299      	uxth	r1, r3
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	2268      	movs	r2, #104	; 0x68
 8001b38:	f001 fe6e 	bl	8003818 <HAL_I2C_Mem_Write>
    resetRegisters, 1, HAL_MAX_DELAY);
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_ZN8MPU_60509sleepModeEb>:

void MPU_6050::sleepMode(bool sleep)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001b50:	2300      	movs	r3, #0
 8001b52:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	b299      	uxth	r1, r3
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6c:	9302      	str	r3, [sp, #8]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	226b      	movs	r2, #107	; 0x6b
 8001b7c:	f001 ff46 	bl	8003a0c <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0] & 0b10111111) | ((sleep?0x01:0x00) << 6);
 8001b80:	7b3b      	ldrb	r3, [r7, #12]
 8001b82:	b25b      	sxtb	r3, r3
 8001b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b88:	b25b      	sxtb	r3, r3
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d001      	beq.n	8001b94 <_ZN8MPU_60509sleepModeEb+0x50>
 8001b90:	2240      	movs	r2, #64	; 0x40
 8001b92:	e000      	b.n	8001b96 <_ZN8MPU_60509sleepModeEb+0x52>
 8001b94:	2200      	movs	r2, #0
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	b299      	uxth	r1, r3
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	226b      	movs	r2, #107	; 0x6b
 8001bbe:	f001 fe2b 	bl	8003818 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <_ZN8MPU_605017selectClockSourceE12Clock_Select>:

void MPU_6050::selectClockSource(Clock_Select clock_sel)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b088      	sub	sp, #32
 8001bce:	af04      	add	r7, sp, #16
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	b299      	uxth	r1, r3
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	226b      	movs	r2, #107	; 0x6b
 8001c02:	f001 ff03 	bl	8003a0c <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0]&0b11111000) | clock_sel;
 8001c06:	7b3b      	ldrb	r3, [r7, #12]
 8001c08:	f023 0307 	bic.w	r3, r3, #7
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	b299      	uxth	r1, r3
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	226b      	movs	r2, #107	; 0x6b
 8001c36:	f001 fdef 	bl	8003818 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZN8MPU_605011disableTempEb>:

void MPU_6050::disableTemp(bool disable)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b088      	sub	sp, #32
 8001c46:	af04      	add	r7, sp, #16
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001c4e:	2300      	movs	r3, #0
 8001c50:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	b299      	uxth	r1, r3
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2301      	movs	r3, #1
 8001c78:	226b      	movs	r2, #107	; 0x6b
 8001c7a:	f001 fec7 	bl	8003a0c <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0] & 0b11110111) | (disable?0x01:0x00) << 3;
 8001c7e:	7b3b      	ldrb	r3, [r7, #12]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	f023 0308 	bic.w	r3, r3, #8
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d001      	beq.n	8001c92 <_ZN8MPU_605011disableTempEb+0x50>
 8001c8e:	2208      	movs	r2, #8
 8001c90:	e000      	b.n	8001c94 <_ZN8MPU_605011disableTempEb+0x52>
 8001c92:	2200      	movs	r2, #0
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	9302      	str	r3, [sp, #8]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	9301      	str	r3, [sp, #4]
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	226b      	movs	r2, #107	; 0x6b
 8001cbc:	f001 fdac 	bl	8003818 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001cc0:	bf00      	nop
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN8MPU_605017generateNewResultEv>:
  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_2, 1,
    pwr_mgmt2, 1, HAL_MAX_DELAY);
}

IMU_Data* MPU_6050::generateNewResult(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  updateData();
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff07 	bl	8001ae4 <_ZN8MPU_605010updateDataEv>
  return imuData;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>:
#include "MotorControl.hpp"
#include "math.h"
#include "main.h"

Motor::Motor(TIM_HandleTypeDef *timerF, TIM_HandleTypeDef *timerB,
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
  unsigned int channelF, unsigned int channelB):
  timer_f(timerF), timer_b(timerB), channel_f(channelF), channel_b(channelB)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
{}
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZN5Motor4initEv>:

void Motor::init(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	 HAL_TIM_PWM_Start(timer_f, channel_f);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4610      	mov	r0, r2
 8001d52:	f004 fd5f 	bl	8006814 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(timer_b, channel_b);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4610      	mov	r0, r2
 8001d62:	f004 fd57 	bl	8006814 <HAL_TIM_PWM_Start>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <_ZNK5Motor5driveEv>:

void Motor::drive(void) const
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  unsigned int currentChannel;

  TIM_HandleTypeDef *offTimer;
  unsigned int offChannel;

  if (speed > 0)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	dd0c      	ble.n	8001da2 <_ZNK5Motor5driveEv+0x32>
  {
	  offTimer = timer_b;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	617b      	str	r3, [r7, #20]
	  offChannel = channel_b;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	613b      	str	r3, [r7, #16]
	  currentTimer = timer_f;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61fb      	str	r3, [r7, #28]
	  currentChannel = channel_f;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	e013      	b.n	8001dca <_ZNK5Motor5driveEv+0x5a>
  }
  else if (speed <= 0)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	d80b      	bhi.n	8001dca <_ZNK5Motor5driveEv+0x5a>
  {
    
    currentTimer = timer_b;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61fb      	str	r3, [r7, #28]
    currentChannel = channel_b;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
    offTimer = timer_f;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]
    offChannel = channel_f;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	613b      	str	r3, [r7, #16]
  }

  unsigned int pwm_comp = fabs(speed * 100);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dd0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001e68 <_ZNK5Motor5driveEv+0xf8>
 8001dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	f7ff ff81 	bl	8001ce2 <_ZSt4fabsf>
 8001de0:	eef0 7a40 	vmov.f32	s15, s0
 8001de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de8:	ee17 3a90 	vmov	r3, s15
 8001dec:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(currentTimer, currentChannel, pwm_comp);
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d104      	bne.n	8001dfe <_ZNK5Motor5driveEv+0x8e>
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
 8001dfc:	e013      	b.n	8001e26 <_ZNK5Motor5driveEv+0xb6>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d104      	bne.n	8001e0e <_ZNK5Motor5driveEv+0x9e>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e0c:	e00b      	b.n	8001e26 <_ZNK5Motor5driveEv+0xb6>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d104      	bne.n	8001e1e <_ZNK5Motor5driveEv+0xae>
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e1c:	e003      	b.n	8001e26 <_ZNK5Motor5driveEv+0xb6>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <_ZNK5Motor5driveEv+0xc6>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2200      	movs	r2, #0
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34

  return;
 8001e34:	e014      	b.n	8001e60 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d104      	bne.n	8001e46 <_ZNK5Motor5driveEv+0xd6>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
  return;
 8001e44:	e00c      	b.n	8001e60 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d104      	bne.n	8001e56 <_ZNK5Motor5driveEv+0xe6>
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
  return;
 8001e54:	e004      	b.n	8001e60 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
  return;
 8001e5e:	bf00      	nop
}
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	42c80000 	.word	0x42c80000

08001e6c <_ZN5Motor6targetEf>:

void Motor::target(float speed_in)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	ed87 0a00 	vstr	s0, [r7]
  if (speed_in > 1)
 8001e78:	edd7 7a00 	vldr	s15, [r7]
 8001e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	dd04      	ble.n	8001e94 <_ZN5Motor6targetEf+0x28>
    speed = 1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e90:	611a      	str	r2, [r3, #16]
  else if (speed_in < -1)
    speed = -1;
  else
    speed = speed_in;

  return;
 8001e92:	e010      	b.n	8001eb6 <_ZN5Motor6targetEf+0x4a>
  else if (speed_in < -1)
 8001e94:	edd7 7a00 	vldr	s15, [r7]
 8001e98:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea4:	d503      	bpl.n	8001eae <_ZN5Motor6targetEf+0x42>
    speed = -1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_ZN5Motor6targetEf+0x54>)
 8001eaa:	611a      	str	r2, [r3, #16]
  return;
 8001eac:	e003      	b.n	8001eb6 <_ZN5Motor6targetEf+0x4a>
    speed = speed_in;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	611a      	str	r2, [r3, #16]
  return;
 8001eb4:	bf00      	nop
}
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	bf800000 	.word	0xbf800000

08001ec4 <_ZN6ChasisC1EdP5MotorS1_S1_S1_b>:

Chasis::Chasis(double botLen, Motor *r1, Motor *r2, Motor *l1, Motor *l2):
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), bot_length(botLen)
{}

Chasis::Chasis(double botLen, Motor *r1, Motor *r2, Motor *l1, Motor *l2, bool omni):
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6178      	str	r0, [r7, #20]
 8001ecc:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ed0:	6139      	str	r1, [r7, #16]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), bot_length(botLen),
  omniDrive(omni)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	6979      	ldr	r1, [r7, #20]
 8001ef0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ef4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001efe:	761a      	strb	r2, [r3, #24]
{}
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4618      	mov	r0, r3
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_ZN6Chasis4initEv>:

void Chasis::init(void)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  right_1->init();
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff0f 	bl	8001d3e <_ZN5Motor4initEv>
  right_2->init();
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff0a 	bl	8001d3e <_ZN5Motor4initEv>

  left_1->init();
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff05 	bl	8001d3e <_ZN5Motor4initEv>
  left_2->init();
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff00 	bl	8001d3e <_ZN5Motor4initEv>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_ZN6Chasis5steerEff>:

void Chasis::steer(float angular_rate, float speed)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b088      	sub	sp, #32
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f52:	edc7 0a01 	vstr	s1, [r7, #4]
  // speed = (speed_w1 + speed_w2)/2
  // angular_rate = (speed_w1 - speed_w2)/(2*length_bot)
  speed *= 2;
 8001f56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f5e:	edc7 7a01 	vstr	s15, [r7, #4]

  float rotFactor = angular_rate * 2 * bot_length;
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f6a:	ee17 0a90 	vmov	r0, s15
 8001f6e:	f7fe fa9b 	bl	80004a8 <__aeabi_f2d>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001f78:	f7fe faee 	bl	8000558 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fd22 	bl	80009cc <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	61fb      	str	r3, [r7, #28]

  float speed_left = (speed + rotFactor)/2;
 8001f8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa0:	edc7 7a06 	vstr	s15, [r7, #24]
  float speed_right = speed - speed_left;
 8001fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb0:	edc7 7a05 	vstr	s15, [r7, #20]

  left_1->target(speed_left);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	ed97 0a06 	vldr	s0, [r7, #24]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff55 	bl	8001e6c <_ZN5Motor6targetEf>
  left_2->target(speed_left);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	ed97 0a06 	vldr	s0, [r7, #24]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff4e 	bl	8001e6c <_ZN5Motor6targetEf>
  
  right_1->target(speed_right);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	ed97 0a05 	vldr	s0, [r7, #20]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff47 	bl	8001e6c <_ZN5Motor6targetEf>
  right_2->target(speed_right);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	ed97 0a05 	vldr	s0, [r7, #20]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff40 	bl	8001e6c <_ZN5Motor6targetEf>
}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZN6Chasis5driveEv>:
  
  return true;
}

void Chasis::drive(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  right_1->drive();
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff feb5 	bl	8001d70 <_ZNK5Motor5driveEv>
  right_2->drive();
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff feb0 	bl	8001d70 <_ZNK5Motor5driveEv>

  left_1->drive();
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff feab 	bl	8001d70 <_ZNK5Motor5driveEv>
  left_2->drive();
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fea6 	bl	8001d70 <_ZNK5Motor5driveEv>

  return;
 8002024:	bf00      	nop
}
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_UART_RxCpltCallback>:
//{
//  carController.trasnmitCommands();
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	carController.parseReceived();
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <HAL_UART_RxCpltCallback+0x1c>)
 8002036:	f7ff f827 	bl	8001088 <_ZN10Controller13parseReceivedEv>
	carController.receiveCommands();
 800203a:	4803      	ldr	r0, [pc, #12]	; (8002048 <HAL_UART_RxCpltCallback+0x1c>)
 800203c:	f7ff f80e 	bl	800105c <_ZN10Controller15receiveCommandsEv>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000198 	.word	0x20000198

0800204c <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//  right_b.init();
//  right_f.init();
//  left_b.init();
//  left_f.init();
  carController.loop();
 8002050:	480e      	ldr	r0, [pc, #56]	; (800208c <_Z16MX_FREERTOS_Initv+0x40>)
 8002052:	f7fe ffa5 	bl	8000fa0 <_ZN10Controller4loopEv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <_Z16MX_FREERTOS_Initv+0x44>)
 8002058:	2100      	movs	r1, #0
 800205a:	480e      	ldr	r0, [pc, #56]	; (8002094 <_Z16MX_FREERTOS_Initv+0x48>)
 800205c:	f006 f934 	bl	80082c8 <osThreadNew>
 8002060:	4603      	mov	r3, r0
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <_Z16MX_FREERTOS_Initv+0x4c>)
 8002064:	6013      	str	r3, [r2, #0]

  /* creation of controlSpeed */
  controlSpeedHandle = osThreadNew(StartTask02, NULL, &controlSpeed_attributes);
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <_Z16MX_FREERTOS_Initv+0x50>)
 8002068:	2100      	movs	r1, #0
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <_Z16MX_FREERTOS_Initv+0x54>)
 800206c:	f006 f92c 	bl	80082c8 <osThreadNew>
 8002070:	4603      	mov	r3, r0
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <_Z16MX_FREERTOS_Initv+0x58>)
 8002074:	6013      	str	r3, [r2, #0]

  /* creation of comms */
  commsHandle = osThreadNew(startComms, NULL, &comms_attributes);
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <_Z16MX_FREERTOS_Initv+0x5c>)
 8002078:	2100      	movs	r1, #0
 800207a:	480c      	ldr	r0, [pc, #48]	; (80020ac <_Z16MX_FREERTOS_Initv+0x60>)
 800207c:	f006 f924 	bl	80082c8 <osThreadNew>
 8002080:	4603      	mov	r3, r0
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <_Z16MX_FREERTOS_Initv+0x64>)
 8002084:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000198 	.word	0x20000198
 8002090:	0800b0a0 	.word	0x0800b0a0
 8002094:	080020b5 	.word	0x080020b5
 8002098:	200001f8 	.word	0x200001f8
 800209c:	0800b0c4 	.word	0x0800b0c4
 80020a0:	080020d1 	.word	0x080020d1
 80020a4:	200001fc 	.word	0x200001fc
 80020a8:	0800b0e8 	.word	0x0800b0e8
 80020ac:	080020ed 	.word	0x080020ed
 80020b0:	20000200 	.word	0x20000200

080020b4 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    car.drive();
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <_Z16StartDefaultTaskPv+0x18>)
 80020be:	f7ff ff99 	bl	8001ff4 <_ZN6Chasis5driveEv>
	  osDelay(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f006 f992 	bl	80083ec <osDelay>
    car.drive();
 80020c8:	e7f8      	b.n	80020bc <_Z16StartDefaultTaskPv+0x8>
 80020ca:	bf00      	nop
 80020cc:	20000178 	.word	0x20000178

080020d0 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    carController.loop();
 80020d8:	4803      	ldr	r0, [pc, #12]	; (80020e8 <_Z11StartTask02Pv+0x18>)
 80020da:	f7fe ff61 	bl	8000fa0 <_ZN10Controller4loopEv>
    osDelay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f006 f984 	bl	80083ec <osDelay>
    carController.loop();
 80020e4:	e7f8      	b.n	80020d8 <_Z11StartTask02Pv+0x8>
 80020e6:	bf00      	nop
 80020e8:	20000198 	.word	0x20000198

080020ec <_Z10startCommsPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMicroROS */
void startComms(void *argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startComms */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 80020f4:	2001      	movs	r0, #1
 80020f6:	f006 f979 	bl	80083ec <osDelay>
 80020fa:	e7fb      	b.n	80020f4 <_Z10startCommsPv+0x8>
 80020fc:	0000      	movs	r0, r0
	...

08002100 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END startComms */
}
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d149      	bne.n	80021a4 <_Z41__static_initialization_and_destruction_0ii+0xa4>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002116:	4293      	cmp	r3, r2
 8002118:	d144      	bne.n	80021a4 <_Z41__static_initialization_and_destruction_0ii+0xa4>
Motor right_b(&htim1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_4);
 800211a:	230c      	movs	r3, #12
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002122:	492c      	ldr	r1, [pc, #176]	; (80021d4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002124:	482c      	ldr	r0, [pc, #176]	; (80021d8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002126:	f7ff fdec 	bl	8001d02 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor right_f(&htim3, &htim4, TIM_CHANNEL_3, TIM_CHANNEL_2);
 800212a:	2304      	movs	r3, #4
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2308      	movs	r3, #8
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002132:	4927      	ldr	r1, [pc, #156]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002134:	482a      	ldr	r0, [pc, #168]	; (80021e0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002136:	f7ff fde4 	bl	8001d02 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor left_f(&htim3, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800213a:	2304      	movs	r3, #4
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002142:	4923      	ldr	r1, [pc, #140]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002144:	4828      	ldr	r0, [pc, #160]	; (80021e8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002146:	f7ff fddc 	bl	8001d02 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor left_b(&htim4, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800214a:	2304      	movs	r3, #4
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002152:	4922      	ldr	r1, [pc, #136]	; (80021dc <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002154:	4825      	ldr	r0, [pc, #148]	; (80021ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002156:	f7ff fdd4 	bl	8001d02 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
MPU_6050 mpu1(true, &hi2c1, GPIOC, GPIO_PIN_15);
 800215a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002164:	2101      	movs	r1, #1
 8002166:	4824      	ldr	r0, [pc, #144]	; (80021f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002168:	f7ff f964 	bl	8001434 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>
MPU_6050 mpu2(false, &hi2c1, GPIOB, GPIO_PIN_2);
 800216c:	2304      	movs	r3, #4
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002172:	4a20      	ldr	r2, [pc, #128]	; (80021f4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002174:	2100      	movs	r1, #0
 8002176:	4822      	ldr	r0, [pc, #136]	; (8002200 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002178:	f7ff f95c 	bl	8001434 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>
Chasis car(lenBot, &right_b, &right_f, &left_b, &left_f, false);
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002188:	4913      	ldr	r1, [pc, #76]	; (80021d8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800218a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80021c8 <_Z41__static_initialization_and_destruction_0ii+0xc8>
 800218e:	481d      	ldr	r0, [pc, #116]	; (8002204 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002190:	f7ff fe98 	bl	8001ec4 <_ZN6ChasisC1EdP5MotorS1_S1_S1_b>
Controller carController(&huart1, &car, &mpu1, &mpu2);
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 800219a:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 800219c:	491a      	ldr	r1, [pc, #104]	; (8002208 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 800219e:	481b      	ldr	r0, [pc, #108]	; (800220c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 80021a0:	f7fe fe08 	bl	8000db4 <_ZN10ControllerC1EP20__UART_HandleTypeDefP6ChasisP8MPU_6050S5_>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d105      	bne.n	80021c0 <_Z41__static_initialization_and_destruction_0ii+0xc0>
MPU_6050 mpu2(false, &hi2c1, GPIOB, GPIO_PIN_2);
 80021b4:	4812      	ldr	r0, [pc, #72]	; (8002200 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80021b6:	f7ff f96d 	bl	8001494 <_ZN8MPU_6050D1Ev>
MPU_6050 mpu1(true, &hi2c1, GPIOC, GPIO_PIN_15);
 80021ba:	480f      	ldr	r0, [pc, #60]	; (80021f8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80021bc:	f7ff f96a 	bl	8001494 <_ZN8MPU_6050D1Ev>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0e560419 	.word	0x0e560419
 80021cc:	3fd1b22d 	.word	0x3fd1b22d
 80021d0:	200002ec 	.word	0x200002ec
 80021d4:	2000025c 	.word	0x2000025c
 80021d8:	20000094 	.word	0x20000094
 80021dc:	20000334 	.word	0x20000334
 80021e0:	200000a8 	.word	0x200000a8
 80021e4:	200002a4 	.word	0x200002a4
 80021e8:	200000bc 	.word	0x200000bc
 80021ec:	200000d0 	.word	0x200000d0
 80021f0:	40020800 	.word	0x40020800
 80021f4:	20000204 	.word	0x20000204
 80021f8:	200000e4 	.word	0x200000e4
 80021fc:	40020400 	.word	0x40020400
 8002200:	2000012c 	.word	0x2000012c
 8002204:	20000178 	.word	0x20000178
 8002208:	2000037c 	.word	0x2000037c
 800220c:	20000198 	.word	0x20000198

08002210 <_GLOBAL__sub_I_right_b>:
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
 8002214:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff ff71 	bl	8002100 <_Z41__static_initialization_and_destruction_0ii>
 800221e:	bd80      	pop	{r7, pc}

08002220 <_GLOBAL__sub_D_right_b>:
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
 8002224:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002228:	2000      	movs	r0, #0
 800222a:	f7ff ff69 	bl	8002100 <_Z41__static_initialization_and_destruction_0ii>
 800222e:	bd80      	pop	{r7, pc}

08002230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <MX_GPIO_Init+0x114>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <MX_GPIO_Init+0x114>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <MX_GPIO_Init+0x114>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <MX_GPIO_Init+0x114>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a36      	ldr	r2, [pc, #216]	; (8002344 <MX_GPIO_Init+0x114>)
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b34      	ldr	r3, [pc, #208]	; (8002344 <MX_GPIO_Init+0x114>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <MX_GPIO_Init+0x114>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <MX_GPIO_Init+0x114>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <MX_GPIO_Init+0x114>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MX_GPIO_Init+0x114>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <MX_GPIO_Init+0x114>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b26      	ldr	r3, [pc, #152]	; (8002344 <MX_GPIO_Init+0x114>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80022bc:	4822      	ldr	r0, [pc, #136]	; (8002348 <MX_GPIO_Init+0x118>)
 80022be:	f001 f94d 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2104      	movs	r1, #4
 80022c6:	4821      	ldr	r0, [pc, #132]	; (800234c <MX_GPIO_Init+0x11c>)
 80022c8:	f001 f948 	bl	800355c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022cc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4818      	ldr	r0, [pc, #96]	; (8002348 <MX_GPIO_Init+0x118>)
 80022e6:	f000 ffb5 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4812      	ldr	r0, [pc, #72]	; (8002348 <MX_GPIO_Init+0x118>)
 8002300:	f000 ffa8 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002304:	2304      	movs	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	480c      	ldr	r0, [pc, #48]	; (800234c <MX_GPIO_Init+0x11c>)
 800231c:	f000 ff9a 	bl	8003254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_GPIO_Init+0x11c>)
 8002336:	f000 ff8d 	bl	8003254 <HAL_GPIO_Init>

}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	; 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40020800 	.word	0x40020800
 800234c:	40020400 	.word	0x40020400

08002350 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <MX_I2C1_Init+0x54>)
 8002358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800235a:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_I2C1_Init+0x50>)
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <MX_I2C1_Init+0x58>)
 800235e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002366:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_I2C1_Init+0x50>)
 800236e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <MX_I2C1_Init+0x50>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002380:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <MX_I2C1_Init+0x50>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <MX_I2C1_Init+0x50>)
 800238e:	f001 f8ff 	bl	8003590 <HAL_I2C_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002398:	f000 f8ee 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000204 	.word	0x20000204
 80023a4:	40005400 	.word	0x40005400
 80023a8:	000186a0 	.word	0x000186a0

080023ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a21      	ldr	r2, [pc, #132]	; (8002450 <HAL_I2C_MspInit+0xa4>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d13c      	bne.n	8002448 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_I2C_MspInit+0xa8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_I2C_MspInit+0xa8>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_I2C_MspInit+0xa8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f0:	2312      	movs	r3, #18
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023fc:	2304      	movs	r3, #4
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <HAL_I2C_MspInit+0xac>)
 8002408:	f000 ff24 	bl	8003254 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <HAL_I2C_MspInit+0xa8>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a0f      	ldr	r2, [pc, #60]	; (8002454 <HAL_I2C_MspInit+0xa8>)
 8002416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_I2C_MspInit+0xa8>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002428:	2200      	movs	r2, #0
 800242a:	2105      	movs	r1, #5
 800242c:	201f      	movs	r0, #31
 800242e:	f000 fe3a 	bl	80030a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002432:	201f      	movs	r0, #31
 8002434:	f000 fe53 	bl	80030de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2105      	movs	r1, #5
 800243c:	2020      	movs	r0, #32
 800243e:	f000 fe32 	bl	80030a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002442:	2020      	movs	r0, #32
 8002444:	f000 fe4b 	bl	80030de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40005400 	.word	0x40005400
 8002454:	40023800 	.word	0x40023800
 8002458:	40020400 	.word	0x40020400

0800245c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002460:	f000 fcd4 	bl	8002e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002464:	f000 f820 	bl	80024a8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002468:	f7ff fee2 	bl	8002230 <MX_GPIO_Init>
  MX_TIM1_Init();
 800246c:	f000 f962 	bl	8002734 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002470:	f000 f9e4 	bl	800283c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002474:	f000 fa3a 	bl	80028ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8002478:	f000 fab2 	bl	80029e0 <MX_TIM4_Init>
  MX_I2C1_Init();
 800247c:	f7ff ff68 	bl	8002350 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002480:	f000 fc20 	bl	8002cc4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002484:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <main+0x48>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <main+0x48>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0220 	orr.w	r2, r2, #32
 8002492:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002494:	f005 fece 	bl	8008234 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002498:	f7ff fdd8 	bl	800204c <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 800249c:	f005 feee 	bl	800827c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <main+0x44>
 80024a2:	bf00      	nop
 80024a4:	2000037c 	.word	0x2000037c

080024a8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b094      	sub	sp, #80	; 0x50
 80024ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ae:	f107 0320 	add.w	r3, r7, #32
 80024b2:	2230      	movs	r2, #48	; 0x30
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f008 fc7e 	bl	800adb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <_Z18SystemClock_Configv+0xc8>)
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	4a26      	ldr	r2, [pc, #152]	; (8002570 <_Z18SystemClock_Configv+0xc8>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024da:	6413      	str	r3, [r2, #64]	; 0x40
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <_Z18SystemClock_Configv+0xc8>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <_Z18SystemClock_Configv+0xcc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a20      	ldr	r2, [pc, #128]	; (8002574 <_Z18SystemClock_Configv+0xcc>)
 80024f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <_Z18SystemClock_Configv+0xcc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002508:	2301      	movs	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800250c:	2310      	movs	r3, #16
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	4618      	mov	r0, r3
 800251a:	f003 fcd3 	bl	8005ec4 <HAL_RCC_OscConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 800252e:	f000 f823 	bl	8002578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002532:	230f      	movs	r3, #15
 8002534:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f003 ff31 	bl	80063b4 <HAL_RCC_ClockConfig>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8002562:	f000 f809 	bl	8002578 <Error_Handler>
  }
}
 8002566:	bf00      	nop
 8002568:	3750      	adds	r7, #80	; 0x50
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000

08002578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800257c:	b672      	cpsid	i
}
 800257e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002580:	e7fe      	b.n	8002580 <Error_Handler+0x8>
	...

08002584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_MspInit+0x54>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_MspInit+0x54>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_MspInit+0x54>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_MspInit+0x54>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_MspInit+0x54>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_MspInit+0x54>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	210f      	movs	r1, #15
 80025c6:	f06f 0001 	mvn.w	r0, #1
 80025ca:	f000 fd6c 	bl	80030a6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <NMI_Handler+0x4>

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f000 fc50 	bl	8002eb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002610:	f007 fafa 	bl	8009c08 <xTaskGetSchedulerState>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800261a:	f008 f8e5 	bl	800a7e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <I2C1_EV_IRQHandler+0x10>)
 800262a:	f001 fc15 	bl	8003e58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000204 	.word	0x20000204

08002638 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <I2C1_ER_IRQHandler+0x10>)
 800263e:	f001 fd7c 	bl	800413a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000204 	.word	0x20000204

0800264c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <USART1_IRQHandler+0x10>)
 8002652:	f004 fe53 	bl	80072fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	2000037c 	.word	0x2000037c

08002660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
	return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_kill>:

int _kill(int pid, int sig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800267a:	f008 fb55 	bl	800ad28 <__errno>
 800267e:	4603      	mov	r3, r0
 8002680:	2216      	movs	r2, #22
 8002682:	601a      	str	r2, [r3, #0]
	return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_exit>:

void _exit (int status)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ffe7 	bl	8002670 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026a2:	e7fe      	b.n	80026a2 <_exit+0x12>

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f008 fb28 	bl	800ad28 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20020000 	.word	0x20020000
 8002704:	00000400 	.word	0x00000400
 8002708:	20000258 	.word	0x20000258
 800270c:	20004d28 	.word	0x20004d28

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	; (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b092      	sub	sp, #72	; 0x48
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
 8002754:	615a      	str	r2, [r3, #20]
 8002756:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2220      	movs	r2, #32
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f008 fb2a 	bl	800adb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002764:	4b33      	ldr	r3, [pc, #204]	; (8002834 <MX_TIM1_Init+0x100>)
 8002766:	4a34      	ldr	r2, [pc, #208]	; (8002838 <MX_TIM1_Init+0x104>)
 8002768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <MX_TIM1_Init+0x100>)
 800276c:	2200      	movs	r2, #0
 800276e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <MX_TIM1_Init+0x100>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002776:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <MX_TIM1_Init+0x100>)
 8002778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <MX_TIM1_Init+0x100>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <MX_TIM1_Init+0x100>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <MX_TIM1_Init+0x100>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002790:	4828      	ldr	r0, [pc, #160]	; (8002834 <MX_TIM1_Init+0x100>)
 8002792:	f003 ffef 	bl	8006774 <HAL_TIM_PWM_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800279c:	f7ff feec 	bl	8002578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ac:	4619      	mov	r1, r3
 80027ae:	4821      	ldr	r0, [pc, #132]	; (8002834 <MX_TIM1_Init+0x100>)
 80027b0:	f004 fbd4 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80027ba:	f7ff fedd 	bl	8002578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027be:	2360      	movs	r3, #96	; 0x60
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027ca:	2300      	movs	r3, #0
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027de:	2200      	movs	r2, #0
 80027e0:	4619      	mov	r1, r3
 80027e2:	4814      	ldr	r0, [pc, #80]	; (8002834 <MX_TIM1_Init+0x100>)
 80027e4:	f004 f8c6 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80027ee:	f7ff fec3 	bl	8002578 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800280a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <MX_TIM1_Init+0x100>)
 8002816:	f004 fc0f 	bl	8007038 <HAL_TIMEx_ConfigBreakDeadTime>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002820:	f7ff feaa 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <MX_TIM1_Init+0x100>)
 8002826:	f000 f9a1 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 800282a:	bf00      	nop
 800282c:	3748      	adds	r7, #72	; 0x48
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000025c 	.word	0x2000025c
 8002838:	40010000 	.word	0x40010000

0800283c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002842:	f107 0320 	add.w	r3, r7, #32
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	615a      	str	r2, [r3, #20]
 800285c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <MX_TIM2_Init+0xac>)
 8002860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <MX_TIM2_Init+0xac>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <MX_TIM2_Init+0xac>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <MX_TIM2_Init+0xac>)
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <MX_TIM2_Init+0xac>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <MX_TIM2_Init+0xac>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002886:	4818      	ldr	r0, [pc, #96]	; (80028e8 <MX_TIM2_Init+0xac>)
 8002888:	f003 ff74 	bl	8006774 <HAL_TIM_PWM_Init>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002892:	f7ff fe71 	bl	8002578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800289e:	f107 0320 	add.w	r3, r7, #32
 80028a2:	4619      	mov	r1, r3
 80028a4:	4810      	ldr	r0, [pc, #64]	; (80028e8 <MX_TIM2_Init+0xac>)
 80028a6:	f004 fb59 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80028b0:	f7ff fe62 	bl	8002578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b4:	2360      	movs	r3, #96	; 0x60
 80028b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2204      	movs	r2, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4807      	ldr	r0, [pc, #28]	; (80028e8 <MX_TIM2_Init+0xac>)
 80028cc:	f004 f852 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80028d6:	f7ff fe4f 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028da:	4803      	ldr	r0, [pc, #12]	; (80028e8 <MX_TIM2_Init+0xac>)
 80028dc:	f000 f946 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200002a4 	.word	0x200002a4

080028ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800290e:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <MX_TIM3_Init+0xf0>)
 8002912:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291a:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <MX_TIM3_Init+0xec>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002920:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <MX_TIM3_Init+0xec>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002934:	4828      	ldr	r0, [pc, #160]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002936:	f003 ff1d 	bl	8006774 <HAL_TIM_PWM_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002940:	f7ff fe1a 	bl	8002578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4619      	mov	r1, r3
 8002952:	4821      	ldr	r0, [pc, #132]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002954:	f004 fb02 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800295e:	f7ff fe0b 	bl	8002578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002962:	2360      	movs	r3, #96	; 0x60
 8002964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2200      	movs	r2, #0
 8002976:	4619      	mov	r1, r3
 8002978:	4817      	ldr	r0, [pc, #92]	; (80029d8 <MX_TIM3_Init+0xec>)
 800297a:	f003 fffb 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002984:	f7ff fdf8 	bl	8002578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2204      	movs	r2, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4812      	ldr	r0, [pc, #72]	; (80029d8 <MX_TIM3_Init+0xec>)
 8002990:	f003 fff0 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800299a:	f7ff fded 	bl	8002578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	2208      	movs	r2, #8
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM3_Init+0xec>)
 80029a6:	f003 ffe5 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80029b0:	f7ff fde2 	bl	8002578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	220c      	movs	r2, #12
 80029b8:	4619      	mov	r1, r3
 80029ba:	4807      	ldr	r0, [pc, #28]	; (80029d8 <MX_TIM3_Init+0xec>)
 80029bc:	f003 ffda 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80029c6:	f7ff fdd7 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029ca:	4803      	ldr	r0, [pc, #12]	; (80029d8 <MX_TIM3_Init+0xec>)
 80029cc:	f000 f8ce 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200002ec 	.word	0x200002ec
 80029dc:	40000400 	.word	0x40000400

080029e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	615a      	str	r2, [r3, #20]
 8002a00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <MX_TIM4_Init+0xc4>)
 8002a06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002a28:	481d      	ldr	r0, [pc, #116]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a2a:	f003 fea3 	bl	8006774 <HAL_TIM_PWM_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002a34:	f7ff fda0 	bl	8002578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a40:	f107 0320 	add.w	r3, r7, #32
 8002a44:	4619      	mov	r1, r3
 8002a46:	4816      	ldr	r0, [pc, #88]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a48:	f004 fa88 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002a52:	f7ff fd91 	bl	8002578 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a56:	2360      	movs	r3, #96	; 0x60
 8002a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a6e:	f003 ff81 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002a78:	f7ff fd7e 	bl	8002578 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a84:	f003 ff76 	bl	8006974 <HAL_TIM_PWM_ConfigChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002a8e:	f7ff fd73 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a92:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <MX_TIM4_Init+0xc0>)
 8002a94:	f000 f86a 	bl	8002b6c <HAL_TIM_MspPostInit>

}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000334 	.word	0x20000334
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a29      	ldr	r2, [pc, #164]	; (8002b5c <HAL_TIM_PWM_MspInit+0xb4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ad6:	e03a      	b.n	8002b4e <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6413      	str	r3, [r2, #64]	; 0x40
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
}
 8002afe:	e026      	b.n	8002b4e <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_TIM_PWM_MspInit+0xbc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10e      	bne.n	8002b28 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	e012      	b.n	8002b4e <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM4)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0e      	ldr	r2, [pc, #56]	; (8002b68 <HAL_TIM_PWM_MspInit+0xc0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d10d      	bne.n	8002b4e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a09      	ldr	r2, [pc, #36]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <HAL_TIM_PWM_MspInit+0xb8>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800

08002b6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08c      	sub	sp, #48	; 0x30
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a48      	ldr	r2, [pc, #288]	; (8002cac <HAL_TIM_MspPostInit+0x140>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d11f      	bne.n	8002bce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	4b47      	ldr	r3, [pc, #284]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	483b      	ldr	r0, [pc, #236]	; (8002cb4 <HAL_TIM_MspPostInit+0x148>)
 8002bc8:	f000 fb44 	bl	8003254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002bcc:	e06a      	b.n	8002ca4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d11e      	bne.n	8002c16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	6313      	str	r3, [r2, #48]	; 0x30
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c04:	2301      	movs	r3, #1
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <HAL_TIM_MspPostInit+0x14c>)
 8002c10:	f000 fb20 	bl	8003254 <HAL_GPIO_Init>
}
 8002c14:	e046      	b.n	8002ca4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <HAL_TIM_MspPostInit+0x150>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d11e      	bne.n	8002c5e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	4a21      	ldr	r2, [pc, #132]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c30:	4b1f      	ldr	r3, [pc, #124]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c3c:	2333      	movs	r3, #51	; 0x33
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	4619      	mov	r1, r3
 8002c56:	4818      	ldr	r0, [pc, #96]	; (8002cb8 <HAL_TIM_MspPostInit+0x14c>)
 8002c58:	f000 fafc 	bl	8003254 <HAL_GPIO_Init>
}
 8002c5c:	e022      	b.n	8002ca4 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_TIM_MspPostInit+0x154>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d11d      	bne.n	8002ca4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002c72:	f043 0302 	orr.w	r3, r3, #2
 8002c76:	6313      	str	r3, [r2, #48]	; 0x30
 8002c78:	4b0d      	ldr	r3, [pc, #52]	; (8002cb0 <HAL_TIM_MspPostInit+0x144>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c84:	23c0      	movs	r3, #192	; 0xc0
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c94:	2302      	movs	r3, #2
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <HAL_TIM_MspPostInit+0x14c>)
 8002ca0:	f000 fad8 	bl	8003254 <HAL_GPIO_Init>
}
 8002ca4:	bf00      	nop
 8002ca6:	3730      	adds	r7, #48	; 0x30
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40000400 	.word	0x40000400
 8002cc0:	40000800 	.word	0x40000800

08002cc4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <MX_USART1_UART_Init+0x50>)
 8002ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cea:	220c      	movs	r2, #12
 8002cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cfa:	4805      	ldr	r0, [pc, #20]	; (8002d10 <MX_USART1_UART_Init+0x4c>)
 8002cfc:	f004 f9ee 	bl	80070dc <HAL_UART_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d06:	f7ff fc37 	bl	8002578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2000037c 	.word	0x2000037c
 8002d14:	40011000 	.word	0x40011000

08002d18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_UART_MspInit+0x94>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d134      	bne.n	8002da4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <HAL_UART_MspInit+0x98>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <HAL_UART_MspInit+0x98>)
 8002d44:	f043 0310 	orr.w	r3, r3, #16
 8002d48:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4a:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_UART_MspInit+0x98>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_UART_MspInit+0x98>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <HAL_UART_MspInit+0x98>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_UART_MspInit+0x98>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d84:	2307      	movs	r3, #7
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4809      	ldr	r0, [pc, #36]	; (8002db4 <HAL_UART_MspInit+0x9c>)
 8002d90:	f000 fa60 	bl	8003254 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d94:	2200      	movs	r2, #0
 8002d96:	2105      	movs	r1, #5
 8002d98:	2025      	movs	r0, #37	; 0x25
 8002d9a:	f000 f984 	bl	80030a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d9e:	2025      	movs	r0, #37	; 0x25
 8002da0:	f000 f99d 	bl	80030de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002da4:	bf00      	nop
 8002da6:	3728      	adds	r7, #40	; 0x28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020000 	.word	0x40020000

08002db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dbe:	490e      	ldr	r1, [pc, #56]	; (8002df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dc0:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc4:	e002      	b.n	8002dcc <LoopCopyDataInit>

08002dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dca:	3304      	adds	r3, #4

08002dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd0:	d3f9      	bcc.n	8002dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dd4:	4c0b      	ldr	r4, [pc, #44]	; (8002e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd8:	e001      	b.n	8002dde <LoopFillZerobss>

08002dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ddc:	3204      	adds	r2, #4

08002dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de0:	d3fb      	bcc.n	8002dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002de2:	f7ff fc95 	bl	8002710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002de6:	f007 ffa5 	bl	800ad34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dea:	f7ff fb37 	bl	800245c <main>
  bx  lr    
 8002dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002dfc:	0800b13c 	.word	0x0800b13c
  ldr r2, =_sbss
 8002e00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002e04:	20004d28 	.word	0x20004d28

08002e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e08:	e7fe      	b.n	8002e08 <ADC_IRQHandler>
	...

08002e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e10:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <HAL_Init+0x40>)
 8002e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_Init+0x40>)
 8002e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <HAL_Init+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <HAL_Init+0x40>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f000 f92b 	bl	8003090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3a:	200f      	movs	r0, #15
 8002e3c:	f000 f808 	bl	8002e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e40:	f7ff fba0 	bl	8002584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00

08002e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_InitTick+0x54>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_InitTick+0x58>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f943 	bl	80030fa <HAL_SYSTICK_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00e      	b.n	8002e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d80a      	bhi.n	8002e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f000 f90b 	bl	80030a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e90:	4a06      	ldr	r2, [pc, #24]	; (8002eac <HAL_InitTick+0x5c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	20000004 	.word	0x20000004

08002eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x20>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000008 	.word	0x20000008
 8002ed4:	200003c0 	.word	0x200003c0

08002ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_GetTick+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	200003c0 	.word	0x200003c0

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f22:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60d3      	str	r3, [r2, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4907      	ldr	r1, [pc, #28]	; (8002f8c <__NVIC_EnableIRQ+0x38>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800305c:	d301      	bcc.n	8003062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305e:	2301      	movs	r3, #1
 8003060:	e00f      	b.n	8003082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <SysTick_Config+0x40>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306a:	210f      	movs	r1, #15
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f7ff ff8e 	bl	8002f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <SysTick_Config+0x40>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <SysTick_Config+0x40>)
 800307c:	2207      	movs	r2, #7
 800307e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff29 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b8:	f7ff ff3e 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 80030bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff ff8e 	bl	8002fe4 <NVIC_EncodePriority>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff5d 	bl	8002f90 <__NVIC_SetPriority>
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff31 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffa2 	bl	800304c <SysTick_Config>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff feda 	bl	8002ed8 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d008      	beq.n	8003144 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e052      	b.n	80031ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0216 	bic.w	r2, r2, #22
 8003152:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003162:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d103      	bne.n	8003174 <HAL_DMA_Abort+0x62>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0208 	bic.w	r2, r2, #8
 8003182:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003194:	e013      	b.n	80031be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003196:	f7ff fe9f 	bl	8002ed8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d90c      	bls.n	80031be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2203      	movs	r2, #3
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e015      	b.n	80031ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1e4      	bne.n	8003196 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	223f      	movs	r2, #63	; 0x3f
 80031d2:	409a      	lsls	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d004      	beq.n	8003210 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2280      	movs	r2, #128	; 0x80
 800320a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e00c      	b.n	800322a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2205      	movs	r2, #5
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003244:	b2db      	uxtb	r3, r3
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e159      	b.n	8003524 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	429a      	cmp	r2, r3
 800328a:	f040 8148 	bne.w	800351e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d005      	beq.n	80032a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d130      	bne.n	8003308 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2203      	movs	r2, #3
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 0201 	and.w	r2, r3, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b03      	cmp	r3, #3
 8003312:	d017      	beq.n	8003344 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	2203      	movs	r2, #3
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d123      	bne.n	8003398 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	220f      	movs	r2, #15
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	08da      	lsrs	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3208      	adds	r2, #8
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a2 	beq.w	800351e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_GPIO_Init+0x2e8>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_GPIO_Init+0x2e8>)
 80033e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b54      	ldr	r3, [pc, #336]	; (800353c <HAL_GPIO_Init+0x2e8>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033f6:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_GPIO_Init+0x2ec>)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a49      	ldr	r2, [pc, #292]	; (8003544 <HAL_GPIO_Init+0x2f0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d019      	beq.n	8003456 <HAL_GPIO_Init+0x202>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a48      	ldr	r2, [pc, #288]	; (8003548 <HAL_GPIO_Init+0x2f4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_GPIO_Init+0x1fe>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a47      	ldr	r2, [pc, #284]	; (800354c <HAL_GPIO_Init+0x2f8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00d      	beq.n	800344e <HAL_GPIO_Init+0x1fa>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_GPIO_Init+0x2fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <HAL_GPIO_Init+0x1f6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a45      	ldr	r2, [pc, #276]	; (8003554 <HAL_GPIO_Init+0x300>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d101      	bne.n	8003446 <HAL_GPIO_Init+0x1f2>
 8003442:	2304      	movs	r3, #4
 8003444:	e008      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003446:	2307      	movs	r3, #7
 8003448:	e006      	b.n	8003458 <HAL_GPIO_Init+0x204>
 800344a:	2303      	movs	r3, #3
 800344c:	e004      	b.n	8003458 <HAL_GPIO_Init+0x204>
 800344e:	2302      	movs	r3, #2
 8003450:	e002      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_GPIO_Init+0x204>
 8003456:	2300      	movs	r3, #0
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f002 0203 	and.w	r2, r2, #3
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	4093      	lsls	r3, r2
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003468:	4935      	ldr	r1, [pc, #212]	; (8003540 <HAL_GPIO_Init+0x2ec>)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	3302      	adds	r3, #2
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_GPIO_Init+0x304>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800349a:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <HAL_GPIO_Init+0x304>)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034a0:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034c4:	4a24      	ldr	r2, [pc, #144]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ca:	4b23      	ldr	r3, [pc, #140]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ee:	4a1a      	ldr	r2, [pc, #104]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034f4:	4b18      	ldr	r3, [pc, #96]	; (8003558 <HAL_GPIO_Init+0x304>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <HAL_GPIO_Init+0x304>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3301      	adds	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	f67f aea2 	bls.w	8003270 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	; 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800
 8003540:	40013800 	.word	0x40013800
 8003544:	40020000 	.word	0x40020000
 8003548:	40020400 	.word	0x40020400
 800354c:	40020800 	.word	0x40020800
 8003550:	40020c00 	.word	0x40020c00
 8003554:	40021000 	.word	0x40021000
 8003558:	40013c00 	.word	0x40013c00

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e12b      	b.n	80037fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fe fef8 	bl	80023ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f4:	f003 f896 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 80035f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4a81      	ldr	r2, [pc, #516]	; (8003804 <HAL_I2C_Init+0x274>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d807      	bhi.n	8003614 <HAL_I2C_Init+0x84>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a80      	ldr	r2, [pc, #512]	; (8003808 <HAL_I2C_Init+0x278>)
 8003608:	4293      	cmp	r3, r2
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e006      	b.n	8003622 <HAL_I2C_Init+0x92>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4a7d      	ldr	r2, [pc, #500]	; (800380c <HAL_I2C_Init+0x27c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	bf94      	ite	ls
 800361c:	2301      	movls	r3, #1
 800361e:	2300      	movhi	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e0e7      	b.n	80037fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4a78      	ldr	r2, [pc, #480]	; (8003810 <HAL_I2C_Init+0x280>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0c9b      	lsrs	r3, r3, #18
 8003634:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a6a      	ldr	r2, [pc, #424]	; (8003804 <HAL_I2C_Init+0x274>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d802      	bhi.n	8003664 <HAL_I2C_Init+0xd4>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3301      	adds	r3, #1
 8003662:	e009      	b.n	8003678 <HAL_I2C_Init+0xe8>
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	4a69      	ldr	r2, [pc, #420]	; (8003814 <HAL_I2C_Init+0x284>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	099b      	lsrs	r3, r3, #6
 8003676:	3301      	adds	r3, #1
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	430b      	orrs	r3, r1
 800367e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800368a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	495c      	ldr	r1, [pc, #368]	; (8003804 <HAL_I2C_Init+0x274>)
 8003694:	428b      	cmp	r3, r1
 8003696:	d819      	bhi.n	80036cc <HAL_I2C_Init+0x13c>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1e59      	subs	r1, r3, #1
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a6:	1c59      	adds	r1, r3, #1
 80036a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036ac:	400b      	ands	r3, r1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_I2C_Init+0x138>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e59      	subs	r1, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c6:	e051      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036c8:	2304      	movs	r3, #4
 80036ca:	e04f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d111      	bne.n	80036f8 <HAL_I2C_Init+0x168>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e012      	b.n	800371e <HAL_I2C_Init+0x18e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_Init+0x196>
 8003722:	2301      	movs	r3, #1
 8003724:	e022      	b.n	800376c <HAL_I2C_Init+0x1dc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10e      	bne.n	800374c <HAL_I2C_Init+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1e58      	subs	r0, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	440b      	add	r3, r1
 800373c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003740:	3301      	adds	r3, #1
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374a:	e00f      	b.n	800376c <HAL_I2C_Init+0x1dc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	1e58      	subs	r0, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	0099      	lsls	r1, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003762:	3301      	adds	r3, #1
 8003764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003768:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800379a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6911      	ldr	r1, [r2, #16]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	4311      	orrs	r1, r2
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695a      	ldr	r2, [r3, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	000186a0 	.word	0x000186a0
 8003808:	001e847f 	.word	0x001e847f
 800380c:	003d08ff 	.word	0x003d08ff
 8003810:	431bde83 	.word	0x431bde83
 8003814:	10624dd3 	.word	0x10624dd3

08003818 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af02      	add	r7, sp, #8
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	4608      	mov	r0, r1
 8003822:	4611      	mov	r1, r2
 8003824:	461a      	mov	r2, r3
 8003826:	4603      	mov	r3, r0
 8003828:	817b      	strh	r3, [r7, #10]
 800382a:	460b      	mov	r3, r1
 800382c:	813b      	strh	r3, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003832:	f7ff fb51 	bl	8002ed8 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	f040 80d9 	bne.w	80039f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2319      	movs	r3, #25
 800384c:	2201      	movs	r2, #1
 800384e:	496d      	ldr	r1, [pc, #436]	; (8003a04 <HAL_I2C_Mem_Write+0x1ec>)
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f002 f90d 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	e0cc      	b.n	80039fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2C_Mem_Write+0x56>
 800386a:	2302      	movs	r3, #2
 800386c:	e0c5      	b.n	80039fa <HAL_I2C_Mem_Write+0x1e2>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d007      	beq.n	8003894 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2221      	movs	r2, #33	; 0x21
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a4d      	ldr	r2, [pc, #308]	; (8003a08 <HAL_I2C_Mem_Write+0x1f0>)
 80038d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038d6:	88f8      	ldrh	r0, [r7, #6]
 80038d8:	893a      	ldrh	r2, [r7, #8]
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4603      	mov	r3, r0
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f001 fe9c 	bl	8005624 <I2C_RequestMemoryWrite>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d052      	beq.n	8003998 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e081      	b.n	80039fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f002 f98e 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b04      	cmp	r3, #4
 800390c:	d107      	bne.n	800391e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06b      	b.n	80039fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b04      	cmp	r3, #4
 800395e:	d11b      	bne.n	8003998 <HAL_I2C_Mem_Write+0x180>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d017      	beq.n	8003998 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1aa      	bne.n	80038f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f002 f97a 	bl	8005c9e <I2C_WaitOnBTFFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d107      	bne.n	80039c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e016      	b.n	80039fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	00100002 	.word	0x00100002
 8003a08:	ffff0000 	.word	0xffff0000

08003a0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08c      	sub	sp, #48	; 0x30
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	813b      	strh	r3, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a26:	f7ff fa57 	bl	8002ed8 <HAL_GetTick>
 8003a2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	f040 8208 	bne.w	8003e4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2319      	movs	r3, #25
 8003a40:	2201      	movs	r2, #1
 8003a42:	497b      	ldr	r1, [pc, #492]	; (8003c30 <HAL_I2C_Mem_Read+0x224>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f002 f813 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
 8003a52:	e1fb      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Mem_Read+0x56>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e1f4      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d007      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2222      	movs	r2, #34	; 0x22
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	; 0x40
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a5b      	ldr	r2, [pc, #364]	; (8003c34 <HAL_I2C_Mem_Read+0x228>)
 8003ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aca:	88f8      	ldrh	r0, [r7, #6]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 fe38 	bl	8005750 <I2C_RequestMemoryRead>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e1b0      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d113      	bne.n	8003b1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	623b      	str	r3, [r7, #32]
 8003b06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e184      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d11b      	bne.n	8003b5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e164      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d11b      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	e144      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bb0:	e138      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	f200 80f1 	bhi.w	8003d9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d123      	bne.n	8003c0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f002 f8db 	bl	8005d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e139      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c0a:	e10b      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d14e      	bne.n	8003cb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4906      	ldr	r1, [pc, #24]	; (8003c38 <HAL_I2C_Mem_Read+0x22c>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f001 ff26 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d008      	beq.n	8003c3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e10e      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
 8003c2e:	bf00      	nop
 8003c30:	00100002 	.word	0x00100002
 8003c34:	ffff0000 	.word	0xffff0000
 8003c38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cb0:	e0b8      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4966      	ldr	r1, [pc, #408]	; (8003e54 <HAL_I2C_Mem_Read+0x448>)
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f001 fed7 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0bf      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	2200      	movs	r2, #0
 8003d16:	494f      	ldr	r1, [pc, #316]	; (8003e54 <HAL_I2C_Mem_Read+0x448>)
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f001 fea9 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e091      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691a      	ldr	r2, [r3, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d9c:	e042      	b.n	8003e24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f001 ffee 	bl	8005d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e04c      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d118      	bne.n	8003e24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	691a      	ldr	r2, [r3, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f47f aec2 	bne.w	8003bb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	00010004 	.word	0x00010004

08003e58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d003      	beq.n	8003e90 <HAL_I2C_EV_IRQHandler+0x38>
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	f040 80c1 	bne.w	8004012 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003eb0:	d003      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x62>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2C_EV_IRQHandler+0x66>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0x68>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f000 8132 	beq.w	800412a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x92>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	0a5b      	lsrs	r3, r3, #9
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d006      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 ffd6 	bl	8005e8e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fd83 	bl	80049ee <I2C_Master_SB>
 8003ee8:	e092      	b.n	8004010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	08db      	lsrs	r3, r3, #3
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_I2C_EV_IRQHandler+0xb2>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	0a5b      	lsrs	r3, r3, #9
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fdf9 	bl	8004afa <I2C_Master_ADD10>
 8003f08:	e082      	b.n	8004010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_I2C_EV_IRQHandler+0xd2>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	0a5b      	lsrs	r3, r3, #9
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fe13 	bl	8004b4e <I2C_Master_ADDR>
 8003f28:	e072      	b.n	8004010 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03b      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f44:	f000 80f3 	beq.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	09db      	lsrs	r3, r3, #7
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00f      	beq.n	8003f74 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	0a9b      	lsrs	r3, r3, #10
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	089b      	lsrs	r3, r3, #2
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d103      	bne.n	8003f74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f9f3 	bl	8004358 <I2C_MasterTransmit_TXE>
 8003f72:	e04d      	b.n	8004010 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80d6 	beq.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	0a5b      	lsrs	r3, r3, #9
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80cf 	beq.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f90:	7bbb      	ldrb	r3, [r7, #14]
 8003f92:	2b21      	cmp	r3, #33	; 0x21
 8003f94:	d103      	bne.n	8003f9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fa7a 	bl	8004490 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9c:	e0c7      	b.n	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	f040 80c4 	bne.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fae8 	bl	800457c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fac:	e0bf      	b.n	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbc:	f000 80b7 	beq.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00f      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x194>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x194>
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fb5d 	bl	80046a4 <I2C_MasterReceive_RXNE>
 8003fea:	e011      	b.n	8004010 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 809a 	beq.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	0a5b      	lsrs	r3, r3, #9
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8093 	beq.w	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fc06 	bl	800481a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800400e:	e08e      	b.n	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004010:	e08d      	b.n	800412e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e007      	b.n	8004034 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d012      	beq.n	8004066 <HAL_I2C_EV_IRQHandler+0x20e>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	0a5b      	lsrs	r3, r3, #9
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00c      	beq.n	8004066 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 ffc4 	bl	8004fec <I2C_Slave_ADDR>
 8004064:	e066      	b.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d009      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x22e>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	0a5b      	lsrs	r3, r3, #9
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fffe 	bl	8005080 <I2C_Slave_STOPF>
 8004084:	e056      	b.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004086:	7bbb      	ldrb	r3, [r7, #14]
 8004088:	2b21      	cmp	r3, #33	; 0x21
 800408a:	d002      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x23a>
 800408c:	7bbb      	ldrb	r3, [r7, #14]
 800408e:	2b29      	cmp	r3, #41	; 0x29
 8004090:	d125      	bne.n	80040de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	09db      	lsrs	r3, r3, #7
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00f      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x266>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	0a9b      	lsrs	r3, r3, #10
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_I2C_EV_IRQHandler+0x266>
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 feda 	bl	8004e70 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040bc:	e039      	b.n	8004132 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d033      	beq.n	8004132 <HAL_I2C_EV_IRQHandler+0x2da>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	0a5b      	lsrs	r3, r3, #9
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02d      	beq.n	8004132 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 ff07 	bl	8004eea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040dc:	e029      	b.n	8004132 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x2b2>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	0a9b      	lsrs	r3, r3, #10
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <HAL_I2C_EV_IRQHandler+0x2b2>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 ff12 	bl	8004f2c <I2C_SlaveReceive_RXNE>
 8004108:	e014      	b.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	0a5b      	lsrs	r3, r3, #9
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 ff40 	bl	8004fa8 <I2C_SlaveReceive_BTF>
 8004128:	e004      	b.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800412a:	bf00      	nop
 800412c:	e002      	b.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004132:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08a      	sub	sp, #40	; 0x28
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004152:	2300      	movs	r3, #0
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <HAL_I2C_ER_IRQHandler+0x4e>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004186:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <HAL_I2C_ER_IRQHandler+0x78>
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	0a1b      	lsrs	r3, r3, #8
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f043 0302 	orr.w	r3, r3, #2
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80041b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	0a9b      	lsrs	r3, r3, #10
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d03f      	beq.n	800423e <HAL_I2C_ER_IRQHandler+0x104>
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d039      	beq.n	800423e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80041ca:	7efb      	ldrb	r3, [r7, #27]
 80041cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80041e4:	7ebb      	ldrb	r3, [r7, #26]
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d112      	bne.n	8004210 <HAL_I2C_ER_IRQHandler+0xd6>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10f      	bne.n	8004210 <HAL_I2C_ER_IRQHandler+0xd6>
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	2b21      	cmp	r3, #33	; 0x21
 80041f4:	d008      	beq.n	8004208 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	2b29      	cmp	r3, #41	; 0x29
 80041fa:	d005      	beq.n	8004208 <HAL_I2C_ER_IRQHandler+0xce>
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	2b28      	cmp	r3, #40	; 0x28
 8004200:	d106      	bne.n	8004210 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b21      	cmp	r3, #33	; 0x21
 8004206:	d103      	bne.n	8004210 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f001 f869 	bl	80052e0 <I2C_Slave_AF>
 800420e:	e016      	b.n	800423e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004218:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	f043 0304 	orr.w	r3, r3, #4
 8004220:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004222:	7efb      	ldrb	r3, [r7, #27]
 8004224:	2b10      	cmp	r3, #16
 8004226:	d002      	beq.n	800422e <HAL_I2C_ER_IRQHandler+0xf4>
 8004228:	7efb      	ldrb	r3, [r7, #27]
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d107      	bne.n	800423e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	0adb      	lsrs	r3, r3, #11
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <HAL_I2C_ER_IRQHandler+0x12e>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004266:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f001 f8a0 	bl	80053c0 <I2C_ITError>
  }
}
 8004280:	bf00      	nop
 8004282:	3728      	adds	r7, #40	; 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	70fb      	strb	r3, [r7, #3]
 80042e4:	4613      	mov	r3, r2
 80042e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004366:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800436e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d150      	bne.n	8004420 <I2C_MasterTransmit_TXE+0xc8>
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	2b21      	cmp	r3, #33	; 0x21
 8004382:	d14d      	bne.n	8004420 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b08      	cmp	r3, #8
 8004388:	d01d      	beq.n	80043c6 <I2C_MasterTransmit_TXE+0x6e>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b20      	cmp	r3, #32
 800438e:	d01a      	beq.n	80043c6 <I2C_MasterTransmit_TXE+0x6e>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004396:	d016      	beq.n	80043c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2211      	movs	r2, #17
 80043ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ff62 	bl	8004288 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043c4:	e060      	b.n	8004488 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b40      	cmp	r3, #64	; 0x40
 80043fe:	d107      	bne.n	8004410 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff7d 	bl	8004308 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800440e:	e03b      	b.n	8004488 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff35 	bl	8004288 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800441e:	e033      	b.n	8004488 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b21      	cmp	r3, #33	; 0x21
 8004424:	d005      	beq.n	8004432 <I2C_MasterTransmit_TXE+0xda>
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d12d      	bne.n	8004488 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b22      	cmp	r3, #34	; 0x22
 8004430:	d12a      	bne.n	8004488 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800444a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800444c:	e01c      	b.n	8004488 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d103      	bne.n	8004462 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f88e 	bl	800457c <I2C_MemoryTransmit_TXE_BTF>
}
 8004460:	e012      	b.n	8004488 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	781a      	ldrb	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004486:	e7ff      	b.n	8004488 <I2C_MasterTransmit_TXE+0x130>
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b21      	cmp	r3, #33	; 0x21
 80044a8:	d164      	bne.n	8004574 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80044d8:	e04c      	b.n	8004574 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d01d      	beq.n	800451c <I2C_MasterTransmit_BTF+0x8c>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d01a      	beq.n	800451c <I2C_MasterTransmit_BTF+0x8c>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ec:	d016      	beq.n	800451c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2211      	movs	r2, #17
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff feb7 	bl	8004288 <HAL_I2C_MasterTxCpltCallback>
}
 800451a:	e02b      	b.n	8004574 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800452a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b40      	cmp	r3, #64	; 0x40
 8004554:	d107      	bne.n	8004566 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff fed2 	bl	8004308 <HAL_I2C_MemTxCpltCallback>
}
 8004564:	e006      	b.n	8004574 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fe8a 	bl	8004288 <HAL_I2C_MasterTxCpltCallback>
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	2b00      	cmp	r3, #0
 8004592:	d11d      	bne.n	80045d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10b      	bne.n	80045b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ac:	1c9a      	adds	r2, r3, #2
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045b2:	e073      	b.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	121b      	asrs	r3, r3, #8
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045ce:	e065      	b.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10b      	bne.n	80045f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045ee:	e055      	b.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d151      	bne.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b22      	cmp	r3, #34	; 0x22
 80045fc:	d10d      	bne.n	800461a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800460c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004618:	e040      	b.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d015      	beq.n	8004650 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b21      	cmp	r3, #33	; 0x21
 8004628:	d112      	bne.n	8004650 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800464e:	e025      	b.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d120      	bne.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b21      	cmp	r3, #33	; 0x21
 800465e:	d11d      	bne.n	800469c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7ff fe36 	bl	8004308 <HAL_I2C_MemTxCpltCallback>
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b22      	cmp	r3, #34	; 0x22
 80046b6:	f040 80ac 	bne.w	8004812 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d921      	bls.n	800470c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	f040 808c 	bne.w	8004812 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004708:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800470a:	e082      	b.n	8004812 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	2b02      	cmp	r3, #2
 8004712:	d075      	beq.n	8004800 <I2C_MasterReceive_RXNE+0x15c>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d002      	beq.n	8004720 <I2C_MasterReceive_RXNE+0x7c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d16f      	bne.n	8004800 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fafd 	bl	8005d20 <I2C_WaitOnSTOPRequestThroughIT>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d142      	bne.n	80047b2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800473a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800474a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b40      	cmp	r3, #64	; 0x40
 8004784:	d10a      	bne.n	800479c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fdc1 	bl	800431c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800479a:	e03a      	b.n	8004812 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2212      	movs	r2, #18
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fd76 	bl	800429c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047b0:	e02f      	b.n	8004812 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047c0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fd99 	bl	8004330 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047fe:	e008      	b.n	8004812 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480e:	605a      	str	r2, [r3, #4]
}
 8004810:	e7ff      	b.n	8004812 <I2C_MasterReceive_RXNE+0x16e>
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b04      	cmp	r3, #4
 8004830:	d11b      	bne.n	800486a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004868:	e0bd      	b.n	80049e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b03      	cmp	r3, #3
 8004872:	d129      	bne.n	80048c8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004882:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b04      	cmp	r3, #4
 8004888:	d00a      	beq.n	80048a0 <I2C_MasterReceive_BTF+0x86>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d007      	beq.n	80048a0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048c6:	e08e      	b.n	80049e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d176      	bne.n	80049c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d002      	beq.n	80048de <I2C_MasterReceive_BTF+0xc4>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d108      	bne.n	80048f0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e019      	b.n	8004924 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d002      	beq.n	80048fc <I2C_MasterReceive_BTF+0xe2>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d108      	bne.n	800490e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e00a      	b.n	8004924 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b10      	cmp	r3, #16
 8004912:	d007      	beq.n	8004924 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004922:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800497e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b40      	cmp	r3, #64	; 0x40
 8004992:	d10a      	bne.n	80049aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fcba 	bl	800431c <HAL_I2C_MemRxCpltCallback>
}
 80049a8:	e01d      	b.n	80049e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2212      	movs	r2, #18
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff fc6f 	bl	800429c <HAL_I2C_MasterRxCpltCallback>
}
 80049be:	e012      	b.n	80049e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d117      	bne.n	8004a32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a1c:	e067      	b.n	8004aee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	f043 0301 	orr.w	r3, r3, #1
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]
}
 8004a30:	e05d      	b.n	8004aee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3a:	d133      	bne.n	8004aa4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b21      	cmp	r3, #33	; 0x21
 8004a46:	d109      	bne.n	8004a5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a58:	611a      	str	r2, [r3, #16]
 8004a5a:	e008      	b.n	8004a6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f043 0301 	orr.w	r3, r3, #1
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <I2C_Master_SB+0x92>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d032      	beq.n	8004aee <I2C_Master_SB+0x100>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d02d      	beq.n	8004aee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa0:	605a      	str	r2, [r3, #4]
}
 8004aa2:	e024      	b.n	8004aee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10e      	bne.n	8004aca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	11db      	asrs	r3, r3, #7
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	f003 0306 	and.w	r3, r3, #6
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f063 030f 	orn	r3, r3, #15
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	611a      	str	r2, [r3, #16]
}
 8004ac8:	e011      	b.n	8004aee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10d      	bne.n	8004aee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	11db      	asrs	r3, r3, #7
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f003 0306 	and.w	r3, r3, #6
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f063 030e 	orn	r3, r3, #14
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	611a      	str	r2, [r3, #16]
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <I2C_Master_ADD10+0x26>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d108      	bne.n	8004b32 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <I2C_Master_ADD10+0x48>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b40:	605a      	str	r2, [r3, #4]
  }
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b091      	sub	sp, #68	; 0x44
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b22      	cmp	r3, #34	; 0x22
 8004b76:	f040 8169 	bne.w	8004e4c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <I2C_Master_ADDR+0x54>
 8004b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d10b      	bne.n	8004ba2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	633b      	str	r3, [r7, #48]	; 0x30
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	e160      	b.n	8004e64 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d11d      	bne.n	8004be6 <I2C_Master_ADDR+0x98>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bb2:	d118      	bne.n	8004be6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bd8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	651a      	str	r2, [r3, #80]	; 0x50
 8004be4:	e13e      	b.n	8004e64 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d113      	bne.n	8004c18 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e115      	b.n	8004e44 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	f040 808a 	bne.w	8004d38 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c2a:	d137      	bne.n	8004c9c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d113      	bne.n	8004c74 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	e0e7      	b.n	8004e44 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c74:	2300      	movs	r3, #0
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	e0d3      	b.n	8004e44 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d02e      	beq.n	8004d00 <I2C_Master_ADDR+0x1b2>
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d02b      	beq.n	8004d00 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004caa:	2b12      	cmp	r3, #18
 8004cac:	d102      	bne.n	8004cb4 <I2C_Master_ADDR+0x166>
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d125      	bne.n	8004d00 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d00e      	beq.n	8004cd8 <I2C_Master_ADDR+0x18a>
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d00b      	beq.n	8004cd8 <I2C_Master_ADDR+0x18a>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d008      	beq.n	8004cd8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e007      	b.n	8004ce8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ce6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	61fb      	str	r3, [r7, #28]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	61fb      	str	r3, [r7, #28]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	e0a1      	b.n	8004e44 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d0e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e085      	b.n	8004e44 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d14d      	bne.n	8004dde <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	2b04      	cmp	r3, #4
 8004d46:	d016      	beq.n	8004d76 <I2C_Master_ADDR+0x228>
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d013      	beq.n	8004d76 <I2C_Master_ADDR+0x228>
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d010      	beq.n	8004d76 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d62:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e007      	b.n	8004d86 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d84:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d94:	d117      	bne.n	8004dc6 <I2C_Master_ADDR+0x278>
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d9c:	d00b      	beq.n	8004db6 <I2C_Master_ADDR+0x268>
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d008      	beq.n	8004db6 <I2C_Master_ADDR+0x268>
 8004da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d005      	beq.n	8004db6 <I2C_Master_ADDR+0x268>
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	2b10      	cmp	r3, #16
 8004dae:	d002      	beq.n	8004db6 <I2C_Master_ADDR+0x268>
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d107      	bne.n	8004dc6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dc4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	e032      	b.n	8004e44 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dec:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	d117      	bne.n	8004e2e <I2C_Master_ADDR+0x2e0>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e04:	d00b      	beq.n	8004e1e <I2C_Master_ADDR+0x2d0>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d008      	beq.n	8004e1e <I2C_Master_ADDR+0x2d0>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d005      	beq.n	8004e1e <I2C_Master_ADDR+0x2d0>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d002      	beq.n	8004e1e <I2C_Master_ADDR+0x2d0>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d107      	bne.n	8004e2e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e4a:	e00b      	b.n	8004e64 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	e7ff      	b.n	8004e64 <I2C_Master_ADDR+0x316>
 8004e64:	bf00      	nop
 8004e66:	3744      	adds	r7, #68	; 0x44
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02b      	beq.n	8004ee2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	781a      	ldrb	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d114      	bne.n	8004ee2 <I2C_SlaveTransmit_TXE+0x72>
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b29      	cmp	r3, #41	; 0x29
 8004ebc:	d111      	bne.n	8004ee2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ecc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2221      	movs	r2, #33	; 0x21
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2228      	movs	r2, #40	; 0x28
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff f9e7 	bl	80042b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d011      	beq.n	8004f20 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d02c      	beq.n	8004fa0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d114      	bne.n	8004fa0 <I2C_SlaveReceive_RXNE+0x74>
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7a:	d111      	bne.n	8004fa0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2222      	movs	r2, #34	; 0x22
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2228      	movs	r2, #40	; 0x28
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff f992 	bl	80042c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005006:	2b28      	cmp	r3, #40	; 0x28
 8005008:	d127      	bne.n	800505a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	09db      	lsrs	r3, r3, #7
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	81bb      	strh	r3, [r7, #12]
 800503c:	e002      	b.n	8005044 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800504c:	89ba      	ldrh	r2, [r7, #12]
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff f940 	bl	80042d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005058:	e00e      	b.n	8005078 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800509e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050a0:	2300      	movs	r3, #0
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050dc:	d172      	bne.n	80051c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b22      	cmp	r3, #34	; 0x22
 80050e2:	d002      	beq.n	80050ea <I2C_Slave_STOPF+0x6a>
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b2a      	cmp	r3, #42	; 0x2a
 80050e8:	d135      	bne.n	8005156 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0204 	orr.w	r2, r3, #4
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe f887 	bl	8003236 <HAL_DMA_GetState>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d049      	beq.n	80051c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	4a69      	ldr	r2, [pc, #420]	; (80052d8 <I2C_Slave_STOPF+0x258>)
 8005134:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe f859 	bl	80031f2 <HAL_DMA_Abort_IT>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d03d      	beq.n	80051c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005150:	4610      	mov	r0, r2
 8005152:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005154:	e035      	b.n	80051c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0204 	orr.w	r2, r3, #4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005188:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f851 	bl	8003236 <HAL_DMA_GetState>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d014      	beq.n	80051c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <I2C_Slave_STOPF+0x258>)
 80051a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe f823 	bl	80031f2 <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d008      	beq.n	80051c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
 80051c0:	e000      	b.n	80051c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03e      	beq.n	800524c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d112      	bne.n	8005202 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d112      	bne.n	8005236 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f043 0204 	orr.w	r2, r3, #4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f8b3 	bl	80053c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800525a:	e039      	b.n	80052d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b2a      	cmp	r3, #42	; 0x2a
 8005260:	d109      	bne.n	8005276 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2228      	movs	r2, #40	; 0x28
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff f827 	bl	80042c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b28      	cmp	r3, #40	; 0x28
 8005280:	d111      	bne.n	80052a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <I2C_Slave_STOPF+0x25c>)
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff f828 	bl	80042f4 <HAL_I2C_ListenCpltCallback>
}
 80052a4:	e014      	b.n	80052d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	d002      	beq.n	80052b4 <I2C_Slave_STOPF+0x234>
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b22      	cmp	r3, #34	; 0x22
 80052b2:	d10d      	bne.n	80052d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fe fffa 	bl	80042c4 <HAL_I2C_SlaveRxCpltCallback>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	08005921 	.word	0x08005921
 80052dc:	ffff0000 	.word	0xffff0000

080052e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d002      	beq.n	8005302 <I2C_Slave_AF+0x22>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d129      	bne.n	8005356 <I2C_Slave_AF+0x76>
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b28      	cmp	r3, #40	; 0x28
 8005306:	d126      	bne.n	8005356 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <I2C_Slave_AF+0xdc>)
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800531c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005326:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fe ffd0 	bl	80042f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005354:	e02e      	b.n	80053b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b21      	cmp	r3, #33	; 0x21
 800535a:	d126      	bne.n	80053aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <I2C_Slave_AF+0xdc>)
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005386:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005390:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fe ff84 	bl	80042b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80053a8:	e004      	b.n	80053b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053b2:	615a      	str	r2, [r3, #20]
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	ffff0000 	.word	0xffff0000

080053c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d002      	beq.n	80053e4 <I2C_ITError+0x24>
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d10a      	bne.n	80053fa <I2C_ITError+0x3a>
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b22      	cmp	r3, #34	; 0x22
 80053e8:	d107      	bne.n	80053fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005400:	2b28      	cmp	r3, #40	; 0x28
 8005402:	d107      	bne.n	8005414 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2228      	movs	r2, #40	; 0x28
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005412:	e015      	b.n	8005440 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005422:	d00a      	beq.n	800543a <I2C_ITError+0x7a>
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b60      	cmp	r3, #96	; 0x60
 8005428:	d007      	beq.n	800543a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d162      	bne.n	8005516 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	d020      	beq.n	80054b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005472:	4a6a      	ldr	r2, [pc, #424]	; (800561c <I2C_ITError+0x25c>)
 8005474:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	4618      	mov	r0, r3
 800547c:	f7fd feb9 	bl	80031f2 <HAL_DMA_Abort_IT>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 8089 	beq.w	800559a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054aa:	4610      	mov	r0, r2
 80054ac:	4798      	blx	r3
 80054ae:	e074      	b.n	800559a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	4a59      	ldr	r2, [pc, #356]	; (800561c <I2C_ITError+0x25c>)
 80054b6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fd fe98 	bl	80031f2 <HAL_DMA_Abort_IT>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d068      	beq.n	800559a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d10b      	bne.n	80054ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0201 	bic.w	r2, r2, #1
 80054fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005510:	4610      	mov	r0, r2
 8005512:	4798      	blx	r3
 8005514:	e041      	b.n	800559a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b60      	cmp	r3, #96	; 0x60
 8005520:	d125      	bne.n	800556e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d10b      	bne.n	8005556 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fe feec 	bl	8004344 <HAL_I2C_AbortCpltCallback>
 800556c:	e015      	b.n	800559a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005578:	2b40      	cmp	r3, #64	; 0x40
 800557a:	d10b      	bne.n	8005594 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fe fecb 	bl	8004330 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10e      	bne.n	80055c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d113      	bne.n	8005614 <I2C_ITError+0x254>
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b28      	cmp	r3, #40	; 0x28
 80055f0:	d110      	bne.n	8005614 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <I2C_ITError+0x260>)
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fe fe70 	bl	80042f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	08005921 	.word	0x08005921
 8005620:	ffff0000 	.word	0xffff0000

08005624 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	817b      	strh	r3, [r7, #10]
 8005636:	460b      	mov	r3, r1
 8005638:	813b      	strh	r3, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800564c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	2200      	movs	r2, #0
 8005656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fa08 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005674:	d103      	bne.n	800567e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e05f      	b.n	8005742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005690:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	6a3a      	ldr	r2, [r7, #32]
 8005696:	492d      	ldr	r1, [pc, #180]	; (800574c <I2C_RequestMemoryWrite+0x128>)
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 fa40 	bl	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e04c      	b.n	8005742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c0:	6a39      	ldr	r1, [r7, #32]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 faaa 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00d      	beq.n	80056ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	2b04      	cmp	r3, #4
 80056d4:	d107      	bne.n	80056e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e02b      	b.n	8005742 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d105      	bne.n	80056fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f0:	893b      	ldrh	r3, [r7, #8]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	611a      	str	r2, [r3, #16]
 80056fa:	e021      	b.n	8005740 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	b29b      	uxth	r3, r3
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570c:	6a39      	ldr	r1, [r7, #32]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fa84 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	2b04      	cmp	r3, #4
 8005720:	d107      	bne.n	8005732 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005730:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e005      	b.n	8005742 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005736:	893b      	ldrh	r3, [r7, #8]
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	00010002 	.word	0x00010002

08005750 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	460b      	mov	r3, r1
 8005764:	813b      	strh	r3, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005778:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	2200      	movs	r2, #0
 8005792:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f96a 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b0:	d103      	bne.n	80057ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0aa      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057be:	897b      	ldrh	r3, [r7, #10]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	6a3a      	ldr	r2, [r7, #32]
 80057d2:	4952      	ldr	r1, [pc, #328]	; (800591c <I2C_RequestMemoryRead+0x1cc>)
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f9a2 	bl	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e097      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057fc:	6a39      	ldr	r1, [r7, #32]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fa0c 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00d      	beq.n	8005826 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	2b04      	cmp	r3, #4
 8005810:	d107      	bne.n	8005822 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e076      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800582c:	893b      	ldrh	r3, [r7, #8]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	e021      	b.n	800587c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005838:	893b      	ldrh	r3, [r7, #8]
 800583a:	0a1b      	lsrs	r3, r3, #8
 800583c:	b29b      	uxth	r3, r3
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	6a39      	ldr	r1, [r7, #32]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f9e6 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b04      	cmp	r3, #4
 800585c:	d107      	bne.n	800586e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e050      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005872:	893b      	ldrh	r3, [r7, #8]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	6a39      	ldr	r1, [r7, #32]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f9cb 	bl	8005c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	2b04      	cmp	r3, #4
 8005892:	d107      	bne.n	80058a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e035      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2200      	movs	r2, #0
 80058c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f8d3 	bl	8005a70 <I2C_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00d      	beq.n	80058ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058de:	d103      	bne.n	80058e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e013      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058ec:	897b      	ldrh	r3, [r7, #10]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	4906      	ldr	r1, [pc, #24]	; (800591c <I2C_RequestMemoryRead+0x1cc>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f90b 	bl	8005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	00010002 	.word	0x00010002

08005920 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005938:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800593a:	4b4b      	ldr	r3, [pc, #300]	; (8005a68 <I2C_DMAAbort+0x148>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	08db      	lsrs	r3, r3, #3
 8005940:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <I2C_DMAAbort+0x14c>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	0a1a      	lsrs	r2, r3, #8
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00da      	lsls	r2, r3, #3
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005966:	e00a      	b.n	800597e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3b01      	subs	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800597c:	d0ea      	beq.n	8005954 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	2200      	movs	r2, #0
 800598c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	2200      	movs	r2, #0
 800599c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c0:	2200      	movs	r2, #0
 80059c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	2200      	movs	r2, #0
 80059d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b60      	cmp	r3, #96	; 0x60
 80059ee:	d10e      	bne.n	8005a0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2200      	movs	r2, #0
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a06:	6978      	ldr	r0, [r7, #20]
 8005a08:	f7fe fc9c 	bl	8004344 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a0c:	e027      	b.n	8005a5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a0e:	7cfb      	ldrb	r3, [r7, #19]
 8005a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a14:	2b28      	cmp	r3, #40	; 0x28
 8005a16:	d117      	bne.n	8005a48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2228      	movs	r2, #40	; 0x28
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a46:	e007      	b.n	8005a58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a58:	6978      	ldr	r0, [r7, #20]
 8005a5a:	f7fe fc69 	bl	8004330 <HAL_I2C_ErrorCallback>
}
 8005a5e:	bf00      	nop
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000000 	.word	0x20000000
 8005a6c:	14f8b589 	.word	0x14f8b589

08005a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a80:	e025      	b.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d021      	beq.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8a:	f7fd fa25 	bl	8002ed8 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d116      	bne.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f043 0220 	orr.w	r2, r3, #32
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e023      	b.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d10d      	bne.n	8005af4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	43da      	mvns	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	e00c      	b.n	8005b0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	43da      	mvns	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d0b6      	beq.n	8005a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b2c:	e051      	b.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3c:	d123      	bne.n	8005b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f043 0204 	orr.w	r2, r3, #4
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e046      	b.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d021      	beq.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8e:	f7fd f9a3 	bl	8002ed8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d302      	bcc.n	8005ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d116      	bne.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2220      	movs	r2, #32
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e020      	b.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d10c      	bne.n	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	43da      	mvns	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf14      	ite	ne
 8005bee:	2301      	movne	r3, #1
 8005bf0:	2300      	moveq	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	e00b      	b.n	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	43da      	mvns	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4013      	ands	r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d18d      	bne.n	8005b2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c28:	e02d      	b.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f900 	bl	8005e30 <I2C_IsAcknowledgeFailed>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e02d      	b.n	8005c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d021      	beq.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fd f949 	bl	8002ed8 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d116      	bne.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e007      	b.n	8005c96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d1ca      	bne.n	8005c2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005caa:	e02d      	b.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f8bf 	bl	8005e30 <I2C_IsAcknowledgeFailed>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e02d      	b.n	8005d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d021      	beq.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc4:	f7fd f908 	bl	8002ed8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d302      	bcc.n	8005cda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d116      	bne.n	8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e007      	b.n	8005d18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d1ca      	bne.n	8005cac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	08db      	lsrs	r3, r3, #3
 8005d32:	4a13      	ldr	r2, [pc, #76]	; (8005d80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	0a1a      	lsrs	r2, r3, #8
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e008      	b.n	8005d70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6c:	d0e9      	beq.n	8005d42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000000 	.word	0x20000000
 8005d80:	14f8b589 	.word	0x14f8b589

08005d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d90:	e042      	b.n	8005e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b10      	cmp	r3, #16
 8005d9e:	d119      	bne.n	8005dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0210 	mvn.w	r2, #16
 8005da8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e029      	b.n	8005e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd4:	f7fd f880 	bl	8002ed8 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d116      	bne.n	8005e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e007      	b.n	8005e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d1b5      	bne.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e46:	d11b      	bne.n	8005e80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f043 0204 	orr.w	r2, r3, #4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005e9e:	d103      	bne.n	8005ea8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ea6:	e007      	b.n	8005eb8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005eb0:	d102      	bne.n	8005eb8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e267      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d075      	beq.n	8005fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ee2:	4b88      	ldr	r3, [pc, #544]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d00c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eee:	4b85      	ldr	r3, [pc, #532]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efa:	4b82      	ldr	r3, [pc, #520]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f06:	d10b      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	4b7e      	ldr	r3, [pc, #504]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d05b      	beq.n	8005fcc <HAL_RCC_OscConfig+0x108>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d157      	bne.n	8005fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e242      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d106      	bne.n	8005f38 <HAL_RCC_OscConfig+0x74>
 8005f2a:	4b76      	ldr	r3, [pc, #472]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a75      	ldr	r2, [pc, #468]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e01d      	b.n	8005f74 <HAL_RCC_OscConfig+0xb0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x98>
 8005f42:	4b70      	ldr	r3, [pc, #448]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6f      	ldr	r2, [pc, #444]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6c      	ldr	r2, [pc, #432]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCC_OscConfig+0xb0>
 8005f5c:	4b69      	ldr	r3, [pc, #420]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a68      	ldr	r2, [pc, #416]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b66      	ldr	r3, [pc, #408]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a65      	ldr	r2, [pc, #404]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fc ffac 	bl	8002ed8 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fc ffa8 	bl	8002ed8 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	; 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e207      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f96:	4b5b      	ldr	r3, [pc, #364]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0xc0>
 8005fa2:	e014      	b.n	8005fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa4:	f7fc ff98 	bl	8002ed8 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fc ff94 	bl	8002ed8 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1f3      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fbe:	4b51      	ldr	r3, [pc, #324]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0xe8>
 8005fca:	e000      	b.n	8005fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d063      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fda:	4b4a      	ldr	r3, [pc, #296]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d11c      	bne.n	800602c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ff2:	4b44      	ldr	r3, [pc, #272]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d116      	bne.n	800602c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffe:	4b41      	ldr	r3, [pc, #260]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x152>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e1c7      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006016:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4937      	ldr	r1, [pc, #220]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602a:	e03a      	b.n	80060a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d020      	beq.n	8006076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006034:	4b34      	ldr	r3, [pc, #208]	; (8006108 <HAL_RCC_OscConfig+0x244>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fc ff4d 	bl	8002ed8 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006042:	f7fc ff49 	bl	8002ed8 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e1a8      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006054:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4925      	ldr	r1, [pc, #148]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006070:	4313      	orrs	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	e015      	b.n	80060a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <HAL_RCC_OscConfig+0x244>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fc ff2c 	bl	8002ed8 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006084:	f7fc ff28 	bl	8002ed8 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e187      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006096:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d036      	beq.n	800611c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_RCC_OscConfig+0x248>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fc ff0c 	bl	8002ed8 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c4:	f7fc ff08 	bl	8002ed8 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e167      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 80060d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x200>
 80060e2:	e01b      	b.n	800611c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <HAL_RCC_OscConfig+0x248>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ea:	f7fc fef5 	bl	8002ed8 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f0:	e00e      	b.n	8006110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f2:	f7fc fef1 	bl	8002ed8 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d907      	bls.n	8006110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e150      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
 8006104:	40023800 	.word	0x40023800
 8006108:	42470000 	.word	0x42470000
 800610c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006110:	4b88      	ldr	r3, [pc, #544]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ea      	bne.n	80060f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8097 	beq.w	8006258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612e:	4b81      	ldr	r3, [pc, #516]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	4b7d      	ldr	r3, [pc, #500]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4a7c      	ldr	r2, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	; 0x40
 800614a:	4b7a      	ldr	r3, [pc, #488]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615a:	4b77      	ldr	r3, [pc, #476]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d118      	bne.n	8006198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006166:	4b74      	ldr	r3, [pc, #464]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a73      	ldr	r2, [pc, #460]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006172:	f7fc feb1 	bl	8002ed8 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617a:	f7fc fead 	bl	8002ed8 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e10c      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618c:	4b6a      	ldr	r3, [pc, #424]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d106      	bne.n	80061ae <HAL_RCC_OscConfig+0x2ea>
 80061a0:	4b64      	ldr	r3, [pc, #400]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a63      	ldr	r2, [pc, #396]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	e01c      	b.n	80061e8 <HAL_RCC_OscConfig+0x324>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCC_OscConfig+0x30c>
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	4a5e      	ldr	r2, [pc, #376]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061bc:	f043 0304 	orr.w	r3, r3, #4
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
 80061c2:	4b5c      	ldr	r3, [pc, #368]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	4a5b      	ldr	r2, [pc, #364]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6713      	str	r3, [r2, #112]	; 0x70
 80061ce:	e00b      	b.n	80061e8 <HAL_RCC_OscConfig+0x324>
 80061d0:	4b58      	ldr	r3, [pc, #352]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d4:	4a57      	ldr	r2, [pc, #348]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	6713      	str	r3, [r2, #112]	; 0x70
 80061dc:	4b55      	ldr	r3, [pc, #340]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	4a54      	ldr	r2, [pc, #336]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061e2:	f023 0304 	bic.w	r3, r3, #4
 80061e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d015      	beq.n	800621c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fc fe72 	bl	8002ed8 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f6:	e00a      	b.n	800620e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f8:	f7fc fe6e 	bl	8002ed8 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f241 3288 	movw	r2, #5000	; 0x1388
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e0cb      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620e:	4b49      	ldr	r3, [pc, #292]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ee      	beq.n	80061f8 <HAL_RCC_OscConfig+0x334>
 800621a:	e014      	b.n	8006246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621c:	f7fc fe5c 	bl	8002ed8 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006222:	e00a      	b.n	800623a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fc fe58 	bl	8002ed8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e0b5      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800623a:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1ee      	bne.n	8006224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624c:	4b39      	ldr	r3, [pc, #228]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	4a38      	ldr	r2, [pc, #224]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80a1 	beq.w	80063a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006262:	4b34      	ldr	r3, [pc, #208]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 030c 	and.w	r3, r3, #12
 800626a:	2b08      	cmp	r3, #8
 800626c:	d05c      	beq.n	8006328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d141      	bne.n	80062fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006276:	4b31      	ldr	r3, [pc, #196]	; (800633c <HAL_RCC_OscConfig+0x478>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fc fe2c 	bl	8002ed8 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006284:	f7fc fe28 	bl	8002ed8 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e087      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006296:	4b27      	ldr	r3, [pc, #156]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	019b      	lsls	r3, r3, #6
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	3b01      	subs	r3, #1
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	061b      	lsls	r3, r3, #24
 80062c6:	491b      	ldr	r1, [pc, #108]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <HAL_RCC_OscConfig+0x478>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fc fe01 	bl	8002ed8 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062da:	f7fc fdfd 	bl	8002ed8 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e05c      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x416>
 80062f8:	e054      	b.n	80063a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <HAL_RCC_OscConfig+0x478>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006300:	f7fc fdea 	bl	8002ed8 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006308:	f7fc fde6 	bl	8002ed8 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e045      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x444>
 8006326:	e03d      	b.n	80063a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d107      	bne.n	8006340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e038      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
 8006334:	40023800 	.word	0x40023800
 8006338:	40007000 	.word	0x40007000
 800633c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <HAL_RCC_OscConfig+0x4ec>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d028      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006358:	429a      	cmp	r2, r3
 800635a:	d121      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d11a      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006378:	4293      	cmp	r3, r2
 800637a:	d111      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023800 	.word	0x40023800

080063b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0cc      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063c8:	4b68      	ldr	r3, [pc, #416]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90c      	bls.n	80063f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b65      	ldr	r3, [pc, #404]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063de:	4b63      	ldr	r3, [pc, #396]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0b8      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006408:	4b59      	ldr	r3, [pc, #356]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4a58      	ldr	r2, [pc, #352]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006420:	4b53      	ldr	r3, [pc, #332]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4a52      	ldr	r2, [pc, #328]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800642a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800642c:	4b50      	ldr	r3, [pc, #320]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	494d      	ldr	r1, [pc, #308]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d044      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d107      	bne.n	8006462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006452:	4b47      	ldr	r3, [pc, #284]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d119      	bne.n	8006492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e07f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d003      	beq.n	8006472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800646e:	2b03      	cmp	r3, #3
 8006470:	d107      	bne.n	8006482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006472:	4b3f      	ldr	r3, [pc, #252]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e06f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006482:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e067      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006492:	4b37      	ldr	r3, [pc, #220]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f023 0203 	bic.w	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4934      	ldr	r1, [pc, #208]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064a4:	f7fc fd18 	bl	8002ed8 <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064aa:	e00a      	b.n	80064c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ac:	f7fc fd14 	bl	8002ed8 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e04f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c2:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 020c 	and.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1eb      	bne.n	80064ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d20c      	bcs.n	80064fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ea:	4b20      	ldr	r3, [pc, #128]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e032      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4916      	ldr	r1, [pc, #88]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	490e      	ldr	r1, [pc, #56]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800653a:	f000 f821 	bl	8006580 <HAL_RCC_GetSysClockFreq>
 800653e:	4602      	mov	r2, r0
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	091b      	lsrs	r3, r3, #4
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <HAL_RCC_ClockConfig+0x1c0>)
 800654c:	5ccb      	ldrb	r3, [r1, r3]
 800654e:	fa22 f303 	lsr.w	r3, r2, r3
 8006552:	4a09      	ldr	r2, [pc, #36]	; (8006578 <HAL_RCC_ClockConfig+0x1c4>)
 8006554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_ClockConfig+0x1c8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fc fc78 	bl	8002e50 <HAL_InitTick>

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40023c00 	.word	0x40023c00
 8006570:	40023800 	.word	0x40023800
 8006574:	0800b10c 	.word	0x0800b10c
 8006578:	20000000 	.word	0x20000000
 800657c:	20000004 	.word	0x20000004

08006580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006584:	b090      	sub	sp, #64	; 0x40
 8006586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
 800658c:	2300      	movs	r3, #0
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	2300      	movs	r3, #0
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 030c 	and.w	r3, r3, #12
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d00d      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0x40>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	f200 80a1 	bhi.w	80066ec <HAL_RCC_GetSysClockFreq+0x16c>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_RCC_GetSysClockFreq+0x34>
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d003      	beq.n	80065ba <HAL_RCC_GetSysClockFreq+0x3a>
 80065b2:	e09b      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065b4:	4b53      	ldr	r3, [pc, #332]	; (8006704 <HAL_RCC_GetSysClockFreq+0x184>)
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80065b8:	e09b      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065ba:	4b53      	ldr	r3, [pc, #332]	; (8006708 <HAL_RCC_GetSysClockFreq+0x188>)
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80065be:	e098      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065c0:	4b4f      	ldr	r3, [pc, #316]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ca:	4b4d      	ldr	r3, [pc, #308]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d028      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d6:	4b4a      	ldr	r3, [pc, #296]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	2200      	movs	r2, #0
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	627a      	str	r2, [r7, #36]	; 0x24
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80065e8:	2100      	movs	r1, #0
 80065ea:	4b47      	ldr	r3, [pc, #284]	; (8006708 <HAL_RCC_GetSysClockFreq+0x188>)
 80065ec:	fb03 f201 	mul.w	r2, r3, r1
 80065f0:	2300      	movs	r3, #0
 80065f2:	fb00 f303 	mul.w	r3, r0, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	4a43      	ldr	r2, [pc, #268]	; (8006708 <HAL_RCC_GetSysClockFreq+0x188>)
 80065fa:	fba0 1202 	umull	r1, r2, r0, r2
 80065fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006600:	460a      	mov	r2, r1
 8006602:	62ba      	str	r2, [r7, #40]	; 0x28
 8006604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006606:	4413      	add	r3, r2
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	2200      	movs	r2, #0
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	61fa      	str	r2, [r7, #28]
 8006612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800661a:	f7fa fa27 	bl	8000a6c <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4613      	mov	r3, r2
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006626:	e053      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006628:	4b35      	ldr	r3, [pc, #212]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	2200      	movs	r2, #0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	617a      	str	r2, [r7, #20]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800663a:	f04f 0b00 	mov.w	fp, #0
 800663e:	4652      	mov	r2, sl
 8006640:	465b      	mov	r3, fp
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f04f 0100 	mov.w	r1, #0
 800664a:	0159      	lsls	r1, r3, #5
 800664c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006650:	0150      	lsls	r0, r2, #5
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	ebb2 080a 	subs.w	r8, r2, sl
 800665a:	eb63 090b 	sbc.w	r9, r3, fp
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800666a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800666e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006672:	ebb2 0408 	subs.w	r4, r2, r8
 8006676:	eb63 0509 	sbc.w	r5, r3, r9
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	00eb      	lsls	r3, r5, #3
 8006684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006688:	00e2      	lsls	r2, r4, #3
 800668a:	4614      	mov	r4, r2
 800668c:	461d      	mov	r5, r3
 800668e:	eb14 030a 	adds.w	r3, r4, sl
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	eb45 030b 	adc.w	r3, r5, fp
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066a6:	4629      	mov	r1, r5
 80066a8:	028b      	lsls	r3, r1, #10
 80066aa:	4621      	mov	r1, r4
 80066ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066b0:	4621      	mov	r1, r4
 80066b2:	028a      	lsls	r2, r1, #10
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	2200      	movs	r2, #0
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	60fa      	str	r2, [r7, #12]
 80066c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c4:	f7fa f9d2 	bl	8000a6c <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4613      	mov	r3, r2
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	3301      	adds	r3, #1
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80066e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetSysClockFreq+0x184>)
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3740      	adds	r7, #64	; 0x40
 80066f8:	46bd      	mov	sp, r7
 80066fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066fe:	bf00      	nop
 8006700:	40023800 	.word	0x40023800
 8006704:	00f42400 	.word	0x00f42400
 8006708:	017d7840 	.word	0x017d7840

0800670c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <HAL_RCC_GetHCLKFreq+0x14>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000000 	.word	0x20000000

08006724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006728:	f7ff fff0 	bl	800670c <HAL_RCC_GetHCLKFreq>
 800672c:	4602      	mov	r2, r0
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	0a9b      	lsrs	r3, r3, #10
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	4903      	ldr	r1, [pc, #12]	; (8006748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800673a:	5ccb      	ldrb	r3, [r1, r3]
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40023800 	.word	0x40023800
 8006748:	0800b11c 	.word	0x0800b11c

0800674c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006750:	f7ff ffdc 	bl	800670c <HAL_RCC_GetHCLKFreq>
 8006754:	4602      	mov	r2, r0
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	0b5b      	lsrs	r3, r3, #13
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	4903      	ldr	r1, [pc, #12]	; (8006770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006762:	5ccb      	ldrb	r3, [r1, r3]
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40023800 	.word	0x40023800
 8006770:	0800b11c 	.word	0x0800b11c

08006774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e041      	b.n	800680a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fc f984 	bl	8002aa8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f000 f9a0 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <HAL_TIM_PWM_Start+0x24>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	e022      	b.n	800687e <HAL_TIM_PWM_Start+0x6a>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b04      	cmp	r3, #4
 800683c:	d109      	bne.n	8006852 <HAL_TIM_PWM_Start+0x3e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b01      	cmp	r3, #1
 8006848:	bf14      	ite	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2300      	moveq	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	e015      	b.n	800687e <HAL_TIM_PWM_Start+0x6a>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b08      	cmp	r3, #8
 8006856:	d109      	bne.n	800686c <HAL_TIM_PWM_Start+0x58>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b01      	cmp	r3, #1
 8006862:	bf14      	ite	ne
 8006864:	2301      	movne	r3, #1
 8006866:	2300      	moveq	r3, #0
 8006868:	b2db      	uxtb	r3, r3
 800686a:	e008      	b.n	800687e <HAL_TIM_PWM_Start+0x6a>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	bf14      	ite	ne
 8006878:	2301      	movne	r3, #1
 800687a:	2300      	moveq	r3, #0
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e068      	b.n	8006958 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_TIM_PWM_Start+0x82>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006894:	e013      	b.n	80068be <HAL_TIM_PWM_Start+0xaa>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_PWM_Start+0x92>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068a4:	e00b      	b.n	80068be <HAL_TIM_PWM_Start+0xaa>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Start+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b4:	e003      	b.n	80068be <HAL_TIM_PWM_Start+0xaa>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2202      	movs	r2, #2
 80068ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2201      	movs	r2, #1
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fb22 	bl	8006f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a23      	ldr	r2, [pc, #140]	; (8006960 <HAL_TIM_PWM_Start+0x14c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d107      	bne.n	80068e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <HAL_TIM_PWM_Start+0x14c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_TIM_PWM_Start+0x10e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d013      	beq.n	8006922 <HAL_TIM_PWM_Start+0x10e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_TIM_PWM_Start+0x150>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_TIM_PWM_Start+0x10e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_TIM_PWM_Start+0x154>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_TIM_PWM_Start+0x10e>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a16      	ldr	r2, [pc, #88]	; (800696c <HAL_TIM_PWM_Start+0x158>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_TIM_PWM_Start+0x10e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a14      	ldr	r2, [pc, #80]	; (8006970 <HAL_TIM_PWM_Start+0x15c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d111      	bne.n	8006946 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b06      	cmp	r3, #6
 8006932:	d010      	beq.n	8006956 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006944:	e007      	b.n	8006956 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40014000 	.word	0x40014000

08006974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800698e:	2302      	movs	r3, #2
 8006990:	e0ae      	b.n	8006af0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b0c      	cmp	r3, #12
 800699e:	f200 809f 	bhi.w	8006ae0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069dd 	.word	0x080069dd
 80069ac:	08006ae1 	.word	0x08006ae1
 80069b0:	08006ae1 	.word	0x08006ae1
 80069b4:	08006ae1 	.word	0x08006ae1
 80069b8:	08006a1d 	.word	0x08006a1d
 80069bc:	08006ae1 	.word	0x08006ae1
 80069c0:	08006ae1 	.word	0x08006ae1
 80069c4:	08006ae1 	.word	0x08006ae1
 80069c8:	08006a5f 	.word	0x08006a5f
 80069cc:	08006ae1 	.word	0x08006ae1
 80069d0:	08006ae1 	.word	0x08006ae1
 80069d4:	08006ae1 	.word	0x08006ae1
 80069d8:	08006a9f 	.word	0x08006a9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f908 	bl	8006bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0208 	orr.w	r2, r2, #8
 80069f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699a      	ldr	r2, [r3, #24]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6999      	ldr	r1, [r3, #24]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	691a      	ldr	r2, [r3, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	619a      	str	r2, [r3, #24]
      break;
 8006a1a:	e064      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f94e 	bl	8006cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6999      	ldr	r1, [r3, #24]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	021a      	lsls	r2, r3, #8
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]
      break;
 8006a5c:	e043      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f999 	bl	8006d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0204 	bic.w	r2, r2, #4
 8006a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69d9      	ldr	r1, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	61da      	str	r2, [r3, #28]
      break;
 8006a9c:	e023      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 f9e3 	bl	8006e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69da      	ldr	r2, [r3, #28]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	69d9      	ldr	r1, [r3, #28]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	021a      	lsls	r2, r3, #8
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	61da      	str	r2, [r3, #28]
      break;
 8006ade:	e002      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a34      	ldr	r2, [pc, #208]	; (8006bdc <TIM_Base_SetConfig+0xe4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00f      	beq.n	8006b30 <TIM_Base_SetConfig+0x38>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d00b      	beq.n	8006b30 <TIM_Base_SetConfig+0x38>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a31      	ldr	r2, [pc, #196]	; (8006be0 <TIM_Base_SetConfig+0xe8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_Base_SetConfig+0x38>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a30      	ldr	r2, [pc, #192]	; (8006be4 <TIM_Base_SetConfig+0xec>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0x38>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2f      	ldr	r2, [pc, #188]	; (8006be8 <TIM_Base_SetConfig+0xf0>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d108      	bne.n	8006b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <TIM_Base_SetConfig+0xe4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01b      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d017      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a22      	ldr	r2, [pc, #136]	; (8006be0 <TIM_Base_SetConfig+0xe8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <TIM_Base_SetConfig+0xec>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00f      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <TIM_Base_SetConfig+0xf0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <TIM_Base_SetConfig+0xf4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <TIM_Base_SetConfig+0xf8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_Base_SetConfig+0x8a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a1d      	ldr	r2, [pc, #116]	; (8006bf4 <TIM_Base_SetConfig+0xfc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d108      	bne.n	8006b94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <TIM_Base_SetConfig+0xe4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d103      	bne.n	8006bc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	615a      	str	r2, [r3, #20]
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800

08006bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f023 0201 	bic.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 0302 	bic.w	r3, r3, #2
 8006c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <TIM_OC1_SetConfig+0xc8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d10c      	bne.n	8006c6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0308 	bic.w	r3, r3, #8
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0304 	bic.w	r3, r3, #4
 8006c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <TIM_OC1_SetConfig+0xc8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d111      	bne.n	8006c9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	621a      	str	r2, [r3, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40010000 	.word	0x40010000

08006cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0210 	bic.w	r2, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0320 	bic.w	r3, r3, #32
 8006d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	; (8006d98 <TIM_OC2_SetConfig+0xd4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10d      	bne.n	8006d40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <TIM_OC2_SetConfig+0xd4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d113      	bne.n	8006d70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40010000 	.word	0x40010000

08006d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <TIM_OC3_SetConfig+0xd0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10d      	bne.n	8006e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a14      	ldr	r2, [pc, #80]	; (8006e6c <TIM_OC3_SetConfig+0xd0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d113      	bne.n	8006e46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	621a      	str	r2, [r3, #32]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40010000 	.word	0x40010000

08006e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	031b      	lsls	r3, r3, #12
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a10      	ldr	r2, [pc, #64]	; (8006f0c <TIM_OC4_SetConfig+0x9c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d109      	bne.n	8006ee4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	019b      	lsls	r3, r3, #6
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000

08006f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2201      	movs	r2, #1
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	fa01 f303 	lsl.w	r3, r1, r3
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e050      	b.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc0:	d013      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a18      	ldr	r2, [pc, #96]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a15      	ldr	r2, [pc, #84]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a13      	ldr	r2, [pc, #76]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40014000 	.word	0x40014000

08007038 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800704c:	2b01      	cmp	r3, #1
 800704e:	d101      	bne.n	8007054 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007050:	2302      	movs	r3, #2
 8007052:	e03d      	b.n	80070d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e03f      	b.n	800716e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fb fe08 	bl	8002d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2224      	movs	r2, #36	; 0x24
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800711e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fddf 	bl	8007ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695a      	ldr	r2, [r3, #20]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2220      	movs	r2, #32
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b08a      	sub	sp, #40	; 0x28
 800717a:	af02      	add	r7, sp, #8
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	603b      	str	r3, [r7, #0]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b20      	cmp	r3, #32
 8007194:	d17c      	bne.n	8007290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_UART_Transmit+0x2c>
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e075      	b.n	8007292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_UART_Transmit+0x3e>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e06e      	b.n	8007292 <HAL_UART_Transmit+0x11c>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ca:	f7fb fe85 	bl	8002ed8 <HAL_GetTick>
 80071ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	88fa      	ldrh	r2, [r7, #6]
 80071da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e4:	d108      	bne.n	80071f8 <HAL_UART_Transmit+0x82>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	e003      	b.n	8007200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007208:	e02a      	b.n	8007260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2200      	movs	r2, #0
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fb1f 	bl	8007858 <UART_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e036      	b.n	8007292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10b      	bne.n	8007242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	3302      	adds	r3, #2
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	e007      	b.n	8007252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	781a      	ldrb	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1cf      	bne.n	800720a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2140      	movs	r1, #64	; 0x40
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 faef 	bl	8007858 <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e006      	b.n	8007292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	e000      	b.n	8007292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007290:	2302      	movs	r3, #2
  }
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	4613      	mov	r3, r2
 80072a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d11d      	bne.n	80072f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_UART_Receive_IT+0x26>
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e016      	b.n	80072f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_UART_Receive_IT+0x38>
 80072ce:	2302      	movs	r3, #2
 80072d0:	e00f      	b.n	80072f2 <HAL_UART_Receive_IT+0x58>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f000 fb24 	bl	8007934 <UART_Start_Receive_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	e000      	b.n	80072f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072f0:	2302      	movs	r3, #2
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b0ba      	sub	sp, #232	; 0xe8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800732e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800733a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10f      	bne.n	8007362 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <HAL_UART_IRQHandler+0x66>
 800734e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc07 	bl	8007b6e <UART_Receive_IT>
      return;
 8007360:	e256      	b.n	8007810 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80de 	beq.w	8007528 <HAL_UART_IRQHandler+0x22c>
 800736c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d106      	bne.n	8007386 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80d1 	beq.w	8007528 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <HAL_UART_IRQHandler+0xae>
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <HAL_UART_IRQHandler+0xd2>
 80073b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f043 0202 	orr.w	r2, r3, #2
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00b      	beq.n	80073f2 <HAL_UART_IRQHandler+0xf6>
 80073da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f043 0204 	orr.w	r2, r3, #4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d011      	beq.n	8007422 <HAL_UART_IRQHandler+0x126>
 80073fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d105      	bne.n	8007416 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800740a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f043 0208 	orr.w	r2, r3, #8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 81ed 	beq.w	8007806 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800742c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007430:	f003 0320 	and.w	r3, r3, #32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_UART_IRQHandler+0x14e>
 8007438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800743c:	f003 0320 	and.w	r3, r3, #32
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb92 	bl	8007b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b40      	cmp	r3, #64	; 0x40
 8007456:	bf0c      	ite	eq
 8007458:	2301      	moveq	r3, #1
 800745a:	2300      	movne	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	f003 0308 	and.w	r3, r3, #8
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <HAL_UART_IRQHandler+0x17a>
 800746e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d04f      	beq.n	8007516 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa9a 	bl	80079b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007486:	2b40      	cmp	r3, #64	; 0x40
 8007488:	d141      	bne.n	800750e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3314      	adds	r3, #20
 80074b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1d9      	bne.n	800748a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d013      	beq.n	8007506 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	4a7d      	ldr	r2, [pc, #500]	; (80076d8 <HAL_UART_IRQHandler+0x3dc>)
 80074e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fb fe81 	bl	80031f2 <HAL_DMA_Abort_IT>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d016      	beq.n	8007524 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007500:	4610      	mov	r0, r2
 8007502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007504:	e00e      	b.n	8007524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f990 	bl	800782c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800750c:	e00a      	b.n	8007524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f98c 	bl	800782c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007514:	e006      	b.n	8007524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f988 	bl	800782c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007522:	e170      	b.n	8007806 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007524:	bf00      	nop
    return;
 8007526:	e16e      	b.n	8007806 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	2b01      	cmp	r3, #1
 800752e:	f040 814a 	bne.w	80077c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b00      	cmp	r3, #0
 800753c:	f000 8143 	beq.w	80077c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 813c 	beq.w	80077c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	60bb      	str	r3, [r7, #8]
 8007562:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	f040 80b4 	bne.w	80076dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8140 	beq.w	800780a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800758e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007592:	429a      	cmp	r2, r3
 8007594:	f080 8139 	bcs.w	800780a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800759e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075aa:	f000 8088 	beq.w	80076be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075bc:	e853 3f00 	ldrex	r3, [r3]
 80075c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80075da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80075e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80075f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1d9      	bne.n	80075ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3314      	adds	r3, #20
 8007600:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800760a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800760c:	f023 0301 	bic.w	r3, r3, #1
 8007610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3314      	adds	r3, #20
 800761a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800761e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007622:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e1      	bne.n	80075fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3314      	adds	r3, #20
 800763c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007640:	e853 3f00 	ldrex	r3, [r3]
 8007644:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3314      	adds	r3, #20
 8007656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800765a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800765c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e3      	bne.n	8007636 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	330c      	adds	r3, #12
 8007682:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800768c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768e:	f023 0310 	bic.w	r3, r3, #16
 8007692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80076a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e3      	bne.n	800767c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fb fd2a 	bl	8003112 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f8b6 	bl	8007840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076d4:	e099      	b.n	800780a <HAL_UART_IRQHandler+0x50e>
 80076d6:	bf00      	nop
 80076d8:	08007a77 	.word	0x08007a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 808b 	beq.w	800780e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80076f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f000 8086 	beq.w	800780e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	330c      	adds	r3, #12
 8007708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	330c      	adds	r3, #12
 8007722:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007726:	647a      	str	r2, [r7, #68]	; 0x44
 8007728:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800772c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e3      	bne.n	8007702 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3314      	adds	r3, #20
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	623b      	str	r3, [r7, #32]
   return(result);
 800774a:	6a3b      	ldr	r3, [r7, #32]
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800775e:	633a      	str	r2, [r7, #48]	; 0x30
 8007760:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077a4:	61fa      	str	r2, [r7, #28]
 80077a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	69b9      	ldr	r1, [r7, #24]
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	617b      	str	r3, [r7, #20]
   return(result);
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e3      	bne.n	8007780 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f83e 	bl	8007840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077c4:	e023      	b.n	800780e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <HAL_UART_IRQHandler+0x4ea>
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f95d 	bl	8007a9e <UART_Transmit_IT>
    return;
 80077e4:	e014      	b.n	8007810 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80077e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <HAL_UART_IRQHandler+0x514>
 80077f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d008      	beq.n	8007810 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f99d 	bl	8007b3e <UART_EndTransmit_IT>
    return;
 8007804:	e004      	b.n	8007810 <HAL_UART_IRQHandler+0x514>
    return;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_UART_IRQHandler+0x514>
      return;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_UART_IRQHandler+0x514>
      return;
 800780e:	bf00      	nop
  }
}
 8007810:	37e8      	adds	r7, #232	; 0xe8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop

08007818 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	460b      	mov	r3, r1
 800784a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b090      	sub	sp, #64	; 0x40
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	4613      	mov	r3, r2
 8007866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007868:	e050      	b.n	800790c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007870:	d04c      	beq.n	800790c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <UART_WaitOnFlagUntilTimeout+0x30>
 8007878:	f7fb fb2e 	bl	8002ed8 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007884:	429a      	cmp	r2, r3
 8007886:	d241      	bcs.n	800790c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	330c      	adds	r3, #12
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	330c      	adds	r3, #12
 80078a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078a8:	637a      	str	r2, [r7, #52]	; 0x34
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e5      	bne.n	8007888 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3314      	adds	r3, #20
 80078c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	613b      	str	r3, [r7, #16]
   return(result);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f023 0301 	bic.w	r3, r3, #1
 80078d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3314      	adds	r3, #20
 80078da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078dc:	623a      	str	r2, [r7, #32]
 80078de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	6a3a      	ldr	r2, [r7, #32]
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e5      	bne.n	80078bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e00f      	b.n	800792c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4013      	ands	r3, r2
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	bf0c      	ite	eq
 800791c:	2301      	moveq	r3, #1
 800791e:	2300      	movne	r3, #0
 8007920:	b2db      	uxtb	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	429a      	cmp	r2, r3
 8007928:	d09f      	beq.n	800786a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3740      	adds	r7, #64	; 0x40
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2222      	movs	r2, #34	; 0x22
 800795e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007980:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695a      	ldr	r2, [r3, #20]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0201 	orr.w	r2, r2, #1
 8007990:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68da      	ldr	r2, [r3, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0220 	orr.w	r2, r2, #32
 80079a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b095      	sub	sp, #84	; 0x54
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80079d8:	643a      	str	r2, [r7, #64]	; 0x40
 80079da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f023 0301 	bic.w	r3, r3, #1
 8007a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3314      	adds	r3, #20
 8007a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e5      	bne.n	80079ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d119      	bne.n	8007a5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f023 0310 	bic.w	r3, r3, #16
 8007a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	330c      	adds	r3, #12
 8007a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a48:	61ba      	str	r2, [r7, #24]
 8007a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	6979      	ldr	r1, [r7, #20]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	613b      	str	r3, [r7, #16]
   return(result);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007a6a:	bf00      	nop
 8007a6c:	3754      	adds	r7, #84	; 0x54
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b084      	sub	sp, #16
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f7ff fecb 	bl	800782c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b085      	sub	sp, #20
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b21      	cmp	r3, #33	; 0x21
 8007ab0:	d13e      	bne.n	8007b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aba:	d114      	bne.n	8007ae6 <UART_Transmit_IT+0x48>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d110      	bne.n	8007ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	1c9a      	adds	r2, r3, #2
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	621a      	str	r2, [r3, #32]
 8007ae4:	e008      	b.n	8007af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	1c59      	adds	r1, r3, #1
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6211      	str	r1, [r2, #32]
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4619      	mov	r1, r3
 8007b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10f      	bne.n	8007b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e000      	b.n	8007b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b30:	2302      	movs	r3, #2
  }
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fe5a 	bl	8007818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b08c      	sub	sp, #48	; 0x30
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b22      	cmp	r3, #34	; 0x22
 8007b80:	f040 80ab 	bne.w	8007cda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8c:	d117      	bne.n	8007bbe <UART_Receive_IT+0x50>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d113      	bne.n	8007bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	1c9a      	adds	r2, r3, #2
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	629a      	str	r2, [r3, #40]	; 0x28
 8007bbc:	e026      	b.n	8007c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd0:	d007      	beq.n	8007be2 <UART_Receive_IT+0x74>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <UART_Receive_IT+0x82>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	e008      	b.n	8007c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d15a      	bne.n	8007cd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0220 	bic.w	r2, r2, #32
 8007c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68da      	ldr	r2, [r3, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695a      	ldr	r2, [r3, #20]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0201 	bic.w	r2, r2, #1
 8007c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d135      	bne.n	8007ccc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	330c      	adds	r3, #12
 8007c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	613b      	str	r3, [r7, #16]
   return(result);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f023 0310 	bic.w	r3, r3, #16
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	330c      	adds	r3, #12
 8007c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c86:	623a      	str	r2, [r7, #32]
 8007c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	69f9      	ldr	r1, [r7, #28]
 8007c8c:	6a3a      	ldr	r2, [r7, #32]
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e5      	bne.n	8007c66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d10a      	bne.n	8007cbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f7ff fdbb 	bl	8007840 <HAL_UARTEx_RxEventCallback>
 8007cca:	e002      	b.n	8007cd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7fa f9ad 	bl	800202c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e002      	b.n	8007cdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e000      	b.n	8007cdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007cda:	2302      	movs	r3, #2
  }
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3730      	adds	r7, #48	; 0x30
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ce8:	b0c0      	sub	sp, #256	; 0x100
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d00:	68d9      	ldr	r1, [r3, #12]
 8007d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	ea40 0301 	orr.w	r3, r0, r1
 8007d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d3c:	f021 010c 	bic.w	r1, r1, #12
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5e:	6999      	ldr	r1, [r3, #24]
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	ea40 0301 	orr.w	r3, r0, r1
 8007d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	4b8f      	ldr	r3, [pc, #572]	; (8007fb0 <UART_SetConfig+0x2cc>)
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d005      	beq.n	8007d84 <UART_SetConfig+0xa0>
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4b8d      	ldr	r3, [pc, #564]	; (8007fb4 <UART_SetConfig+0x2d0>)
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d104      	bne.n	8007d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d84:	f7fe fce2 	bl	800674c <HAL_RCC_GetPCLK2Freq>
 8007d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007d8c:	e003      	b.n	8007d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d8e:	f7fe fcc9 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 8007d92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da0:	f040 810c 	bne.w	8007fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007db6:	4622      	mov	r2, r4
 8007db8:	462b      	mov	r3, r5
 8007dba:	1891      	adds	r1, r2, r2
 8007dbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8007dbe:	415b      	adcs	r3, r3
 8007dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	eb12 0801 	adds.w	r8, r2, r1
 8007dcc:	4629      	mov	r1, r5
 8007dce:	eb43 0901 	adc.w	r9, r3, r1
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007de6:	4690      	mov	r8, r2
 8007de8:	4699      	mov	r9, r3
 8007dea:	4623      	mov	r3, r4
 8007dec:	eb18 0303 	adds.w	r3, r8, r3
 8007df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007df4:	462b      	mov	r3, r5
 8007df6:	eb49 0303 	adc.w	r3, r9, r3
 8007dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e12:	460b      	mov	r3, r1
 8007e14:	18db      	adds	r3, r3, r3
 8007e16:	653b      	str	r3, [r7, #80]	; 0x50
 8007e18:	4613      	mov	r3, r2
 8007e1a:	eb42 0303 	adc.w	r3, r2, r3
 8007e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e28:	f7f8 fe20 	bl	8000a6c <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4b61      	ldr	r3, [pc, #388]	; (8007fb8 <UART_SetConfig+0x2d4>)
 8007e32:	fba3 2302 	umull	r2, r3, r3, r2
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	011c      	lsls	r4, r3, #4
 8007e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	1891      	adds	r1, r2, r2
 8007e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e54:	415b      	adcs	r3, r3
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8007e62:	4649      	mov	r1, r9
 8007e64:	eb43 0b01 	adc.w	fp, r3, r1
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e7c:	4692      	mov	sl, r2
 8007e7e:	469b      	mov	fp, r3
 8007e80:	4643      	mov	r3, r8
 8007e82:	eb1a 0303 	adds.w	r3, sl, r3
 8007e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8007e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	18db      	adds	r3, r3, r3
 8007eac:	643b      	str	r3, [r7, #64]	; 0x40
 8007eae:	4613      	mov	r3, r2
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007ebe:	f7f8 fdd5 	bl	8000a6c <__aeabi_uldivmod>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4b3b      	ldr	r3, [pc, #236]	; (8007fb8 <UART_SetConfig+0x2d4>)
 8007eca:	fba3 2301 	umull	r2, r3, r3, r1
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	2264      	movs	r2, #100	; 0x64
 8007ed2:	fb02 f303 	mul.w	r3, r2, r3
 8007ed6:	1acb      	subs	r3, r1, r3
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007ede:	4b36      	ldr	r3, [pc, #216]	; (8007fb8 <UART_SetConfig+0x2d4>)
 8007ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eec:	441c      	add	r4, r3
 8007eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f00:	4642      	mov	r2, r8
 8007f02:	464b      	mov	r3, r9
 8007f04:	1891      	adds	r1, r2, r2
 8007f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f08:	415b      	adcs	r3, r3
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f10:	4641      	mov	r1, r8
 8007f12:	1851      	adds	r1, r2, r1
 8007f14:	6339      	str	r1, [r7, #48]	; 0x30
 8007f16:	4649      	mov	r1, r9
 8007f18:	414b      	adcs	r3, r1
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	f04f 0300 	mov.w	r3, #0
 8007f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f28:	4659      	mov	r1, fp
 8007f2a:	00cb      	lsls	r3, r1, #3
 8007f2c:	4651      	mov	r1, sl
 8007f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f32:	4651      	mov	r1, sl
 8007f34:	00ca      	lsls	r2, r1, #3
 8007f36:	4610      	mov	r0, r2
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	189b      	adds	r3, r3, r2
 8007f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f44:	464b      	mov	r3, r9
 8007f46:	460a      	mov	r2, r1
 8007f48:	eb42 0303 	adc.w	r3, r2, r3
 8007f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007f64:	460b      	mov	r3, r1
 8007f66:	18db      	adds	r3, r3, r3
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	eb42 0303 	adc.w	r3, r2, r3
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f7a:	f7f8 fd77 	bl	8000a6c <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <UART_SetConfig+0x2d4>)
 8007f84:	fba3 1302 	umull	r1, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	2164      	movs	r1, #100	; 0x64
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	3332      	adds	r3, #50	; 0x32
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <UART_SetConfig+0x2d4>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	f003 0207 	and.w	r2, r3, #7
 8007fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4422      	add	r2, r4
 8007faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007fac:	e105      	b.n	80081ba <UART_SetConfig+0x4d6>
 8007fae:	bf00      	nop
 8007fb0:	40011000 	.word	0x40011000
 8007fb4:	40011400 	.word	0x40011400
 8007fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007fce:	4642      	mov	r2, r8
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	1891      	adds	r1, r2, r2
 8007fd4:	6239      	str	r1, [r7, #32]
 8007fd6:	415b      	adcs	r3, r3
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fde:	4641      	mov	r1, r8
 8007fe0:	1854      	adds	r4, r2, r1
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	eb43 0501 	adc.w	r5, r3, r1
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	00eb      	lsls	r3, r5, #3
 8007ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ff6:	00e2      	lsls	r2, r4, #3
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	461d      	mov	r5, r3
 8007ffc:	4643      	mov	r3, r8
 8007ffe:	18e3      	adds	r3, r4, r3
 8008000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008004:	464b      	mov	r3, r9
 8008006:	eb45 0303 	adc.w	r3, r5, r3
 800800a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800800e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800801a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800801e:	f04f 0200 	mov.w	r2, #0
 8008022:	f04f 0300 	mov.w	r3, #0
 8008026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800802a:	4629      	mov	r1, r5
 800802c:	008b      	lsls	r3, r1, #2
 800802e:	4621      	mov	r1, r4
 8008030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008034:	4621      	mov	r1, r4
 8008036:	008a      	lsls	r2, r1, #2
 8008038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800803c:	f7f8 fd16 	bl	8000a6c <__aeabi_uldivmod>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4b60      	ldr	r3, [pc, #384]	; (80081c8 <UART_SetConfig+0x4e4>)
 8008046:	fba3 2302 	umull	r2, r3, r3, r2
 800804a:	095b      	lsrs	r3, r3, #5
 800804c:	011c      	lsls	r4, r3, #4
 800804e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008052:	2200      	movs	r2, #0
 8008054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800805c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008060:	4642      	mov	r2, r8
 8008062:	464b      	mov	r3, r9
 8008064:	1891      	adds	r1, r2, r2
 8008066:	61b9      	str	r1, [r7, #24]
 8008068:	415b      	adcs	r3, r3
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008070:	4641      	mov	r1, r8
 8008072:	1851      	adds	r1, r2, r1
 8008074:	6139      	str	r1, [r7, #16]
 8008076:	4649      	mov	r1, r9
 8008078:	414b      	adcs	r3, r1
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008088:	4659      	mov	r1, fp
 800808a:	00cb      	lsls	r3, r1, #3
 800808c:	4651      	mov	r1, sl
 800808e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008092:	4651      	mov	r1, sl
 8008094:	00ca      	lsls	r2, r1, #3
 8008096:	4610      	mov	r0, r2
 8008098:	4619      	mov	r1, r3
 800809a:	4603      	mov	r3, r0
 800809c:	4642      	mov	r2, r8
 800809e:	189b      	adds	r3, r3, r2
 80080a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080a4:	464b      	mov	r3, r9
 80080a6:	460a      	mov	r2, r1
 80080a8:	eb42 0303 	adc.w	r3, r2, r3
 80080ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80080ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80080bc:	f04f 0200 	mov.w	r2, #0
 80080c0:	f04f 0300 	mov.w	r3, #0
 80080c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80080c8:	4649      	mov	r1, r9
 80080ca:	008b      	lsls	r3, r1, #2
 80080cc:	4641      	mov	r1, r8
 80080ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080d2:	4641      	mov	r1, r8
 80080d4:	008a      	lsls	r2, r1, #2
 80080d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80080da:	f7f8 fcc7 	bl	8000a6c <__aeabi_uldivmod>
 80080de:	4602      	mov	r2, r0
 80080e0:	460b      	mov	r3, r1
 80080e2:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <UART_SetConfig+0x4e4>)
 80080e4:	fba3 1302 	umull	r1, r3, r3, r2
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	2164      	movs	r1, #100	; 0x64
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	3332      	adds	r3, #50	; 0x32
 80080f6:	4a34      	ldr	r2, [pc, #208]	; (80081c8 <UART_SetConfig+0x4e4>)
 80080f8:	fba2 2303 	umull	r2, r3, r2, r3
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008102:	441c      	add	r4, r3
 8008104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008108:	2200      	movs	r2, #0
 800810a:	673b      	str	r3, [r7, #112]	; 0x70
 800810c:	677a      	str	r2, [r7, #116]	; 0x74
 800810e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008112:	4642      	mov	r2, r8
 8008114:	464b      	mov	r3, r9
 8008116:	1891      	adds	r1, r2, r2
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	415b      	adcs	r3, r3
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008122:	4641      	mov	r1, r8
 8008124:	1851      	adds	r1, r2, r1
 8008126:	6039      	str	r1, [r7, #0]
 8008128:	4649      	mov	r1, r9
 800812a:	414b      	adcs	r3, r1
 800812c:	607b      	str	r3, [r7, #4]
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800813a:	4659      	mov	r1, fp
 800813c:	00cb      	lsls	r3, r1, #3
 800813e:	4651      	mov	r1, sl
 8008140:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008144:	4651      	mov	r1, sl
 8008146:	00ca      	lsls	r2, r1, #3
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
 800814c:	4603      	mov	r3, r0
 800814e:	4642      	mov	r2, r8
 8008150:	189b      	adds	r3, r3, r2
 8008152:	66bb      	str	r3, [r7, #104]	; 0x68
 8008154:	464b      	mov	r3, r9
 8008156:	460a      	mov	r2, r1
 8008158:	eb42 0303 	adc.w	r3, r2, r3
 800815c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	663b      	str	r3, [r7, #96]	; 0x60
 8008168:	667a      	str	r2, [r7, #100]	; 0x64
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008176:	4649      	mov	r1, r9
 8008178:	008b      	lsls	r3, r1, #2
 800817a:	4641      	mov	r1, r8
 800817c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008180:	4641      	mov	r1, r8
 8008182:	008a      	lsls	r2, r1, #2
 8008184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008188:	f7f8 fc70 	bl	8000a6c <__aeabi_uldivmod>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <UART_SetConfig+0x4e4>)
 8008192:	fba3 1302 	umull	r1, r3, r3, r2
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	2164      	movs	r1, #100	; 0x64
 800819a:	fb01 f303 	mul.w	r3, r1, r3
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	3332      	adds	r3, #50	; 0x32
 80081a4:	4a08      	ldr	r2, [pc, #32]	; (80081c8 <UART_SetConfig+0x4e4>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f003 020f 	and.w	r2, r3, #15
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4422      	add	r2, r4
 80081b8:	609a      	str	r2, [r3, #8]
}
 80081ba:	bf00      	nop
 80081bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80081c0:	46bd      	mov	sp, r7
 80081c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081c6:	bf00      	nop
 80081c8:	51eb851f 	.word	0x51eb851f

080081cc <__NVIC_SetPriority>:
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	4603      	mov	r3, r0
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	db0a      	blt.n	80081f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	490c      	ldr	r1, [pc, #48]	; (8008218 <__NVIC_SetPriority+0x4c>)
 80081e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ea:	0112      	lsls	r2, r2, #4
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	440b      	add	r3, r1
 80081f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80081f4:	e00a      	b.n	800820c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	4908      	ldr	r1, [pc, #32]	; (800821c <__NVIC_SetPriority+0x50>)
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	3b04      	subs	r3, #4
 8008204:	0112      	lsls	r2, r2, #4
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	440b      	add	r3, r1
 800820a:	761a      	strb	r2, [r3, #24]
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	e000e100 	.word	0xe000e100
 800821c:	e000ed00 	.word	0xe000ed00

08008220 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008224:	2100      	movs	r1, #0
 8008226:	f06f 0004 	mvn.w	r0, #4
 800822a:	f7ff ffcf 	bl	80081cc <__NVIC_SetPriority>
#endif
}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800823a:	f3ef 8305 	mrs	r3, IPSR
 800823e:	603b      	str	r3, [r7, #0]
  return(result);
 8008240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008246:	f06f 0305 	mvn.w	r3, #5
 800824a:	607b      	str	r3, [r7, #4]
 800824c:	e00c      	b.n	8008268 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800824e:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <osKernelInitialize+0x44>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <osKernelInitialize+0x44>)
 8008258:	2201      	movs	r2, #1
 800825a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800825c:	2300      	movs	r3, #0
 800825e:	607b      	str	r3, [r7, #4]
 8008260:	e002      	b.n	8008268 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008262:	f04f 33ff 	mov.w	r3, #4294967295
 8008266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008268:	687b      	ldr	r3, [r7, #4]
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	200003c4 	.word	0x200003c4

0800827c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008282:	f3ef 8305 	mrs	r3, IPSR
 8008286:	603b      	str	r3, [r7, #0]
  return(result);
 8008288:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <osKernelStart+0x1a>
    stat = osErrorISR;
 800828e:	f06f 0305 	mvn.w	r3, #5
 8008292:	607b      	str	r3, [r7, #4]
 8008294:	e010      	b.n	80082b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <osKernelStart+0x48>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d109      	bne.n	80082b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800829e:	f7ff ffbf 	bl	8008220 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082a2:	4b08      	ldr	r3, [pc, #32]	; (80082c4 <osKernelStart+0x48>)
 80082a4:	2202      	movs	r2, #2
 80082a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082a8:	f001 f866 	bl	8009378 <vTaskStartScheduler>
      stat = osOK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	e002      	b.n	80082b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295
 80082b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082b8:	687b      	ldr	r3, [r7, #4]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	200003c4 	.word	0x200003c4

080082c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08e      	sub	sp, #56	; 0x38
 80082cc:	af04      	add	r7, sp, #16
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082d8:	f3ef 8305 	mrs	r3, IPSR
 80082dc:	617b      	str	r3, [r7, #20]
  return(result);
 80082de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d17e      	bne.n	80083e2 <osThreadNew+0x11a>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d07b      	beq.n	80083e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80082ea:	2380      	movs	r3, #128	; 0x80
 80082ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082ee:	2318      	movs	r3, #24
 80082f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80082f6:	f04f 33ff 	mov.w	r3, #4294967295
 80082fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d045      	beq.n	800838e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <osThreadNew+0x48>
        name = attr->name;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <osThreadNew+0x6e>
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	2b38      	cmp	r3, #56	; 0x38
 8008328:	d805      	bhi.n	8008336 <osThreadNew+0x6e>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <osThreadNew+0x72>
        return (NULL);
 8008336:	2300      	movs	r3, #0
 8008338:	e054      	b.n	80083e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	089b      	lsrs	r3, r3, #2
 8008348:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00e      	beq.n	8008370 <osThreadNew+0xa8>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	2b5b      	cmp	r3, #91	; 0x5b
 8008358:	d90a      	bls.n	8008370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <osThreadNew+0xa8>
        mem = 1;
 800836a:	2301      	movs	r3, #1
 800836c:	61bb      	str	r3, [r7, #24]
 800836e:	e010      	b.n	8008392 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10c      	bne.n	8008392 <osThreadNew+0xca>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d108      	bne.n	8008392 <osThreadNew+0xca>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <osThreadNew+0xca>
          mem = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	61bb      	str	r3, [r7, #24]
 800838c:	e001      	b.n	8008392 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d110      	bne.n	80083ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a0:	9202      	str	r2, [sp, #8]
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fe0c 	bl	8008fcc <xTaskCreateStatic>
 80083b4:	4603      	mov	r3, r0
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	e013      	b.n	80083e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d110      	bne.n	80083e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	f107 0310 	add.w	r3, r7, #16
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fe57 	bl	8009086 <xTaskCreate>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d001      	beq.n	80083e2 <osThreadNew+0x11a>
            hTask = NULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083e2:	693b      	ldr	r3, [r7, #16]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3728      	adds	r7, #40	; 0x28
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083f4:	f3ef 8305 	mrs	r3, IPSR
 80083f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80083fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <osDelay+0x1c>
    stat = osErrorISR;
 8008400:	f06f 0305 	mvn.w	r3, #5
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e007      	b.n	8008418 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 ff7c 	bl	8009310 <vTaskDelay>
    }
  }

  return (stat);
 8008418:	68fb      	ldr	r3, [r7, #12]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a07      	ldr	r2, [pc, #28]	; (8008450 <vApplicationGetIdleTaskMemory+0x2c>)
 8008434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	4a06      	ldr	r2, [pc, #24]	; (8008454 <vApplicationGetIdleTaskMemory+0x30>)
 800843a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2280      	movs	r2, #128	; 0x80
 8008440:	601a      	str	r2, [r3, #0]
}
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	200003c8 	.word	0x200003c8
 8008454:	20000424 	.word	0x20000424

08008458 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4a07      	ldr	r2, [pc, #28]	; (8008484 <vApplicationGetTimerTaskMemory+0x2c>)
 8008468:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	4a06      	ldr	r2, [pc, #24]	; (8008488 <vApplicationGetTimerTaskMemory+0x30>)
 800846e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008476:	601a      	str	r2, [r3, #0]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	20000624 	.word	0x20000624
 8008488:	20000680 	.word	0x20000680

0800848c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f103 0208 	add.w	r2, r3, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f04f 32ff 	mov.w	r2, #4294967295
 80084a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f103 0208 	add.w	r2, r3, #8
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f103 0208 	add.w	r2, r3, #8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	601a      	str	r2, [r3, #0]
}
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800852e:	b480      	push	{r7}
 8008530:	b085      	sub	sp, #20
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d103      	bne.n	800854e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e00c      	b.n	8008568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3308      	adds	r3, #8
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	e002      	b.n	800855c <vListInsert+0x2e>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	d2f6      	bcs.n	8008556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6892      	ldr	r2, [r2, #8]
 80085b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6852      	ldr	r2, [r2, #4]
 80085c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d103      	bne.n	80085d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	1e5a      	subs	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10a      	bne.n	800861e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800861a:	bf00      	nop
 800861c:	e7fe      	b.n	800861c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800861e:	f002 f851 	bl	800a6c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862a:	68f9      	ldr	r1, [r7, #12]
 800862c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	441a      	add	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864e:	3b01      	subs	r3, #1
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	441a      	add	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	22ff      	movs	r2, #255	; 0xff
 800866a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d114      	bne.n	800869e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01a      	beq.n	80086b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	3310      	adds	r3, #16
 8008680:	4618      	mov	r0, r3
 8008682:	f001 f903 	bl	800988c <xTaskRemoveFromEventList>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d012      	beq.n	80086b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800868c:	4b0c      	ldr	r3, [pc, #48]	; (80086c0 <xQueueGenericReset+0xcc>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	e009      	b.n	80086b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3310      	adds	r3, #16
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff fef2 	bl	800848c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3324      	adds	r3, #36	; 0x24
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff feed 	bl	800848c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086b2:	f002 f837 	bl	800a724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086b6:	2301      	movs	r3, #1
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	e000ed04 	.word	0xe000ed04

080086c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08e      	sub	sp, #56	; 0x38
 80086c8:	af02      	add	r7, sp, #8
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
 80086d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10a      	bne.n	800870a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008706:	bf00      	nop
 8008708:	e7fe      	b.n	8008708 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <xQueueGenericCreateStatic+0x52>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <xQueueGenericCreateStatic+0x56>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueGenericCreateStatic+0x58>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	623b      	str	r3, [r7, #32]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <xQueueGenericCreateStatic+0x7e>
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <xQueueGenericCreateStatic+0x82>
 8008742:	2301      	movs	r3, #1
 8008744:	e000      	b.n	8008748 <xQueueGenericCreateStatic+0x84>
 8008746:	2300      	movs	r3, #0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	61fb      	str	r3, [r7, #28]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008762:	2350      	movs	r3, #80	; 0x50
 8008764:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b50      	cmp	r3, #80	; 0x50
 800876a:	d00a      	beq.n	8008782 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	61bb      	str	r3, [r7, #24]
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008782:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00d      	beq.n	80087aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	4613      	mov	r3, r2
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 f805 	bl	80087b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3730      	adds	r7, #48	; 0x30
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d103      	bne.n	80087d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	e002      	b.n	80087d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087e2:	2101      	movs	r1, #1
 80087e4:	69b8      	ldr	r0, [r7, #24]
 80087e6:	f7ff ff05 	bl	80085f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	78fa      	ldrb	r2, [r7, #3]
 80087ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087f2:	bf00      	nop
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
	...

080087fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	; 0x38
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800880a:	2300      	movs	r3, #0
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10a      	bne.n	800882e <xQueueGenericSend+0x32>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800882a:	bf00      	nop
 800882c:	e7fe      	b.n	800882c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <xQueueGenericSend+0x40>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <xQueueGenericSend+0x44>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <xQueueGenericSend+0x46>
 8008840:	2300      	movs	r3, #0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <xQueueGenericSend+0x60>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d103      	bne.n	800886a <xQueueGenericSend+0x6e>
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <xQueueGenericSend+0x72>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueGenericSend+0x74>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <xQueueGenericSend+0x8e>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	623b      	str	r3, [r7, #32]
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800888a:	f001 f9bd 	bl	8009c08 <xTaskGetSchedulerState>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <xQueueGenericSend+0x9e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <xQueueGenericSend+0xa2>
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <xQueueGenericSend+0xa4>
 800889e:	2300      	movs	r3, #0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xQueueGenericSend+0xbe>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	61fb      	str	r3, [r7, #28]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088ba:	f001 ff03 	bl	800a6c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d302      	bcc.n	80088d0 <xQueueGenericSend+0xd4>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d129      	bne.n	8008924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	68b9      	ldr	r1, [r7, #8]
 80088d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088d6:	f000 fa0b 	bl	8008cf0 <prvCopyDataToQueue>
 80088da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d010      	beq.n	8008906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e6:	3324      	adds	r3, #36	; 0x24
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 ffcf 	bl	800988c <xTaskRemoveFromEventList>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d013      	beq.n	800891c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088f4:	4b3f      	ldr	r3, [pc, #252]	; (80089f4 <xQueueGenericSend+0x1f8>)
 80088f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	e00a      	b.n	800891c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800890c:	4b39      	ldr	r3, [pc, #228]	; (80089f4 <xQueueGenericSend+0x1f8>)
 800890e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800891c:	f001 ff02 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 8008920:	2301      	movs	r3, #1
 8008922:	e063      	b.n	80089ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800892a:	f001 fefb 	bl	800a724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800892e:	2300      	movs	r3, #0
 8008930:	e05c      	b.n	80089ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008934:	2b00      	cmp	r3, #0
 8008936:	d106      	bne.n	8008946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008938:	f107 0314 	add.w	r3, r7, #20
 800893c:	4618      	mov	r0, r3
 800893e:	f001 f809 	bl	8009954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008942:	2301      	movs	r3, #1
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008946:	f001 feed 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800894a:	f000 fd7b 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800894e:	f001 feb9 	bl	800a6c4 <vPortEnterCritical>
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008958:	b25b      	sxtb	r3, r3
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d103      	bne.n	8008968 <xQueueGenericSend+0x16c>
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800896e:	b25b      	sxtb	r3, r3
 8008970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008974:	d103      	bne.n	800897e <xQueueGenericSend+0x182>
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800897e:	f001 fed1 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008982:	1d3a      	adds	r2, r7, #4
 8008984:	f107 0314 	add.w	r3, r7, #20
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fff8 	bl	8009980 <xTaskCheckForTimeOut>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d124      	bne.n	80089e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008998:	f000 faa2 	bl	8008ee0 <prvIsQueueFull>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d018      	beq.n	80089d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a4:	3310      	adds	r3, #16
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 ff1e 	bl	80097ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089b2:	f000 fa2d 	bl	8008e10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089b6:	f000 fd53 	bl	8009460 <xTaskResumeAll>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f47f af7c 	bne.w	80088ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089c2:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <xQueueGenericSend+0x1f8>)
 80089c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	e772      	b.n	80088ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d6:	f000 fa1b 	bl	8008e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089da:	f000 fd41 	bl	8009460 <xTaskResumeAll>
 80089de:	e76c      	b.n	80088ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e2:	f000 fa15 	bl	8008e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e6:	f000 fd3b 	bl	8009460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3738      	adds	r7, #56	; 0x38
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b090      	sub	sp, #64	; 0x40
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10a      	bne.n	8008a26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a22:	bf00      	nop
 8008a24:	e7fe      	b.n	8008a24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d103      	bne.n	8008a34 <xQueueGenericSendFromISR+0x3c>
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <xQueueGenericSendFromISR+0x40>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e000      	b.n	8008a3a <xQueueGenericSendFromISR+0x42>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d10a      	bne.n	8008a54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d103      	bne.n	8008a62 <xQueueGenericSendFromISR+0x6a>
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <xQueueGenericSendFromISR+0x6e>
 8008a62:	2301      	movs	r3, #1
 8008a64:	e000      	b.n	8008a68 <xQueueGenericSendFromISR+0x70>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10a      	bne.n	8008a82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	623b      	str	r3, [r7, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a82:	f001 ff01 	bl	800a888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a86:	f3ef 8211 	mrs	r2, BASEPRI
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	61fa      	str	r2, [r7, #28]
 8008a9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d302      	bcc.n	8008ab4 <xQueueGenericSendFromISR+0xbc>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d12f      	bne.n	8008b14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008aca:	f000 f911 	bl	8008cf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ace:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad6:	d112      	bne.n	8008afe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d016      	beq.n	8008b0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	3324      	adds	r3, #36	; 0x24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f000 fed1 	bl	800988c <xTaskRemoveFromEventList>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00e      	beq.n	8008b0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	e007      	b.n	8008b0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008afe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b02:	3301      	adds	r3, #1
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	b25a      	sxtb	r2, r3
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b12:	e001      	b.n	8008b18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3740      	adds	r7, #64	; 0x40
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08c      	sub	sp, #48	; 0x30
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10a      	bne.n	8008b60 <xQueueReceive+0x30>
	__asm volatile
 8008b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4e:	f383 8811 	msr	BASEPRI, r3
 8008b52:	f3bf 8f6f 	isb	sy
 8008b56:	f3bf 8f4f 	dsb	sy
 8008b5a:	623b      	str	r3, [r7, #32]
}
 8008b5c:	bf00      	nop
 8008b5e:	e7fe      	b.n	8008b5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d103      	bne.n	8008b6e <xQueueReceive+0x3e>
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <xQueueReceive+0x42>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <xQueueReceive+0x44>
 8008b72:	2300      	movs	r3, #0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueReceive+0x5e>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	61fb      	str	r3, [r7, #28]
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b8e:	f001 f83b 	bl	8009c08 <xTaskGetSchedulerState>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d102      	bne.n	8008b9e <xQueueReceive+0x6e>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <xQueueReceive+0x72>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <xQueueReceive+0x74>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueReceive+0x8e>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	61bb      	str	r3, [r7, #24]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bbe:	f001 fd81 	bl	800a6c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01f      	beq.n	8008c0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bce:	68b9      	ldr	r1, [r7, #8]
 8008bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd2:	f000 f8f7 	bl	8008dc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	1e5a      	subs	r2, r3, #1
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00f      	beq.n	8008c06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	3310      	adds	r3, #16
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fe4e 	bl	800988c <xTaskRemoveFromEventList>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008bf6:	4b3d      	ldr	r3, [pc, #244]	; (8008cec <xQueueReceive+0x1bc>)
 8008bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c06:	f001 fd8d 	bl	800a724 <vPortExitCritical>
				return pdPASS;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e069      	b.n	8008ce2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c14:	f001 fd86 	bl	800a724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e062      	b.n	8008ce2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c22:	f107 0310 	add.w	r3, r7, #16
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fe94 	bl	8009954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c30:	f001 fd78 	bl	800a724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c34:	f000 fc06 	bl	8009444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c38:	f001 fd44 	bl	800a6c4 <vPortEnterCritical>
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d103      	bne.n	8008c52 <xQueueReceive+0x122>
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c58:	b25b      	sxtb	r3, r3
 8008c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5e:	d103      	bne.n	8008c68 <xQueueReceive+0x138>
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c68:	f001 fd5c 	bl	800a724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c6c:	1d3a      	adds	r2, r7, #4
 8008c6e:	f107 0310 	add.w	r3, r7, #16
 8008c72:	4611      	mov	r1, r2
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fe83 	bl	8009980 <xTaskCheckForTimeOut>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d123      	bne.n	8008cc8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c82:	f000 f917 	bl	8008eb4 <prvIsQueueEmpty>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d017      	beq.n	8008cbc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	3324      	adds	r3, #36	; 0x24
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fda9 	bl	80097ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c9c:	f000 f8b8 	bl	8008e10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ca0:	f000 fbde 	bl	8009460 <xTaskResumeAll>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d189      	bne.n	8008bbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008caa:	4b10      	ldr	r3, [pc, #64]	; (8008cec <xQueueReceive+0x1bc>)
 8008cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	e780      	b.n	8008bbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cbe:	f000 f8a7 	bl	8008e10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cc2:	f000 fbcd 	bl	8009460 <xTaskResumeAll>
 8008cc6:	e77a      	b.n	8008bbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cca:	f000 f8a1 	bl	8008e10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cce:	f000 fbc7 	bl	8009460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd4:	f000 f8ee 	bl	8008eb4 <prvIsQueueEmpty>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f43f af6f 	beq.w	8008bbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ce0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3730      	adds	r7, #48	; 0x30
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	e000ed04 	.word	0xe000ed04

08008cf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10d      	bne.n	8008d2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d14d      	bne.n	8008db2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 ff92 	bl	8009c44 <xTaskPriorityDisinherit>
 8008d20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	609a      	str	r2, [r3, #8]
 8008d28:	e043      	b.n	8008db2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d119      	bne.n	8008d64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6858      	ldr	r0, [r3, #4]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	461a      	mov	r2, r3
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	f002 f82e 	bl	800ad9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	441a      	add	r2, r3
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d32b      	bcc.n	8008db2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	e026      	b.n	8008db2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	68d8      	ldr	r0, [r3, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	f002 f814 	bl	800ad9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7c:	425b      	negs	r3, r3
 8008d7e:	441a      	add	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d207      	bcs.n	8008da0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	425b      	negs	r3, r3
 8008d9a:	441a      	add	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d105      	bne.n	8008db2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d002      	beq.n	8008db2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008dba:	697b      	ldr	r3, [r7, #20]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b082      	sub	sp, #8
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d018      	beq.n	8008e08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	441a      	add	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d303      	bcc.n	8008df8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68d9      	ldr	r1, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	461a      	mov	r2, r3
 8008e02:	6838      	ldr	r0, [r7, #0]
 8008e04:	f001 ffca 	bl	800ad9c <memcpy>
	}
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e18:	f001 fc54 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e24:	e011      	b.n	8008e4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d012      	beq.n	8008e54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3324      	adds	r3, #36	; 0x24
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fd2a 	bl	800988c <xTaskRemoveFromEventList>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008e3e:	f000 fe01 	bl	8009a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dce9      	bgt.n	8008e26 <prvUnlockQueue+0x16>
 8008e52:	e000      	b.n	8008e56 <prvUnlockQueue+0x46>
					break;
 8008e54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008e5e:	f001 fc61 	bl	800a724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e62:	f001 fc2f 	bl	800a6c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e6e:	e011      	b.n	8008e94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d012      	beq.n	8008e9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3310      	adds	r3, #16
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fd05 	bl	800988c <xTaskRemoveFromEventList>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e88:	f000 fddc 	bl	8009a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dce9      	bgt.n	8008e70 <prvUnlockQueue+0x60>
 8008e9c:	e000      	b.n	8008ea0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ea8:	f001 fc3c 	bl	800a724 <vPortExitCritical>
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ebc:	f001 fc02 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e001      	b.n	8008ed2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ed2:	f001 fc27 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ee8:	f001 fbec 	bl	800a6c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d102      	bne.n	8008efe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
 8008efc:	e001      	b.n	8008f02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f02:	f001 fc0f 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8008f06:	68fb      	ldr	r3, [r7, #12]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e014      	b.n	8008f4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f20:	4a0f      	ldr	r2, [pc, #60]	; (8008f60 <vQueueAddToRegistry+0x50>)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10b      	bne.n	8008f44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008f2c:	490c      	ldr	r1, [pc, #48]	; (8008f60 <vQueueAddToRegistry+0x50>)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008f36:	4a0a      	ldr	r2, [pc, #40]	; (8008f60 <vQueueAddToRegistry+0x50>)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	4413      	add	r3, r2
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008f42:	e006      	b.n	8008f52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d9e7      	bls.n	8008f20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	20000a80 	.word	0x20000a80

08008f64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f74:	f001 fba6 	bl	800a6c4 <vPortEnterCritical>
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d103      	bne.n	8008f8e <vQueueWaitForMessageRestricted+0x2a>
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f94:	b25b      	sxtb	r3, r3
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	d103      	bne.n	8008fa4 <vQueueWaitForMessageRestricted+0x40>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fa4:	f001 fbbe 	bl	800a724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d106      	bne.n	8008fbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	3324      	adds	r3, #36	; 0x24
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 fc3b 	bl	8009834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008fbe:	6978      	ldr	r0, [r7, #20]
 8008fc0:	f7ff ff26 	bl	8008e10 <prvUnlockQueue>
	}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08e      	sub	sp, #56	; 0x38
 8008fd0:	af04      	add	r7, sp, #16
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	623b      	str	r3, [r7, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	e7fe      	b.n	8008ff4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	61fb      	str	r3, [r7, #28]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009012:	235c      	movs	r3, #92	; 0x5c
 8009014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b5c      	cmp	r3, #92	; 0x5c
 800901a:	d00a      	beq.n	8009032 <xTaskCreateStatic+0x66>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	61bb      	str	r3, [r7, #24]
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009032:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01e      	beq.n	8009078 <xTaskCreateStatic+0xac>
 800903a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903c:	2b00      	cmp	r3, #0
 800903e:	d01b      	beq.n	8009078 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	2202      	movs	r2, #2
 800904e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009052:	2300      	movs	r3, #0
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	9302      	str	r3, [sp, #8]
 800905a:	f107 0314 	add.w	r3, r7, #20
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f850 	bl	8009110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009072:	f000 f8dd 	bl	8009230 <prvAddNewTaskToReadyList>
 8009076:	e001      	b.n	800907c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800907c:	697b      	ldr	r3, [r7, #20]
	}
 800907e:	4618      	mov	r0, r3
 8009080:	3728      	adds	r7, #40	; 0x28
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009086:	b580      	push	{r7, lr}
 8009088:	b08c      	sub	sp, #48	; 0x30
 800908a:	af04      	add	r7, sp, #16
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4618      	mov	r0, r3
 800909c:	f001 fc34 	bl	800a908 <pvPortMalloc>
 80090a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80090a8:	205c      	movs	r0, #92	; 0x5c
 80090aa:	f001 fc2d 	bl	800a908 <pvPortMalloc>
 80090ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30
 80090bc:	e005      	b.n	80090ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80090be:	6978      	ldr	r0, [r7, #20]
 80090c0:	f001 fcee 	bl	800aaa0 <vPortFree>
 80090c4:	e001      	b.n	80090ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d017      	beq.n	8009100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090d8:	88fa      	ldrh	r2, [r7, #6]
 80090da:	2300      	movs	r3, #0
 80090dc:	9303      	str	r3, [sp, #12]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	9302      	str	r3, [sp, #8]
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	9301      	str	r3, [sp, #4]
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 f80e 	bl	8009110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090f4:	69f8      	ldr	r0, [r7, #28]
 80090f6:	f000 f89b 	bl	8009230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80090fa:	2301      	movs	r3, #1
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	e002      	b.n	8009106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009100:	f04f 33ff 	mov.w	r3, #4294967295
 8009104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009106:	69bb      	ldr	r3, [r7, #24]
	}
 8009108:	4618      	mov	r0, r3
 800910a:	3720      	adds	r7, #32
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	607a      	str	r2, [r7, #4]
 800911c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	461a      	mov	r2, r3
 8009128:	21a5      	movs	r1, #165	; 0xa5
 800912a:	f001 fe45 	bl	800adb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009138:	3b01      	subs	r3, #1
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	f023 0307 	bic.w	r3, r3, #7
 8009146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	617b      	str	r3, [r7, #20]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01f      	beq.n	80091ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800916e:	2300      	movs	r3, #0
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	e012      	b.n	800919a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	4413      	add	r3, r2
 800917a:	7819      	ldrb	r1, [r3, #0]
 800917c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	4413      	add	r3, r2
 8009182:	3334      	adds	r3, #52	; 0x34
 8009184:	460a      	mov	r2, r1
 8009186:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d006      	beq.n	80091a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	2b0f      	cmp	r3, #15
 800919e:	d9e9      	bls.n	8009174 <prvInitialiseNewTask+0x64>
 80091a0:	e000      	b.n	80091a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80091a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80091a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80091ac:	e003      	b.n	80091b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80091b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b8:	2b37      	cmp	r3, #55	; 0x37
 80091ba:	d901      	bls.n	80091c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80091bc:	2337      	movs	r3, #55	; 0x37
 80091be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	2200      	movs	r2, #0
 80091d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d4:	3304      	adds	r3, #4
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff f978 	bl	80084cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	3318      	adds	r3, #24
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff f973 	bl	80084cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fe:	2200      	movs	r2, #0
 8009200:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800920a:	683a      	ldr	r2, [r7, #0]
 800920c:	68f9      	ldr	r1, [r7, #12]
 800920e:	69b8      	ldr	r0, [r7, #24]
 8009210:	f001 f928 	bl	800a464 <pxPortInitialiseStack>
 8009214:	4602      	mov	r2, r0
 8009216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009226:	bf00      	nop
 8009228:	3720      	adds	r7, #32
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009238:	f001 fa44 	bl	800a6c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800923c:	4b2d      	ldr	r3, [pc, #180]	; (80092f4 <prvAddNewTaskToReadyList+0xc4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	4a2c      	ldr	r2, [pc, #176]	; (80092f4 <prvAddNewTaskToReadyList+0xc4>)
 8009244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009246:	4b2c      	ldr	r3, [pc, #176]	; (80092f8 <prvAddNewTaskToReadyList+0xc8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d109      	bne.n	8009262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800924e:	4a2a      	ldr	r2, [pc, #168]	; (80092f8 <prvAddNewTaskToReadyList+0xc8>)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009254:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <prvAddNewTaskToReadyList+0xc4>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d110      	bne.n	800927e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800925c:	f000 fc16 	bl	8009a8c <prvInitialiseTaskLists>
 8009260:	e00d      	b.n	800927e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009262:	4b26      	ldr	r3, [pc, #152]	; (80092fc <prvAddNewTaskToReadyList+0xcc>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d109      	bne.n	800927e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800926a:	4b23      	ldr	r3, [pc, #140]	; (80092f8 <prvAddNewTaskToReadyList+0xc8>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	429a      	cmp	r2, r3
 8009276:	d802      	bhi.n	800927e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009278:	4a1f      	ldr	r2, [pc, #124]	; (80092f8 <prvAddNewTaskToReadyList+0xc8>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800927e:	4b20      	ldr	r3, [pc, #128]	; (8009300 <prvAddNewTaskToReadyList+0xd0>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3301      	adds	r3, #1
 8009284:	4a1e      	ldr	r2, [pc, #120]	; (8009300 <prvAddNewTaskToReadyList+0xd0>)
 8009286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009288:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <prvAddNewTaskToReadyList+0xd0>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009294:	4b1b      	ldr	r3, [pc, #108]	; (8009304 <prvAddNewTaskToReadyList+0xd4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	429a      	cmp	r2, r3
 800929a:	d903      	bls.n	80092a4 <prvAddNewTaskToReadyList+0x74>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a18      	ldr	r2, [pc, #96]	; (8009304 <prvAddNewTaskToReadyList+0xd4>)
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a8:	4613      	mov	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4a15      	ldr	r2, [pc, #84]	; (8009308 <prvAddNewTaskToReadyList+0xd8>)
 80092b2:	441a      	add	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	3304      	adds	r3, #4
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7ff f913 	bl	80084e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80092c0:	f001 fa30 	bl	800a724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80092c4:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <prvAddNewTaskToReadyList+0xcc>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00e      	beq.n	80092ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092cc:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <prvAddNewTaskToReadyList+0xc8>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d207      	bcs.n	80092ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092da:	4b0c      	ldr	r3, [pc, #48]	; (800930c <prvAddNewTaskToReadyList+0xdc>)
 80092dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000f94 	.word	0x20000f94
 80092f8:	20000ac0 	.word	0x20000ac0
 80092fc:	20000fa0 	.word	0x20000fa0
 8009300:	20000fb0 	.word	0x20000fb0
 8009304:	20000f9c 	.word	0x20000f9c
 8009308:	20000ac4 	.word	0x20000ac4
 800930c:	e000ed04 	.word	0xe000ed04

08009310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d017      	beq.n	8009352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009322:	4b13      	ldr	r3, [pc, #76]	; (8009370 <vTaskDelay+0x60>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <vTaskDelay+0x30>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	60bb      	str	r3, [r7, #8]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009340:	f000 f880 	bl	8009444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009344:	2100      	movs	r1, #0
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fcea 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800934c:	f000 f888 	bl	8009460 <xTaskResumeAll>
 8009350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d107      	bne.n	8009368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <vTaskDelay+0x64>)
 800935a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000fbc 	.word	0x20000fbc
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	; 0x28
 800937c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009386:	463a      	mov	r2, r7
 8009388:	1d39      	adds	r1, r7, #4
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff f848 	bl	8008424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	9202      	str	r2, [sp, #8]
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	2300      	movs	r3, #0
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	460a      	mov	r2, r1
 80093a6:	4921      	ldr	r1, [pc, #132]	; (800942c <vTaskStartScheduler+0xb4>)
 80093a8:	4821      	ldr	r0, [pc, #132]	; (8009430 <vTaskStartScheduler+0xb8>)
 80093aa:	f7ff fe0f 	bl	8008fcc <xTaskCreateStatic>
 80093ae:	4603      	mov	r3, r0
 80093b0:	4a20      	ldr	r2, [pc, #128]	; (8009434 <vTaskStartScheduler+0xbc>)
 80093b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80093b4:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <vTaskStartScheduler+0xbc>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d002      	beq.n	80093c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80093bc:	2301      	movs	r3, #1
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e001      	b.n	80093c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d102      	bne.n	80093d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093cc:	f000 fcfc 	bl	8009dc8 <xTimerCreateTimerTask>
 80093d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d116      	bne.n	8009406 <vTaskStartScheduler+0x8e>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	613b      	str	r3, [r7, #16]
}
 80093ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093ec:	4b12      	ldr	r3, [pc, #72]	; (8009438 <vTaskStartScheduler+0xc0>)
 80093ee:	f04f 32ff 	mov.w	r2, #4294967295
 80093f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093f4:	4b11      	ldr	r3, [pc, #68]	; (800943c <vTaskStartScheduler+0xc4>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093fa:	4b11      	ldr	r3, [pc, #68]	; (8009440 <vTaskStartScheduler+0xc8>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009400:	f001 f8be 	bl	800a580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009404:	e00e      	b.n	8009424 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940c:	d10a      	bne.n	8009424 <vTaskStartScheduler+0xac>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	60fb      	str	r3, [r7, #12]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <vTaskStartScheduler+0xaa>
}
 8009424:	bf00      	nop
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0800b088 	.word	0x0800b088
 8009430:	08009a5d 	.word	0x08009a5d
 8009434:	20000fb8 	.word	0x20000fb8
 8009438:	20000fb4 	.word	0x20000fb4
 800943c:	20000fa0 	.word	0x20000fa0
 8009440:	20000f98 	.word	0x20000f98

08009444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009444:	b480      	push	{r7}
 8009446:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009448:	4b04      	ldr	r3, [pc, #16]	; (800945c <vTaskSuspendAll+0x18>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	4a03      	ldr	r2, [pc, #12]	; (800945c <vTaskSuspendAll+0x18>)
 8009450:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009452:	bf00      	nop
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	20000fbc 	.word	0x20000fbc

08009460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800946a:	2300      	movs	r3, #0
 800946c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800946e:	4b42      	ldr	r3, [pc, #264]	; (8009578 <xTaskResumeAll+0x118>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10a      	bne.n	800948c <xTaskResumeAll+0x2c>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	603b      	str	r3, [r7, #0]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800948c:	f001 f91a 	bl	800a6c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009490:	4b39      	ldr	r3, [pc, #228]	; (8009578 <xTaskResumeAll+0x118>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3b01      	subs	r3, #1
 8009496:	4a38      	ldr	r2, [pc, #224]	; (8009578 <xTaskResumeAll+0x118>)
 8009498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949a:	4b37      	ldr	r3, [pc, #220]	; (8009578 <xTaskResumeAll+0x118>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d162      	bne.n	8009568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80094a2:	4b36      	ldr	r3, [pc, #216]	; (800957c <xTaskResumeAll+0x11c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d05e      	beq.n	8009568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094aa:	e02f      	b.n	800950c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ac:	4b34      	ldr	r3, [pc, #208]	; (8009580 <xTaskResumeAll+0x120>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3318      	adds	r3, #24
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff f871 	bl	80085a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff f86c 	bl	80085a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	4b2d      	ldr	r3, [pc, #180]	; (8009584 <xTaskResumeAll+0x124>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d903      	bls.n	80094dc <xTaskResumeAll+0x7c>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <xTaskResumeAll+0x124>)
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4a27      	ldr	r2, [pc, #156]	; (8009588 <xTaskResumeAll+0x128>)
 80094ea:	441a      	add	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fe fff7 	bl	80084e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4b23      	ldr	r3, [pc, #140]	; (800958c <xTaskResumeAll+0x12c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	429a      	cmp	r2, r3
 8009504:	d302      	bcc.n	800950c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009506:	4b22      	ldr	r3, [pc, #136]	; (8009590 <xTaskResumeAll+0x130>)
 8009508:	2201      	movs	r2, #1
 800950a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800950c:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <xTaskResumeAll+0x120>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1cb      	bne.n	80094ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800951a:	f000 fb55 	bl	8009bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800951e:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <xTaskResumeAll+0x134>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d010      	beq.n	800954c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800952a:	f000 f847 	bl	80095bc <xTaskIncrementTick>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009534:	4b16      	ldr	r3, [pc, #88]	; (8009590 <xTaskResumeAll+0x130>)
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3b01      	subs	r3, #1
 800953e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1f1      	bne.n	800952a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009546:	4b13      	ldr	r3, [pc, #76]	; (8009594 <xTaskResumeAll+0x134>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800954c:	4b10      	ldr	r3, [pc, #64]	; (8009590 <xTaskResumeAll+0x130>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d009      	beq.n	8009568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009558:	4b0f      	ldr	r3, [pc, #60]	; (8009598 <xTaskResumeAll+0x138>)
 800955a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955e:	601a      	str	r2, [r3, #0]
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009568:	f001 f8dc 	bl	800a724 <vPortExitCritical>

	return xAlreadyYielded;
 800956c:	68bb      	ldr	r3, [r7, #8]
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000fbc 	.word	0x20000fbc
 800957c:	20000f94 	.word	0x20000f94
 8009580:	20000f54 	.word	0x20000f54
 8009584:	20000f9c 	.word	0x20000f9c
 8009588:	20000ac4 	.word	0x20000ac4
 800958c:	20000ac0 	.word	0x20000ac0
 8009590:	20000fa8 	.word	0x20000fa8
 8009594:	20000fa4 	.word	0x20000fa4
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <xTaskGetTickCount+0x1c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80095a8:	687b      	ldr	r3, [r7, #4]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000f98 	.word	0x20000f98

080095bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b086      	sub	sp, #24
 80095c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095c6:	4b4f      	ldr	r3, [pc, #316]	; (8009704 <xTaskIncrementTick+0x148>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 808f 	bne.w	80096ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095d0:	4b4d      	ldr	r3, [pc, #308]	; (8009708 <xTaskIncrementTick+0x14c>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3301      	adds	r3, #1
 80095d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095d8:	4a4b      	ldr	r2, [pc, #300]	; (8009708 <xTaskIncrementTick+0x14c>)
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d120      	bne.n	8009626 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095e4:	4b49      	ldr	r3, [pc, #292]	; (800970c <xTaskIncrementTick+0x150>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <xTaskIncrementTick+0x48>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	603b      	str	r3, [r7, #0]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <xTaskIncrementTick+0x46>
 8009604:	4b41      	ldr	r3, [pc, #260]	; (800970c <xTaskIncrementTick+0x150>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
 800960a:	4b41      	ldr	r3, [pc, #260]	; (8009710 <xTaskIncrementTick+0x154>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a3f      	ldr	r2, [pc, #252]	; (800970c <xTaskIncrementTick+0x150>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	4a3f      	ldr	r2, [pc, #252]	; (8009710 <xTaskIncrementTick+0x154>)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	4b3e      	ldr	r3, [pc, #248]	; (8009714 <xTaskIncrementTick+0x158>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3301      	adds	r3, #1
 800961e:	4a3d      	ldr	r2, [pc, #244]	; (8009714 <xTaskIncrementTick+0x158>)
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	f000 fad1 	bl	8009bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009626:	4b3c      	ldr	r3, [pc, #240]	; (8009718 <xTaskIncrementTick+0x15c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	429a      	cmp	r2, r3
 800962e:	d349      	bcc.n	80096c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009630:	4b36      	ldr	r3, [pc, #216]	; (800970c <xTaskIncrementTick+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d104      	bne.n	8009644 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963a:	4b37      	ldr	r3, [pc, #220]	; (8009718 <xTaskIncrementTick+0x15c>)
 800963c:	f04f 32ff 	mov.w	r2, #4294967295
 8009640:	601a      	str	r2, [r3, #0]
					break;
 8009642:	e03f      	b.n	80096c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009644:	4b31      	ldr	r3, [pc, #196]	; (800970c <xTaskIncrementTick+0x150>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	429a      	cmp	r2, r3
 800965a:	d203      	bcs.n	8009664 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800965c:	4a2e      	ldr	r2, [pc, #184]	; (8009718 <xTaskIncrementTick+0x15c>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009662:	e02f      	b.n	80096c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	3304      	adds	r3, #4
 8009668:	4618      	mov	r0, r3
 800966a:	f7fe ff99 	bl	80085a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	2b00      	cmp	r3, #0
 8009674:	d004      	beq.n	8009680 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	3318      	adds	r3, #24
 800967a:	4618      	mov	r0, r3
 800967c:	f7fe ff90 	bl	80085a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009684:	4b25      	ldr	r3, [pc, #148]	; (800971c <xTaskIncrementTick+0x160>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d903      	bls.n	8009694 <xTaskIncrementTick+0xd8>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	4a22      	ldr	r2, [pc, #136]	; (800971c <xTaskIncrementTick+0x160>)
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009698:	4613      	mov	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4a1f      	ldr	r2, [pc, #124]	; (8009720 <xTaskIncrementTick+0x164>)
 80096a2:	441a      	add	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7fe ff1b 	bl	80084e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b4:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <xTaskIncrementTick+0x168>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d3b8      	bcc.n	8009630 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096be:	2301      	movs	r3, #1
 80096c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096c2:	e7b5      	b.n	8009630 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096c4:	4b17      	ldr	r3, [pc, #92]	; (8009724 <xTaskIncrementTick+0x168>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ca:	4915      	ldr	r1, [pc, #84]	; (8009720 <xTaskIncrementTick+0x164>)
 80096cc:	4613      	mov	r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d901      	bls.n	80096e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096dc:	2301      	movs	r3, #1
 80096de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096e0:	4b11      	ldr	r3, [pc, #68]	; (8009728 <xTaskIncrementTick+0x16c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d007      	beq.n	80096f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096e8:	2301      	movs	r3, #1
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	e004      	b.n	80096f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <xTaskIncrementTick+0x170>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <xTaskIncrementTick+0x170>)
 80096f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096f8:	697b      	ldr	r3, [r7, #20]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20000fbc 	.word	0x20000fbc
 8009708:	20000f98 	.word	0x20000f98
 800970c:	20000f4c 	.word	0x20000f4c
 8009710:	20000f50 	.word	0x20000f50
 8009714:	20000fac 	.word	0x20000fac
 8009718:	20000fb4 	.word	0x20000fb4
 800971c:	20000f9c 	.word	0x20000f9c
 8009720:	20000ac4 	.word	0x20000ac4
 8009724:	20000ac0 	.word	0x20000ac0
 8009728:	20000fa8 	.word	0x20000fa8
 800972c:	20000fa4 	.word	0x20000fa4

08009730 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009736:	4b28      	ldr	r3, [pc, #160]	; (80097d8 <vTaskSwitchContext+0xa8>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800973e:	4b27      	ldr	r3, [pc, #156]	; (80097dc <vTaskSwitchContext+0xac>)
 8009740:	2201      	movs	r2, #1
 8009742:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009744:	e041      	b.n	80097ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009746:	4b25      	ldr	r3, [pc, #148]	; (80097dc <vTaskSwitchContext+0xac>)
 8009748:	2200      	movs	r2, #0
 800974a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974c:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <vTaskSwitchContext+0xb0>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	e010      	b.n	8009776 <vTaskSwitchContext+0x46>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <vTaskSwitchContext+0x40>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	607b      	str	r3, [r7, #4]
}
 800976c:	bf00      	nop
 800976e:	e7fe      	b.n	800976e <vTaskSwitchContext+0x3e>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	3b01      	subs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	491b      	ldr	r1, [pc, #108]	; (80097e4 <vTaskSwitchContext+0xb4>)
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0e4      	beq.n	8009754 <vTaskSwitchContext+0x24>
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <vTaskSwitchContext+0xb4>)
 8009796:	4413      	add	r3, r2
 8009798:	60bb      	str	r3, [r7, #8]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	605a      	str	r2, [r3, #4]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	3308      	adds	r3, #8
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d104      	bne.n	80097ba <vTaskSwitchContext+0x8a>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	4a09      	ldr	r2, [pc, #36]	; (80097e8 <vTaskSwitchContext+0xb8>)
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	4a06      	ldr	r2, [pc, #24]	; (80097e0 <vTaskSwitchContext+0xb0>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6013      	str	r3, [r2, #0]
}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	20000fbc 	.word	0x20000fbc
 80097dc:	20000fa8 	.word	0x20000fa8
 80097e0:	20000f9c 	.word	0x20000f9c
 80097e4:	20000ac4 	.word	0x20000ac4
 80097e8:	20000ac0 	.word	0x20000ac0

080097ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d10a      	bne.n	8009812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	60fb      	str	r3, [r7, #12]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009812:	4b07      	ldr	r3, [pc, #28]	; (8009830 <vTaskPlaceOnEventList+0x44>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3318      	adds	r3, #24
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7fe fe87 	bl	800852e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009820:	2101      	movs	r1, #1
 8009822:	6838      	ldr	r0, [r7, #0]
 8009824:	f000 fa7c 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
}
 8009828:	bf00      	nop
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000ac0 	.word	0x20000ac0

08009834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	617b      	str	r3, [r7, #20]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <vTaskPlaceOnEventListRestricted+0x54>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3318      	adds	r3, #24
 8009862:	4619      	mov	r1, r3
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7fe fe3e 	bl	80084e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009870:	f04f 33ff 	mov.w	r3, #4294967295
 8009874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009876:	6879      	ldr	r1, [r7, #4]
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f000 fa51 	bl	8009d20 <prvAddCurrentTaskToDelayedList>
	}
 800987e:	bf00      	nop
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000ac0 	.word	0x20000ac0

0800988c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	60fb      	str	r3, [r7, #12]
}
 80098b4:	bf00      	nop
 80098b6:	e7fe      	b.n	80098b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	3318      	adds	r3, #24
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe fe6f 	bl	80085a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c2:	4b1e      	ldr	r3, [pc, #120]	; (800993c <xTaskRemoveFromEventList+0xb0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d11d      	bne.n	8009906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	3304      	adds	r3, #4
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fe66 	bl	80085a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	4b19      	ldr	r3, [pc, #100]	; (8009940 <xTaskRemoveFromEventList+0xb4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d903      	bls.n	80098e8 <xTaskRemoveFromEventList+0x5c>
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	4a16      	ldr	r2, [pc, #88]	; (8009940 <xTaskRemoveFromEventList+0xb4>)
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ec:	4613      	mov	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4a13      	ldr	r2, [pc, #76]	; (8009944 <xTaskRemoveFromEventList+0xb8>)
 80098f6:	441a      	add	r2, r3
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7fe fdf1 	bl	80084e6 <vListInsertEnd>
 8009904:	e005      	b.n	8009912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	3318      	adds	r3, #24
 800990a:	4619      	mov	r1, r3
 800990c:	480e      	ldr	r0, [pc, #56]	; (8009948 <xTaskRemoveFromEventList+0xbc>)
 800990e:	f7fe fdea 	bl	80084e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <xTaskRemoveFromEventList+0xc0>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	429a      	cmp	r2, r3
 800991e:	d905      	bls.n	800992c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009920:	2301      	movs	r3, #1
 8009922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <xTaskRemoveFromEventList+0xc4>)
 8009926:	2201      	movs	r2, #1
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	e001      	b.n	8009930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800992c:	2300      	movs	r3, #0
 800992e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009930:	697b      	ldr	r3, [r7, #20]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000fbc 	.word	0x20000fbc
 8009940:	20000f9c 	.word	0x20000f9c
 8009944:	20000ac4 	.word	0x20000ac4
 8009948:	20000f54 	.word	0x20000f54
 800994c:	20000ac0 	.word	0x20000ac0
 8009950:	20000fa8 	.word	0x20000fa8

08009954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800995c:	4b06      	ldr	r3, [pc, #24]	; (8009978 <vTaskInternalSetTimeOutState+0x24>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <vTaskInternalSetTimeOutState+0x28>)
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	605a      	str	r2, [r3, #4]
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	20000fac 	.word	0x20000fac
 800997c:	20000f98 	.word	0x20000f98

08009980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	613b      	str	r3, [r7, #16]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10a      	bne.n	80099c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	60fb      	str	r3, [r7, #12]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099c2:	f000 fe7f 	bl	800a6c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099c6:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <xTaskCheckForTimeOut+0xbc>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d102      	bne.n	80099e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e023      	b.n	8009a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	4b15      	ldr	r3, [pc, #84]	; (8009a40 <xTaskCheckForTimeOut+0xc0>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d007      	beq.n	8009a02 <xTaskCheckForTimeOut+0x82>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d302      	bcc.n	8009a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80099fc:	2301      	movs	r3, #1
 80099fe:	61fb      	str	r3, [r7, #28]
 8009a00:	e015      	b.n	8009a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d20b      	bcs.n	8009a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	1ad2      	subs	r2, r2, r3
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7ff ff9b 	bl	8009954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	61fb      	str	r3, [r7, #28]
 8009a22:	e004      	b.n	8009a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a2e:	f000 fe79 	bl	800a724 <vPortExitCritical>

	return xReturn;
 8009a32:	69fb      	ldr	r3, [r7, #28]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3720      	adds	r7, #32
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	20000f98 	.word	0x20000f98
 8009a40:	20000fac 	.word	0x20000fac

08009a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <vTaskMissedYield+0x14>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	20000fa8 	.word	0x20000fa8

08009a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a64:	f000 f852 	bl	8009b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a68:	4b06      	ldr	r3, [pc, #24]	; (8009a84 <prvIdleTask+0x28>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d9f9      	bls.n	8009a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <prvIdleTask+0x2c>)
 8009a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a80:	e7f0      	b.n	8009a64 <prvIdleTask+0x8>
 8009a82:	bf00      	nop
 8009a84:	20000ac4 	.word	0x20000ac4
 8009a88:	e000ed04 	.word	0xe000ed04

08009a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a92:	2300      	movs	r3, #0
 8009a94:	607b      	str	r3, [r7, #4]
 8009a96:	e00c      	b.n	8009ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4a12      	ldr	r2, [pc, #72]	; (8009aec <prvInitialiseTaskLists+0x60>)
 8009aa4:	4413      	add	r3, r2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fcf0 	bl	800848c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	607b      	str	r3, [r7, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b37      	cmp	r3, #55	; 0x37
 8009ab6:	d9ef      	bls.n	8009a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ab8:	480d      	ldr	r0, [pc, #52]	; (8009af0 <prvInitialiseTaskLists+0x64>)
 8009aba:	f7fe fce7 	bl	800848c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009abe:	480d      	ldr	r0, [pc, #52]	; (8009af4 <prvInitialiseTaskLists+0x68>)
 8009ac0:	f7fe fce4 	bl	800848c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ac4:	480c      	ldr	r0, [pc, #48]	; (8009af8 <prvInitialiseTaskLists+0x6c>)
 8009ac6:	f7fe fce1 	bl	800848c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009aca:	480c      	ldr	r0, [pc, #48]	; (8009afc <prvInitialiseTaskLists+0x70>)
 8009acc:	f7fe fcde 	bl	800848c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ad0:	480b      	ldr	r0, [pc, #44]	; (8009b00 <prvInitialiseTaskLists+0x74>)
 8009ad2:	f7fe fcdb 	bl	800848c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	; (8009b04 <prvInitialiseTaskLists+0x78>)
 8009ad8:	4a05      	ldr	r2, [pc, #20]	; (8009af0 <prvInitialiseTaskLists+0x64>)
 8009ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <prvInitialiseTaskLists+0x7c>)
 8009ade:	4a05      	ldr	r2, [pc, #20]	; (8009af4 <prvInitialiseTaskLists+0x68>)
 8009ae0:	601a      	str	r2, [r3, #0]
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000ac4 	.word	0x20000ac4
 8009af0:	20000f24 	.word	0x20000f24
 8009af4:	20000f38 	.word	0x20000f38
 8009af8:	20000f54 	.word	0x20000f54
 8009afc:	20000f68 	.word	0x20000f68
 8009b00:	20000f80 	.word	0x20000f80
 8009b04:	20000f4c 	.word	0x20000f4c
 8009b08:	20000f50 	.word	0x20000f50

08009b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b12:	e019      	b.n	8009b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b14:	f000 fdd6 	bl	800a6c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b18:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <prvCheckTasksWaitingTermination+0x50>)
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe fd3b 	bl	80085a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <prvCheckTasksWaitingTermination+0x54>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	4a0b      	ldr	r2, [pc, #44]	; (8009b60 <prvCheckTasksWaitingTermination+0x54>)
 8009b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b34:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <prvCheckTasksWaitingTermination+0x58>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	4a0a      	ldr	r2, [pc, #40]	; (8009b64 <prvCheckTasksWaitingTermination+0x58>)
 8009b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b3e:	f000 fdf1 	bl	800a724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 f810 	bl	8009b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b48:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <prvCheckTasksWaitingTermination+0x58>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e1      	bne.n	8009b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	20000f68 	.word	0x20000f68
 8009b60:	20000f94 	.word	0x20000f94
 8009b64:	20000f7c 	.word	0x20000f7c

08009b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d108      	bne.n	8009b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 ff8e 	bl	800aaa0 <vPortFree>
				vPortFree( pxTCB );
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 ff8b 	bl	800aaa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b8a:	e018      	b.n	8009bbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d103      	bne.n	8009b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 ff82 	bl	800aaa0 <vPortFree>
	}
 8009b9c:	e00f      	b.n	8009bbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d00a      	beq.n	8009bbe <prvDeleteTCB+0x56>
	__asm volatile
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	60fb      	str	r3, [r7, #12]
}
 8009bba:	bf00      	nop
 8009bbc:	e7fe      	b.n	8009bbc <prvDeleteTCB+0x54>
	}
 8009bbe:	bf00      	nop
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bce:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <prvResetNextTaskUnblockTime+0x38>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <prvResetNextTaskUnblockTime+0x3c>)
 8009bda:	f04f 32ff 	mov.w	r2, #4294967295
 8009bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009be0:	e008      	b.n	8009bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be2:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <prvResetNextTaskUnblockTime+0x38>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <prvResetNextTaskUnblockTime+0x3c>)
 8009bf2:	6013      	str	r3, [r2, #0]
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20000f4c 	.word	0x20000f4c
 8009c04:	20000fb4 	.word	0x20000fb4

08009c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <xTaskGetSchedulerState+0x34>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c16:	2301      	movs	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	e008      	b.n	8009c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c1c:	4b08      	ldr	r3, [pc, #32]	; (8009c40 <xTaskGetSchedulerState+0x38>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c24:	2302      	movs	r3, #2
 8009c26:	607b      	str	r3, [r7, #4]
 8009c28:	e001      	b.n	8009c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c2e:	687b      	ldr	r3, [r7, #4]
	}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000fa0 	.word	0x20000fa0
 8009c40:	20000fbc 	.word	0x20000fbc

08009c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d056      	beq.n	8009d08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c5a:	4b2e      	ldr	r3, [pc, #184]	; (8009d14 <xTaskPriorityDisinherit+0xd0>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d00a      	beq.n	8009c7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60fb      	str	r3, [r7, #12]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	60bb      	str	r3, [r7, #8]
}
 8009c94:	bf00      	nop
 8009c96:	e7fe      	b.n	8009c96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c9c:	1e5a      	subs	r2, r3, #1
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d02c      	beq.n	8009d08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d128      	bne.n	8009d08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fc70 	bl	80085a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cd8:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <xTaskPriorityDisinherit+0xd4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d903      	bls.n	8009ce8 <xTaskPriorityDisinherit+0xa4>
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a0c      	ldr	r2, [pc, #48]	; (8009d18 <xTaskPriorityDisinherit+0xd4>)
 8009ce6:	6013      	str	r3, [r2, #0]
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <xTaskPriorityDisinherit+0xd8>)
 8009cf6:	441a      	add	r2, r3
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	f7fe fbf1 	bl	80084e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d04:	2301      	movs	r3, #1
 8009d06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d08:	697b      	ldr	r3, [r7, #20]
	}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000ac0 	.word	0x20000ac0
 8009d18:	20000f9c 	.word	0x20000f9c
 8009d1c:	20000ac4 	.word	0x20000ac4

08009d20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d2a:	4b21      	ldr	r3, [pc, #132]	; (8009db0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d30:	4b20      	ldr	r3, [pc, #128]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fc32 	bl	80085a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d42:	d10a      	bne.n	8009d5a <prvAddCurrentTaskToDelayedList+0x3a>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d4a:	4b1a      	ldr	r3, [pc, #104]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4619      	mov	r1, r3
 8009d52:	4819      	ldr	r0, [pc, #100]	; (8009db8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009d54:	f7fe fbc7 	bl	80084e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d58:	e026      	b.n	8009da8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4413      	add	r3, r2
 8009d60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d62:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d209      	bcs.n	8009d86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	f7fe fbd5 	bl	800852e <vListInsert>
}
 8009d84:	e010      	b.n	8009da8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d86:	4b0e      	ldr	r3, [pc, #56]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f7fe fbcb 	bl	800852e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d202      	bcs.n	8009da8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009da2:	4a08      	ldr	r2, [pc, #32]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	6013      	str	r3, [r2, #0]
}
 8009da8:	bf00      	nop
 8009daa:	3710      	adds	r7, #16
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20000f98 	.word	0x20000f98
 8009db4:	20000ac0 	.word	0x20000ac0
 8009db8:	20000f80 	.word	0x20000f80
 8009dbc:	20000f50 	.word	0x20000f50
 8009dc0:	20000f4c 	.word	0x20000f4c
 8009dc4:	20000fb4 	.word	0x20000fb4

08009dc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08a      	sub	sp, #40	; 0x28
 8009dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009dd2:	f000 fb07 	bl	800a3e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009dd6:	4b1c      	ldr	r3, [pc, #112]	; (8009e48 <xTimerCreateTimerTask+0x80>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d021      	beq.n	8009e22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009de6:	1d3a      	adds	r2, r7, #4
 8009de8:	f107 0108 	add.w	r1, r7, #8
 8009dec:	f107 030c 	add.w	r3, r7, #12
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fb31 	bl	8008458 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	9202      	str	r2, [sp, #8]
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	2302      	movs	r3, #2
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	2300      	movs	r3, #0
 8009e06:	460a      	mov	r2, r1
 8009e08:	4910      	ldr	r1, [pc, #64]	; (8009e4c <xTimerCreateTimerTask+0x84>)
 8009e0a:	4811      	ldr	r0, [pc, #68]	; (8009e50 <xTimerCreateTimerTask+0x88>)
 8009e0c:	f7ff f8de 	bl	8008fcc <xTaskCreateStatic>
 8009e10:	4603      	mov	r3, r0
 8009e12:	4a10      	ldr	r2, [pc, #64]	; (8009e54 <xTimerCreateTimerTask+0x8c>)
 8009e14:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e16:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <xTimerCreateTimerTask+0x8c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	613b      	str	r3, [r7, #16]
}
 8009e3a:	bf00      	nop
 8009e3c:	e7fe      	b.n	8009e3c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009e3e:	697b      	ldr	r3, [r7, #20]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20000ff0 	.word	0x20000ff0
 8009e4c:	0800b090 	.word	0x0800b090
 8009e50:	08009f8d 	.word	0x08009f8d
 8009e54:	20000ff4 	.word	0x20000ff4

08009e58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b08a      	sub	sp, #40	; 0x28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	623b      	str	r3, [r7, #32]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e86:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d02a      	beq.n	8009ee4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b05      	cmp	r3, #5
 8009e9e:	dc18      	bgt.n	8009ed2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ea0:	f7ff feb2 	bl	8009c08 <xTaskGetSchedulerState>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d109      	bne.n	8009ebe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009eaa:	4b11      	ldr	r3, [pc, #68]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	f107 0110 	add.w	r1, r7, #16
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb6:	f7fe fca1 	bl	80087fc <xQueueGenericSend>
 8009eba:	6278      	str	r0, [r7, #36]	; 0x24
 8009ebc:	e012      	b.n	8009ee4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ebe:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	f107 0110 	add.w	r1, r7, #16
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f7fe fc97 	bl	80087fc <xQueueGenericSend>
 8009ece:	6278      	str	r0, [r7, #36]	; 0x24
 8009ed0:	e008      	b.n	8009ee4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ed2:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <xTimerGenericCommand+0x98>)
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	f107 0110 	add.w	r1, r7, #16
 8009eda:	2300      	movs	r3, #0
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	f7fe fd8b 	bl	80089f8 <xQueueGenericSendFromISR>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3728      	adds	r7, #40	; 0x28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000ff0 	.word	0x20000ff0

08009ef4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efe:	4b22      	ldr	r3, [pc, #136]	; (8009f88 <prvProcessExpiredTimer+0x94>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fb47 	bl	80085a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d022      	beq.n	8009f66 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	699a      	ldr	r2, [r3, #24]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	18d1      	adds	r1, r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	6978      	ldr	r0, [r7, #20]
 8009f2e:	f000 f8d1 	bl	800a0d4 <prvInsertTimerInActiveList>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d01f      	beq.n	8009f78 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	2100      	movs	r1, #0
 8009f42:	6978      	ldr	r0, [r7, #20]
 8009f44:	f7ff ff88 	bl	8009e58 <xTimerGenericCommand>
 8009f48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d113      	bne.n	8009f78 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	60fb      	str	r3, [r7, #12]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f6c:	f023 0301 	bic.w	r3, r3, #1
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	6978      	ldr	r0, [r7, #20]
 8009f7e:	4798      	blx	r3
}
 8009f80:	bf00      	nop
 8009f82:	3718      	adds	r7, #24
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	20000fe8 	.word	0x20000fe8

08009f8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f94:	f107 0308 	add.w	r3, r7, #8
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 f857 	bl	800a04c <prvGetNextExpireTime>
 8009f9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f803 	bl	8009fb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009faa:	f000 f8d5 	bl	800a158 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009fae:	e7f1      	b.n	8009f94 <prvTimerTask+0x8>

08009fb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009fba:	f7ff fa43 	bl	8009444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f866 	bl	800a094 <prvSampleTimeNow>
 8009fc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d130      	bne.n	800a032 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <prvProcessTimerOrBlockTask+0x3c>
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d806      	bhi.n	8009fec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009fde:	f7ff fa3f 	bl	8009460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009fe2:	68f9      	ldr	r1, [r7, #12]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ff85 	bl	8009ef4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009fea:	e024      	b.n	800a036 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d008      	beq.n	800a004 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ff2:	4b13      	ldr	r3, [pc, #76]	; (800a040 <prvProcessTimerOrBlockTask+0x90>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <prvProcessTimerOrBlockTask+0x50>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <prvProcessTimerOrBlockTask+0x52>
 800a000:	2300      	movs	r3, #0
 800a002:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a004:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <prvProcessTimerOrBlockTask+0x94>)
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4619      	mov	r1, r3
 800a012:	f7fe ffa7 	bl	8008f64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a016:	f7ff fa23 	bl	8009460 <xTaskResumeAll>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a020:	4b09      	ldr	r3, [pc, #36]	; (800a048 <prvProcessTimerOrBlockTask+0x98>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
}
 800a030:	e001      	b.n	800a036 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a032:	f7ff fa15 	bl	8009460 <xTaskResumeAll>
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20000fec 	.word	0x20000fec
 800a044:	20000ff0 	.word	0x20000ff0
 800a048:	e000ed04 	.word	0xe000ed04

0800a04c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <prvGetNextExpireTime+0x44>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <prvGetNextExpireTime+0x16>
 800a05e:	2201      	movs	r2, #1
 800a060:	e000      	b.n	800a064 <prvGetNextExpireTime+0x18>
 800a062:	2200      	movs	r2, #0
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d105      	bne.n	800a07c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <prvGetNextExpireTime+0x44>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e001      	b.n	800a080 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a080:	68fb      	ldr	r3, [r7, #12]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	20000fe8 	.word	0x20000fe8

0800a094 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a09c:	f7ff fa7e 	bl	800959c <xTaskGetTickCount>
 800a0a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a0a2:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <prvSampleTimeNow+0x3c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d205      	bcs.n	800a0b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a0ac:	f000 f936 	bl	800a31c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	e002      	b.n	800a0be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a0be:	4a04      	ldr	r2, [pc, #16]	; (800a0d0 <prvSampleTimeNow+0x3c>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000ff8 	.word	0x20000ff8

0800a0d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d812      	bhi.n	800a120 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	429a      	cmp	r2, r3
 800a106:	d302      	bcc.n	800a10e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a108:	2301      	movs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e01b      	b.n	800a146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <prvInsertTimerInActiveList+0x7c>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	3304      	adds	r3, #4
 800a116:	4619      	mov	r1, r3
 800a118:	4610      	mov	r0, r2
 800a11a:	f7fe fa08 	bl	800852e <vListInsert>
 800a11e:	e012      	b.n	800a146 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	429a      	cmp	r2, r3
 800a126:	d206      	bcs.n	800a136 <prvInsertTimerInActiveList+0x62>
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d302      	bcc.n	800a136 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a130:	2301      	movs	r3, #1
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e007      	b.n	800a146 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a136:	4b07      	ldr	r3, [pc, #28]	; (800a154 <prvInsertTimerInActiveList+0x80>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f7fe f9f4 	bl	800852e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a146:	697b      	ldr	r3, [r7, #20]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20000fec 	.word	0x20000fec
 800a154:	20000fe8 	.word	0x20000fe8

0800a158 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08e      	sub	sp, #56	; 0x38
 800a15c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a15e:	e0ca      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	da18      	bge.n	800a198 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a166:	1d3b      	adds	r3, r7, #4
 800a168:	3304      	adds	r3, #4
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	61fb      	str	r3, [r7, #28]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a18e:	6850      	ldr	r0, [r2, #4]
 800a190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a192:	6892      	ldr	r2, [r2, #8]
 800a194:	4611      	mov	r1, r2
 800a196:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f2c0 80aa 	blt.w	800a2f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe f9f5 	bl	80085a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff ff6b 	bl	800a094 <prvSampleTimeNow>
 800a1be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b09      	cmp	r3, #9
 800a1c4:	f200 8097 	bhi.w	800a2f6 <prvProcessReceivedCommands+0x19e>
 800a1c8:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <prvProcessReceivedCommands+0x78>)
 800a1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ce:	bf00      	nop
 800a1d0:	0800a1f9 	.word	0x0800a1f9
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a1f9 	.word	0x0800a1f9
 800a1dc:	0800a26d 	.word	0x0800a26d
 800a1e0:	0800a281 	.word	0x0800a281
 800a1e4:	0800a2cb 	.word	0x0800a2cb
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a1f9 	.word	0x0800a1f9
 800a1f0:	0800a26d 	.word	0x0800a26d
 800a1f4:	0800a281 	.word	0x0800a281
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	b2da      	uxtb	r2, r3
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	699b      	ldr	r3, [r3, #24]
 800a210:	18d1      	adds	r1, r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a218:	f7ff ff5c 	bl	800a0d4 <prvInsertTimerInActiveList>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d069      	beq.n	800a2f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a228:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a230:	f003 0304 	and.w	r3, r3, #4
 800a234:	2b00      	cmp	r3, #0
 800a236:	d05e      	beq.n	800a2f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	441a      	add	r2, r3
 800a240:	2300      	movs	r3, #0
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	2300      	movs	r3, #0
 800a246:	2100      	movs	r1, #0
 800a248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24a:	f7ff fe05 	bl	8009e58 <xTimerGenericCommand>
 800a24e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d14f      	bne.n	800a2f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	61bb      	str	r3, [r7, #24]
}
 800a268:	bf00      	nop
 800a26a:	e7fe      	b.n	800a26a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a272:	f023 0301 	bic.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a27e:	e03a      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a286:	f043 0301 	orr.w	r3, r3, #1
 800a28a:	b2da      	uxtb	r2, r3
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	617b      	str	r3, [r7, #20]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	699a      	ldr	r2, [r3, #24]
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	18d1      	adds	r1, r2, r3
 800a2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c4:	f7ff ff06 	bl	800a0d4 <prvInsertTimerInActiveList>
					break;
 800a2c8:	e015      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a2d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2da:	f000 fbe1 	bl	800aaa0 <vPortFree>
 800a2de:	e00a      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2e6:	f023 0301 	bic.w	r3, r3, #1
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a2f2:	e000      	b.n	800a2f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a2f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2f6:	4b08      	ldr	r3, [pc, #32]	; (800a318 <prvProcessReceivedCommands+0x1c0>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	1d39      	adds	r1, r7, #4
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fc16 	bl	8008b30 <xQueueReceive>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	f47f af2a 	bne.w	800a160 <prvProcessReceivedCommands+0x8>
	}
}
 800a30c:	bf00      	nop
 800a30e:	bf00      	nop
 800a310:	3730      	adds	r7, #48	; 0x30
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20000ff0 	.word	0x20000ff0

0800a31c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a322:	e048      	b.n	800a3b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a324:	4b2d      	ldr	r3, [pc, #180]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32e:	4b2b      	ldr	r3, [pc, #172]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7fe f92f 	bl	80085a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	2b00      	cmp	r3, #0
 800a356:	d02e      	beq.n	800a3b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	4413      	add	r3, r2
 800a360:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	d90e      	bls.n	800a388 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a376:	4b19      	ldr	r3, [pc, #100]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3304      	adds	r3, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4610      	mov	r0, r2
 800a382:	f7fe f8d4 	bl	800852e <vListInsert>
 800a386:	e016      	b.n	800a3b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a388:	2300      	movs	r3, #0
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	2300      	movs	r3, #0
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	2100      	movs	r1, #0
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7ff fd60 	bl	8009e58 <xTimerGenericCommand>
 800a398:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	603b      	str	r3, [r7, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3b6:	4b09      	ldr	r3, [pc, #36]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1b1      	bne.n	800a324 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a3c0:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a3c6:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <prvSwitchTimerLists+0xc0>)
 800a3cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a3ce:	4a04      	ldr	r2, [pc, #16]	; (800a3e0 <prvSwitchTimerLists+0xc4>)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6013      	str	r3, [r2, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3718      	adds	r7, #24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	20000fe8 	.word	0x20000fe8
 800a3e0:	20000fec 	.word	0x20000fec

0800a3e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3ea:	f000 f96b 	bl	800a6c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3ee:	4b15      	ldr	r3, [pc, #84]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d120      	bne.n	800a438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3f6:	4814      	ldr	r0, [pc, #80]	; (800a448 <prvCheckForValidListAndQueue+0x64>)
 800a3f8:	f7fe f848 	bl	800848c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3fc:	4813      	ldr	r0, [pc, #76]	; (800a44c <prvCheckForValidListAndQueue+0x68>)
 800a3fe:	f7fe f845 	bl	800848c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a402:	4b13      	ldr	r3, [pc, #76]	; (800a450 <prvCheckForValidListAndQueue+0x6c>)
 800a404:	4a10      	ldr	r2, [pc, #64]	; (800a448 <prvCheckForValidListAndQueue+0x64>)
 800a406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <prvCheckForValidListAndQueue+0x70>)
 800a40a:	4a10      	ldr	r2, [pc, #64]	; (800a44c <prvCheckForValidListAndQueue+0x68>)
 800a40c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a40e:	2300      	movs	r3, #0
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	4b11      	ldr	r3, [pc, #68]	; (800a458 <prvCheckForValidListAndQueue+0x74>)
 800a414:	4a11      	ldr	r2, [pc, #68]	; (800a45c <prvCheckForValidListAndQueue+0x78>)
 800a416:	2110      	movs	r1, #16
 800a418:	200a      	movs	r0, #10
 800a41a:	f7fe f953 	bl	80086c4 <xQueueGenericCreateStatic>
 800a41e:	4603      	mov	r3, r0
 800a420:	4a08      	ldr	r2, [pc, #32]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a424:	4b07      	ldr	r3, [pc, #28]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d005      	beq.n	800a438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <prvCheckForValidListAndQueue+0x60>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	490b      	ldr	r1, [pc, #44]	; (800a460 <prvCheckForValidListAndQueue+0x7c>)
 800a432:	4618      	mov	r0, r3
 800a434:	f7fe fd6c 	bl	8008f10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a438:	f000 f974 	bl	800a724 <vPortExitCritical>
}
 800a43c:	bf00      	nop
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000ff0 	.word	0x20000ff0
 800a448:	20000fc0 	.word	0x20000fc0
 800a44c:	20000fd4 	.word	0x20000fd4
 800a450:	20000fe8 	.word	0x20000fe8
 800a454:	20000fec 	.word	0x20000fec
 800a458:	2000109c 	.word	0x2000109c
 800a45c:	20000ffc 	.word	0x20000ffc
 800a460:	0800b098 	.word	0x0800b098

0800a464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	3b04      	subs	r3, #4
 800a474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3b04      	subs	r3, #4
 800a482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	f023 0201 	bic.w	r2, r3, #1
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3b04      	subs	r3, #4
 800a492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a494:	4a0c      	ldr	r2, [pc, #48]	; (800a4c8 <pxPortInitialiseStack+0x64>)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3b14      	subs	r3, #20
 800a49e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3b04      	subs	r3, #4
 800a4aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f06f 0202 	mvn.w	r2, #2
 800a4b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	3b20      	subs	r3, #32
 800a4b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr
 800a4c8:	0800a4cd 	.word	0x0800a4cd

0800a4cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4d6:	4b12      	ldr	r3, [pc, #72]	; (800a520 <prvTaskExitError+0x54>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4de:	d00a      	beq.n	800a4f6 <prvTaskExitError+0x2a>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60fb      	str	r3, [r7, #12]
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <prvTaskExitError+0x28>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a50a:	bf00      	nop
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0fc      	beq.n	800a50c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a512:	bf00      	nop
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	2000000c 	.word	0x2000000c
	...

0800a530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a530:	4b07      	ldr	r3, [pc, #28]	; (800a550 <pxCurrentTCBConst2>)
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f380 8809 	msr	PSP, r0
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f04f 0000 	mov.w	r0, #0
 800a546:	f380 8811 	msr	BASEPRI, r0
 800a54a:	4770      	bx	lr
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst2>:
 800a550:	20000ac0 	.word	0x20000ac0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a558:	4808      	ldr	r0, [pc, #32]	; (800a57c <prvPortStartFirstTask+0x24>)
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	6800      	ldr	r0, [r0, #0]
 800a55e:	f380 8808 	msr	MSP, r0
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f380 8814 	msr	CONTROL, r0
 800a56a:	b662      	cpsie	i
 800a56c:	b661      	cpsie	f
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	df00      	svc	0
 800a578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a57a:	bf00      	nop
 800a57c:	e000ed08 	.word	0xe000ed08

0800a580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a586:	4b46      	ldr	r3, [pc, #280]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a46      	ldr	r2, [pc, #280]	; (800a6a4 <xPortStartScheduler+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d10a      	bne.n	800a5a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	613b      	str	r3, [r7, #16]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	; (800a6a0 <xPortStartScheduler+0x120>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	; (800a6a8 <xPortStartScheduler+0x128>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d10a      	bne.n	800a5c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a5c6:	4b39      	ldr	r3, [pc, #228]	; (800a6ac <xPortStartScheduler+0x12c>)
 800a5c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	22ff      	movs	r2, #255	; 0xff
 800a5d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	4b31      	ldr	r3, [pc, #196]	; (800a6b0 <xPortStartScheduler+0x130>)
 800a5ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5ee:	4b31      	ldr	r3, [pc, #196]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f0:	2207      	movs	r2, #7
 800a5f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5f4:	e009      	b.n	800a60a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	4a2d      	ldr	r2, [pc, #180]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a5fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a60a:	78fb      	ldrb	r3, [r7, #3]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a612:	2b80      	cmp	r3, #128	; 0x80
 800a614:	d0ef      	beq.n	800a5f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a616:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f1c3 0307 	rsb	r3, r3, #7
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d00a      	beq.n	800a638 <xPortStartScheduler+0xb8>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	60bb      	str	r3, [r7, #8]
}
 800a634:	bf00      	nop
 800a636:	e7fe      	b.n	800a636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a638:	4b1e      	ldr	r3, [pc, #120]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	021b      	lsls	r3, r3, #8
 800a63e:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a64a:	4a1a      	ldr	r2, [pc, #104]	; (800a6b4 <xPortStartScheduler+0x134>)
 800a64c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	b2da      	uxtb	r2, r3
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a17      	ldr	r2, [pc, #92]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a65c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a662:	4b15      	ldr	r3, [pc, #84]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a14      	ldr	r2, [pc, #80]	; (800a6b8 <xPortStartScheduler+0x138>)
 800a668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a66c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a66e:	f000 f8dd 	bl	800a82c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <xPortStartScheduler+0x13c>)
 800a674:	2200      	movs	r2, #0
 800a676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a678:	f000 f8fc 	bl	800a874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a0f      	ldr	r2, [pc, #60]	; (800a6c0 <xPortStartScheduler+0x140>)
 800a682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a688:	f7ff ff66 	bl	800a558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a68c:	f7ff f850 	bl	8009730 <vTaskSwitchContext>
	prvTaskExitError();
 800a690:	f7ff ff1c 	bl	800a4cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	e000ed00 	.word	0xe000ed00
 800a6a4:	410fc271 	.word	0x410fc271
 800a6a8:	410fc270 	.word	0x410fc270
 800a6ac:	e000e400 	.word	0xe000e400
 800a6b0:	200010ec 	.word	0x200010ec
 800a6b4:	200010f0 	.word	0x200010f0
 800a6b8:	e000ed20 	.word	0xe000ed20
 800a6bc:	2000000c 	.word	0x2000000c
 800a6c0:	e000ef34 	.word	0xe000ef34

0800a6c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	607b      	str	r3, [r7, #4]
}
 800a6dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a6de:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	4a0d      	ldr	r2, [pc, #52]	; (800a71c <vPortEnterCritical+0x58>)
 800a6e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <vPortEnterCritical+0x58>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10f      	bne.n	800a710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <vPortEnterCritical+0x5c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00a      	beq.n	800a710 <vPortEnterCritical+0x4c>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	603b      	str	r3, [r7, #0]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <vPortEnterCritical+0x4a>
	}
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	2000000c 	.word	0x2000000c
 800a720:	e000ed04 	.word	0xe000ed04

0800a724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a72a:	4b12      	ldr	r3, [pc, #72]	; (800a774 <vPortExitCritical+0x50>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10a      	bne.n	800a748 <vPortExitCritical+0x24>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	607b      	str	r3, [r7, #4]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a748:	4b0a      	ldr	r3, [pc, #40]	; (800a774 <vPortExitCritical+0x50>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	4a09      	ldr	r2, [pc, #36]	; (800a774 <vPortExitCritical+0x50>)
 800a750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a752:	4b08      	ldr	r3, [pc, #32]	; (800a774 <vPortExitCritical+0x50>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <vPortExitCritical+0x42>
 800a75a:	2300      	movs	r3, #0
 800a75c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f383 8811 	msr	BASEPRI, r3
}
 800a764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	2000000c 	.word	0x2000000c
	...

0800a780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a780:	f3ef 8009 	mrs	r0, PSP
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4b15      	ldr	r3, [pc, #84]	; (800a7e0 <pxCurrentTCBConst>)
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	f01e 0f10 	tst.w	lr, #16
 800a790:	bf08      	it	eq
 800a792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a7a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a7a4:	f380 8811 	msr	BASEPRI, r0
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f7fe ffbe 	bl	8009730 <vTaskSwitchContext>
 800a7b4:	f04f 0000 	mov.w	r0, #0
 800a7b8:	f380 8811 	msr	BASEPRI, r0
 800a7bc:	bc09      	pop	{r0, r3}
 800a7be:	6819      	ldr	r1, [r3, #0]
 800a7c0:	6808      	ldr	r0, [r1, #0]
 800a7c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c6:	f01e 0f10 	tst.w	lr, #16
 800a7ca:	bf08      	it	eq
 800a7cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a7d0:	f380 8809 	msr	PSP, r0
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	f3af 8000 	nop.w

0800a7e0 <pxCurrentTCBConst>:
 800a7e0:	20000ac0 	.word	0x20000ac0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop

0800a7e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	607b      	str	r3, [r7, #4]
}
 800a800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a802:	f7fe fedb 	bl	80095bc <xTaskIncrementTick>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d003      	beq.n	800a814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <xPortSysTickHandler+0x40>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	f383 8811 	msr	BASEPRI, r3
}
 800a81e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a832:	2200      	movs	r2, #0
 800a834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <vPortSetupTimerInterrupt+0x38>)
 800a838:	2200      	movs	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a83c:	4b0a      	ldr	r3, [pc, #40]	; (800a868 <vPortSetupTimerInterrupt+0x3c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <vPortSetupTimerInterrupt+0x40>)
 800a842:	fba2 2303 	umull	r2, r3, r2, r3
 800a846:	099b      	lsrs	r3, r3, #6
 800a848:	4a09      	ldr	r2, [pc, #36]	; (800a870 <vPortSetupTimerInterrupt+0x44>)
 800a84a:	3b01      	subs	r3, #1
 800a84c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <vPortSetupTimerInterrupt+0x34>)
 800a850:	2207      	movs	r2, #7
 800a852:	601a      	str	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	e000e010 	.word	0xe000e010
 800a864:	e000e018 	.word	0xe000e018
 800a868:	20000000 	.word	0x20000000
 800a86c:	10624dd3 	.word	0x10624dd3
 800a870:	e000e014 	.word	0xe000e014

0800a874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a884 <vPortEnableVFP+0x10>
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a87e:	6001      	str	r1, [r0, #0]
 800a880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a882:	bf00      	nop
 800a884:	e000ed88 	.word	0xe000ed88

0800a888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a88e:	f3ef 8305 	mrs	r3, IPSR
 800a892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d914      	bls.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a89a:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <vPortValidateInterruptPriority+0x70>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a8a4:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <vPortValidateInterruptPriority+0x74>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	7afa      	ldrb	r2, [r7, #11]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d20a      	bcs.n	800a8c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
}
 800a8c0:	bf00      	nop
 800a8c2:	e7fe      	b.n	800a8c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a8c4:	4b0e      	ldr	r3, [pc, #56]	; (800a900 <vPortValidateInterruptPriority+0x78>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	; (800a904 <vPortValidateInterruptPriority+0x7c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d90a      	bls.n	800a8ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d8:	f383 8811 	msr	BASEPRI, r3
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	603b      	str	r3, [r7, #0]
}
 800a8e6:	bf00      	nop
 800a8e8:	e7fe      	b.n	800a8e8 <vPortValidateInterruptPriority+0x60>
	}
 800a8ea:	bf00      	nop
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	e000e3f0 	.word	0xe000e3f0
 800a8fc:	200010ec 	.word	0x200010ec
 800a900:	e000ed0c 	.word	0xe000ed0c
 800a904:	200010f0 	.word	0x200010f0

0800a908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a914:	f7fe fd96 	bl	8009444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a918:	4b5b      	ldr	r3, [pc, #364]	; (800aa88 <pvPortMalloc+0x180>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a920:	f000 f920 	bl	800ab64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a924:	4b59      	ldr	r3, [pc, #356]	; (800aa8c <pvPortMalloc+0x184>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f040 8093 	bne.w	800aa58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d01d      	beq.n	800a974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a938:	2208      	movs	r2, #8
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d014      	beq.n	800a974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f023 0307 	bic.w	r3, r3, #7
 800a950:	3308      	adds	r3, #8
 800a952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <pvPortMalloc+0x6c>
	__asm volatile
 800a95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	617b      	str	r3, [r7, #20]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d06e      	beq.n	800aa58 <pvPortMalloc+0x150>
 800a97a:	4b45      	ldr	r3, [pc, #276]	; (800aa90 <pvPortMalloc+0x188>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d869      	bhi.n	800aa58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a984:	4b43      	ldr	r3, [pc, #268]	; (800aa94 <pvPortMalloc+0x18c>)
 800a986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a988:	4b42      	ldr	r3, [pc, #264]	; (800aa94 <pvPortMalloc+0x18c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a98e:	e004      	b.n	800a99a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d903      	bls.n	800a9ac <pvPortMalloc+0xa4>
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f1      	bne.n	800a990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9ac:	4b36      	ldr	r3, [pc, #216]	; (800aa88 <pvPortMalloc+0x180>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d050      	beq.n	800aa58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	4413      	add	r3, r2
 800a9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	1ad2      	subs	r2, r2, r3
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d91f      	bls.n	800aa18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4413      	add	r3, r2
 800a9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f003 0307 	and.w	r3, r3, #7
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <pvPortMalloc+0xf8>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	613b      	str	r3, [r7, #16]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa12:	69b8      	ldr	r0, [r7, #24]
 800aa14:	f000 f908 	bl	800ac28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa18:	4b1d      	ldr	r3, [pc, #116]	; (800aa90 <pvPortMalloc+0x188>)
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <pvPortMalloc+0x188>)
 800aa24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa26:	4b1a      	ldr	r3, [pc, #104]	; (800aa90 <pvPortMalloc+0x188>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b1b      	ldr	r3, [pc, #108]	; (800aa98 <pvPortMalloc+0x190>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d203      	bcs.n	800aa3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa32:	4b17      	ldr	r3, [pc, #92]	; (800aa90 <pvPortMalloc+0x188>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a18      	ldr	r2, [pc, #96]	; (800aa98 <pvPortMalloc+0x190>)
 800aa38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	685a      	ldr	r2, [r3, #4]
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <pvPortMalloc+0x184>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa4e:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <pvPortMalloc+0x194>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3301      	adds	r3, #1
 800aa54:	4a11      	ldr	r2, [pc, #68]	; (800aa9c <pvPortMalloc+0x194>)
 800aa56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa58:	f7fe fd02 	bl	8009460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <pvPortMalloc+0x174>
	__asm volatile
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	f383 8811 	msr	BASEPRI, r3
 800aa6e:	f3bf 8f6f 	isb	sy
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	60fb      	str	r3, [r7, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	e7fe      	b.n	800aa7a <pvPortMalloc+0x172>
	return pvReturn;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20004cfc 	.word	0x20004cfc
 800aa8c:	20004d10 	.word	0x20004d10
 800aa90:	20004d00 	.word	0x20004d00
 800aa94:	20004cf4 	.word	0x20004cf4
 800aa98:	20004d04 	.word	0x20004d04
 800aa9c:	20004d08 	.word	0x20004d08

0800aaa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d04d      	beq.n	800ab4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aab2:	2308      	movs	r3, #8
 800aab4:	425b      	negs	r3, r3
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	4413      	add	r3, r2
 800aaba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <vPortFree+0xb8>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4013      	ands	r3, r2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <vPortFree+0x44>
	__asm volatile
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	60fb      	str	r3, [r7, #12]
}
 800aae0:	bf00      	nop
 800aae2:	e7fe      	b.n	800aae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00a      	beq.n	800ab02 <vPortFree+0x62>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <vPortFree+0xb8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01e      	beq.n	800ab4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d11a      	bne.n	800ab4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	685a      	ldr	r2, [r3, #4]
 800ab1c:	4b0e      	ldr	r3, [pc, #56]	; (800ab58 <vPortFree+0xb8>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	43db      	mvns	r3, r3
 800ab22:	401a      	ands	r2, r3
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab28:	f7fe fc8c 	bl	8009444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	4b0a      	ldr	r3, [pc, #40]	; (800ab5c <vPortFree+0xbc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4413      	add	r3, r2
 800ab36:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <vPortFree+0xbc>)
 800ab38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab3a:	6938      	ldr	r0, [r7, #16]
 800ab3c:	f000 f874 	bl	800ac28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <vPortFree+0xc0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	4a06      	ldr	r2, [pc, #24]	; (800ab60 <vPortFree+0xc0>)
 800ab48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab4a:	f7fe fc89 	bl	8009460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab4e:	bf00      	nop
 800ab50:	3718      	adds	r7, #24
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20004d10 	.word	0x20004d10
 800ab5c:	20004d00 	.word	0x20004d00
 800ab60:	20004d0c 	.word	0x20004d0c

0800ab64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab70:	4b27      	ldr	r3, [pc, #156]	; (800ac10 <prvHeapInit+0xac>)
 800ab72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f003 0307 	and.w	r3, r3, #7
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00c      	beq.n	800ab98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3307      	adds	r3, #7
 800ab82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0307 	bic.w	r3, r3, #7
 800ab8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	4a1f      	ldr	r2, [pc, #124]	; (800ac10 <prvHeapInit+0xac>)
 800ab94:	4413      	add	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab9c:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <prvHeapInit+0xb0>)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aba2:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <prvHeapInit+0xb0>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	4413      	add	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abb0:	2208      	movs	r2, #8
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1a9b      	subs	r3, r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 0307 	bic.w	r3, r3, #7
 800abbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4a15      	ldr	r2, [pc, #84]	; (800ac18 <prvHeapInit+0xb4>)
 800abc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abc6:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <prvHeapInit+0xb4>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2200      	movs	r2, #0
 800abcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abce:	4b12      	ldr	r3, [pc, #72]	; (800ac18 <prvHeapInit+0xb4>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2200      	movs	r2, #0
 800abd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	1ad2      	subs	r2, r2, r3
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abe4:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvHeapInit+0xb4>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4a0a      	ldr	r2, [pc, #40]	; (800ac1c <prvHeapInit+0xb8>)
 800abf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	4a09      	ldr	r2, [pc, #36]	; (800ac20 <prvHeapInit+0xbc>)
 800abfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abfc:	4b09      	ldr	r3, [pc, #36]	; (800ac24 <prvHeapInit+0xc0>)
 800abfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac02:	601a      	str	r2, [r3, #0]
}
 800ac04:	bf00      	nop
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr
 800ac10:	200010f4 	.word	0x200010f4
 800ac14:	20004cf4 	.word	0x20004cf4
 800ac18:	20004cfc 	.word	0x20004cfc
 800ac1c:	20004d04 	.word	0x20004d04
 800ac20:	20004d00 	.word	0x20004d00
 800ac24:	20004d10 	.word	0x20004d10

0800ac28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac30:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <prvInsertBlockIntoFreeList+0xac>)
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	e002      	b.n	800ac3c <prvInsertBlockIntoFreeList+0x14>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d8f7      	bhi.n	800ac36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	4413      	add	r3, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d108      	bne.n	800ac6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	441a      	add	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	441a      	add	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d118      	bne.n	800acb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <prvInsertBlockIntoFreeList+0xb0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d00d      	beq.n	800aca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	441a      	add	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	e008      	b.n	800acb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <prvInsertBlockIntoFreeList+0xb0>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e003      	b.n	800acb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d002      	beq.n	800acc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	20004cf4 	.word	0x20004cf4
 800acd8:	20004cfc 	.word	0x20004cfc

0800acdc <_ZdlPvj>:
 800acdc:	f000 b811 	b.w	800ad02 <_ZdlPv>

0800ace0 <_Znwj>:
 800ace0:	2801      	cmp	r0, #1
 800ace2:	bf38      	it	cc
 800ace4:	2001      	movcc	r0, #1
 800ace6:	b510      	push	{r4, lr}
 800ace8:	4604      	mov	r4, r0
 800acea:	4620      	mov	r0, r4
 800acec:	f000 f846 	bl	800ad7c <malloc>
 800acf0:	b930      	cbnz	r0, 800ad00 <_Znwj+0x20>
 800acf2:	f000 f809 	bl	800ad08 <_ZSt15get_new_handlerv>
 800acf6:	b908      	cbnz	r0, 800acfc <_Znwj+0x1c>
 800acf8:	f000 f80e 	bl	800ad18 <abort>
 800acfc:	4780      	blx	r0
 800acfe:	e7f4      	b.n	800acea <_Znwj+0xa>
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <_ZdlPv>:
 800ad02:	f000 b843 	b.w	800ad8c <free>
	...

0800ad08 <_ZSt15get_new_handlerv>:
 800ad08:	4b02      	ldr	r3, [pc, #8]	; (800ad14 <_ZSt15get_new_handlerv+0xc>)
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	f3bf 8f5b 	dmb	ish
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	20004d14 	.word	0x20004d14

0800ad18 <abort>:
 800ad18:	b508      	push	{r3, lr}
 800ad1a:	2006      	movs	r0, #6
 800ad1c:	f000 f96c 	bl	800aff8 <raise>
 800ad20:	2001      	movs	r0, #1
 800ad22:	f7f7 fcb5 	bl	8002690 <_exit>
	...

0800ad28 <__errno>:
 800ad28:	4b01      	ldr	r3, [pc, #4]	; (800ad30 <__errno+0x8>)
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	20000010 	.word	0x20000010

0800ad34 <__libc_init_array>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	4d0d      	ldr	r5, [pc, #52]	; (800ad6c <__libc_init_array+0x38>)
 800ad38:	4c0d      	ldr	r4, [pc, #52]	; (800ad70 <__libc_init_array+0x3c>)
 800ad3a:	1b64      	subs	r4, r4, r5
 800ad3c:	10a4      	asrs	r4, r4, #2
 800ad3e:	2600      	movs	r6, #0
 800ad40:	42a6      	cmp	r6, r4
 800ad42:	d109      	bne.n	800ad58 <__libc_init_array+0x24>
 800ad44:	4d0b      	ldr	r5, [pc, #44]	; (800ad74 <__libc_init_array+0x40>)
 800ad46:	4c0c      	ldr	r4, [pc, #48]	; (800ad78 <__libc_init_array+0x44>)
 800ad48:	f000 f980 	bl	800b04c <_init>
 800ad4c:	1b64      	subs	r4, r4, r5
 800ad4e:	10a4      	asrs	r4, r4, #2
 800ad50:	2600      	movs	r6, #0
 800ad52:	42a6      	cmp	r6, r4
 800ad54:	d105      	bne.n	800ad62 <__libc_init_array+0x2e>
 800ad56:	bd70      	pop	{r4, r5, r6, pc}
 800ad58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad5c:	4798      	blx	r3
 800ad5e:	3601      	adds	r6, #1
 800ad60:	e7ee      	b.n	800ad40 <__libc_init_array+0xc>
 800ad62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad66:	4798      	blx	r3
 800ad68:	3601      	adds	r6, #1
 800ad6a:	e7f2      	b.n	800ad52 <__libc_init_array+0x1e>
 800ad6c:	0800b12c 	.word	0x0800b12c
 800ad70:	0800b12c 	.word	0x0800b12c
 800ad74:	0800b12c 	.word	0x0800b12c
 800ad78:	0800b134 	.word	0x0800b134

0800ad7c <malloc>:
 800ad7c:	4b02      	ldr	r3, [pc, #8]	; (800ad88 <malloc+0xc>)
 800ad7e:	4601      	mov	r1, r0
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	f000 b88d 	b.w	800aea0 <_malloc_r>
 800ad86:	bf00      	nop
 800ad88:	20000010 	.word	0x20000010

0800ad8c <free>:
 800ad8c:	4b02      	ldr	r3, [pc, #8]	; (800ad98 <free+0xc>)
 800ad8e:	4601      	mov	r1, r0
 800ad90:	6818      	ldr	r0, [r3, #0]
 800ad92:	f000 b819 	b.w	800adc8 <_free_r>
 800ad96:	bf00      	nop
 800ad98:	20000010 	.word	0x20000010

0800ad9c <memcpy>:
 800ad9c:	440a      	add	r2, r1
 800ad9e:	4291      	cmp	r1, r2
 800ada0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ada4:	d100      	bne.n	800ada8 <memcpy+0xc>
 800ada6:	4770      	bx	lr
 800ada8:	b510      	push	{r4, lr}
 800adaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adb2:	4291      	cmp	r1, r2
 800adb4:	d1f9      	bne.n	800adaa <memcpy+0xe>
 800adb6:	bd10      	pop	{r4, pc}

0800adb8 <memset>:
 800adb8:	4402      	add	r2, r0
 800adba:	4603      	mov	r3, r0
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d100      	bne.n	800adc2 <memset+0xa>
 800adc0:	4770      	bx	lr
 800adc2:	f803 1b01 	strb.w	r1, [r3], #1
 800adc6:	e7f9      	b.n	800adbc <memset+0x4>

0800adc8 <_free_r>:
 800adc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adca:	2900      	cmp	r1, #0
 800adcc:	d044      	beq.n	800ae58 <_free_r+0x90>
 800adce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add2:	9001      	str	r0, [sp, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	f1a1 0404 	sub.w	r4, r1, #4
 800adda:	bfb8      	it	lt
 800addc:	18e4      	addlt	r4, r4, r3
 800adde:	f000 f927 	bl	800b030 <__malloc_lock>
 800ade2:	4a1e      	ldr	r2, [pc, #120]	; (800ae5c <_free_r+0x94>)
 800ade4:	9801      	ldr	r0, [sp, #4]
 800ade6:	6813      	ldr	r3, [r2, #0]
 800ade8:	b933      	cbnz	r3, 800adf8 <_free_r+0x30>
 800adea:	6063      	str	r3, [r4, #4]
 800adec:	6014      	str	r4, [r2, #0]
 800adee:	b003      	add	sp, #12
 800adf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adf4:	f000 b922 	b.w	800b03c <__malloc_unlock>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d908      	bls.n	800ae0e <_free_r+0x46>
 800adfc:	6825      	ldr	r5, [r4, #0]
 800adfe:	1961      	adds	r1, r4, r5
 800ae00:	428b      	cmp	r3, r1
 800ae02:	bf01      	itttt	eq
 800ae04:	6819      	ldreq	r1, [r3, #0]
 800ae06:	685b      	ldreq	r3, [r3, #4]
 800ae08:	1949      	addeq	r1, r1, r5
 800ae0a:	6021      	streq	r1, [r4, #0]
 800ae0c:	e7ed      	b.n	800adea <_free_r+0x22>
 800ae0e:	461a      	mov	r2, r3
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	b10b      	cbz	r3, 800ae18 <_free_r+0x50>
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	d9fa      	bls.n	800ae0e <_free_r+0x46>
 800ae18:	6811      	ldr	r1, [r2, #0]
 800ae1a:	1855      	adds	r5, r2, r1
 800ae1c:	42a5      	cmp	r5, r4
 800ae1e:	d10b      	bne.n	800ae38 <_free_r+0x70>
 800ae20:	6824      	ldr	r4, [r4, #0]
 800ae22:	4421      	add	r1, r4
 800ae24:	1854      	adds	r4, r2, r1
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	6011      	str	r1, [r2, #0]
 800ae2a:	d1e0      	bne.n	800adee <_free_r+0x26>
 800ae2c:	681c      	ldr	r4, [r3, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	6053      	str	r3, [r2, #4]
 800ae32:	4421      	add	r1, r4
 800ae34:	6011      	str	r1, [r2, #0]
 800ae36:	e7da      	b.n	800adee <_free_r+0x26>
 800ae38:	d902      	bls.n	800ae40 <_free_r+0x78>
 800ae3a:	230c      	movs	r3, #12
 800ae3c:	6003      	str	r3, [r0, #0]
 800ae3e:	e7d6      	b.n	800adee <_free_r+0x26>
 800ae40:	6825      	ldr	r5, [r4, #0]
 800ae42:	1961      	adds	r1, r4, r5
 800ae44:	428b      	cmp	r3, r1
 800ae46:	bf04      	itt	eq
 800ae48:	6819      	ldreq	r1, [r3, #0]
 800ae4a:	685b      	ldreq	r3, [r3, #4]
 800ae4c:	6063      	str	r3, [r4, #4]
 800ae4e:	bf04      	itt	eq
 800ae50:	1949      	addeq	r1, r1, r5
 800ae52:	6021      	streq	r1, [r4, #0]
 800ae54:	6054      	str	r4, [r2, #4]
 800ae56:	e7ca      	b.n	800adee <_free_r+0x26>
 800ae58:	b003      	add	sp, #12
 800ae5a:	bd30      	pop	{r4, r5, pc}
 800ae5c:	20004d18 	.word	0x20004d18

0800ae60 <sbrk_aligned>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	4e0e      	ldr	r6, [pc, #56]	; (800ae9c <sbrk_aligned+0x3c>)
 800ae64:	460c      	mov	r4, r1
 800ae66:	6831      	ldr	r1, [r6, #0]
 800ae68:	4605      	mov	r5, r0
 800ae6a:	b911      	cbnz	r1, 800ae72 <sbrk_aligned+0x12>
 800ae6c:	f000 f88c 	bl	800af88 <_sbrk_r>
 800ae70:	6030      	str	r0, [r6, #0]
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f000 f887 	bl	800af88 <_sbrk_r>
 800ae7a:	1c43      	adds	r3, r0, #1
 800ae7c:	d00a      	beq.n	800ae94 <sbrk_aligned+0x34>
 800ae7e:	1cc4      	adds	r4, r0, #3
 800ae80:	f024 0403 	bic.w	r4, r4, #3
 800ae84:	42a0      	cmp	r0, r4
 800ae86:	d007      	beq.n	800ae98 <sbrk_aligned+0x38>
 800ae88:	1a21      	subs	r1, r4, r0
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f000 f87c 	bl	800af88 <_sbrk_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	d101      	bne.n	800ae98 <sbrk_aligned+0x38>
 800ae94:	f04f 34ff 	mov.w	r4, #4294967295
 800ae98:	4620      	mov	r0, r4
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	20004d1c 	.word	0x20004d1c

0800aea0 <_malloc_r>:
 800aea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea4:	1ccd      	adds	r5, r1, #3
 800aea6:	f025 0503 	bic.w	r5, r5, #3
 800aeaa:	3508      	adds	r5, #8
 800aeac:	2d0c      	cmp	r5, #12
 800aeae:	bf38      	it	cc
 800aeb0:	250c      	movcc	r5, #12
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	db01      	blt.n	800aebc <_malloc_r+0x1c>
 800aeb8:	42a9      	cmp	r1, r5
 800aeba:	d905      	bls.n	800aec8 <_malloc_r+0x28>
 800aebc:	230c      	movs	r3, #12
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	2600      	movs	r6, #0
 800aec2:	4630      	mov	r0, r6
 800aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec8:	4e2e      	ldr	r6, [pc, #184]	; (800af84 <_malloc_r+0xe4>)
 800aeca:	f000 f8b1 	bl	800b030 <__malloc_lock>
 800aece:	6833      	ldr	r3, [r6, #0]
 800aed0:	461c      	mov	r4, r3
 800aed2:	bb34      	cbnz	r4, 800af22 <_malloc_r+0x82>
 800aed4:	4629      	mov	r1, r5
 800aed6:	4638      	mov	r0, r7
 800aed8:	f7ff ffc2 	bl	800ae60 <sbrk_aligned>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	4604      	mov	r4, r0
 800aee0:	d14d      	bne.n	800af7e <_malloc_r+0xde>
 800aee2:	6834      	ldr	r4, [r6, #0]
 800aee4:	4626      	mov	r6, r4
 800aee6:	2e00      	cmp	r6, #0
 800aee8:	d140      	bne.n	800af6c <_malloc_r+0xcc>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	4631      	mov	r1, r6
 800aeee:	4638      	mov	r0, r7
 800aef0:	eb04 0803 	add.w	r8, r4, r3
 800aef4:	f000 f848 	bl	800af88 <_sbrk_r>
 800aef8:	4580      	cmp	r8, r0
 800aefa:	d13a      	bne.n	800af72 <_malloc_r+0xd2>
 800aefc:	6821      	ldr	r1, [r4, #0]
 800aefe:	3503      	adds	r5, #3
 800af00:	1a6d      	subs	r5, r5, r1
 800af02:	f025 0503 	bic.w	r5, r5, #3
 800af06:	3508      	adds	r5, #8
 800af08:	2d0c      	cmp	r5, #12
 800af0a:	bf38      	it	cc
 800af0c:	250c      	movcc	r5, #12
 800af0e:	4629      	mov	r1, r5
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff ffa5 	bl	800ae60 <sbrk_aligned>
 800af16:	3001      	adds	r0, #1
 800af18:	d02b      	beq.n	800af72 <_malloc_r+0xd2>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	442b      	add	r3, r5
 800af1e:	6023      	str	r3, [r4, #0]
 800af20:	e00e      	b.n	800af40 <_malloc_r+0xa0>
 800af22:	6822      	ldr	r2, [r4, #0]
 800af24:	1b52      	subs	r2, r2, r5
 800af26:	d41e      	bmi.n	800af66 <_malloc_r+0xc6>
 800af28:	2a0b      	cmp	r2, #11
 800af2a:	d916      	bls.n	800af5a <_malloc_r+0xba>
 800af2c:	1961      	adds	r1, r4, r5
 800af2e:	42a3      	cmp	r3, r4
 800af30:	6025      	str	r5, [r4, #0]
 800af32:	bf18      	it	ne
 800af34:	6059      	strne	r1, [r3, #4]
 800af36:	6863      	ldr	r3, [r4, #4]
 800af38:	bf08      	it	eq
 800af3a:	6031      	streq	r1, [r6, #0]
 800af3c:	5162      	str	r2, [r4, r5]
 800af3e:	604b      	str	r3, [r1, #4]
 800af40:	4638      	mov	r0, r7
 800af42:	f104 060b 	add.w	r6, r4, #11
 800af46:	f000 f879 	bl	800b03c <__malloc_unlock>
 800af4a:	f026 0607 	bic.w	r6, r6, #7
 800af4e:	1d23      	adds	r3, r4, #4
 800af50:	1af2      	subs	r2, r6, r3
 800af52:	d0b6      	beq.n	800aec2 <_malloc_r+0x22>
 800af54:	1b9b      	subs	r3, r3, r6
 800af56:	50a3      	str	r3, [r4, r2]
 800af58:	e7b3      	b.n	800aec2 <_malloc_r+0x22>
 800af5a:	6862      	ldr	r2, [r4, #4]
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	bf0c      	ite	eq
 800af60:	6032      	streq	r2, [r6, #0]
 800af62:	605a      	strne	r2, [r3, #4]
 800af64:	e7ec      	b.n	800af40 <_malloc_r+0xa0>
 800af66:	4623      	mov	r3, r4
 800af68:	6864      	ldr	r4, [r4, #4]
 800af6a:	e7b2      	b.n	800aed2 <_malloc_r+0x32>
 800af6c:	4634      	mov	r4, r6
 800af6e:	6876      	ldr	r6, [r6, #4]
 800af70:	e7b9      	b.n	800aee6 <_malloc_r+0x46>
 800af72:	230c      	movs	r3, #12
 800af74:	603b      	str	r3, [r7, #0]
 800af76:	4638      	mov	r0, r7
 800af78:	f000 f860 	bl	800b03c <__malloc_unlock>
 800af7c:	e7a1      	b.n	800aec2 <_malloc_r+0x22>
 800af7e:	6025      	str	r5, [r4, #0]
 800af80:	e7de      	b.n	800af40 <_malloc_r+0xa0>
 800af82:	bf00      	nop
 800af84:	20004d18 	.word	0x20004d18

0800af88 <_sbrk_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d06      	ldr	r5, [pc, #24]	; (800afa4 <_sbrk_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	f7f7 fb86 	bl	80026a4 <_sbrk>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_sbrk_r+0x1a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_sbrk_r+0x1a>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	20004d20 	.word	0x20004d20

0800afa8 <_raise_r>:
 800afa8:	291f      	cmp	r1, #31
 800afaa:	b538      	push	{r3, r4, r5, lr}
 800afac:	4604      	mov	r4, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	d904      	bls.n	800afbc <_raise_r+0x14>
 800afb2:	2316      	movs	r3, #22
 800afb4:	6003      	str	r3, [r0, #0]
 800afb6:	f04f 30ff 	mov.w	r0, #4294967295
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afbe:	b112      	cbz	r2, 800afc6 <_raise_r+0x1e>
 800afc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afc4:	b94b      	cbnz	r3, 800afda <_raise_r+0x32>
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 f830 	bl	800b02c <_getpid_r>
 800afcc:	462a      	mov	r2, r5
 800afce:	4601      	mov	r1, r0
 800afd0:	4620      	mov	r0, r4
 800afd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd6:	f000 b817 	b.w	800b008 <_kill_r>
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d00a      	beq.n	800aff4 <_raise_r+0x4c>
 800afde:	1c59      	adds	r1, r3, #1
 800afe0:	d103      	bne.n	800afea <_raise_r+0x42>
 800afe2:	2316      	movs	r3, #22
 800afe4:	6003      	str	r3, [r0, #0]
 800afe6:	2001      	movs	r0, #1
 800afe8:	e7e7      	b.n	800afba <_raise_r+0x12>
 800afea:	2400      	movs	r4, #0
 800afec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aff0:	4628      	mov	r0, r5
 800aff2:	4798      	blx	r3
 800aff4:	2000      	movs	r0, #0
 800aff6:	e7e0      	b.n	800afba <_raise_r+0x12>

0800aff8 <raise>:
 800aff8:	4b02      	ldr	r3, [pc, #8]	; (800b004 <raise+0xc>)
 800affa:	4601      	mov	r1, r0
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	f7ff bfd3 	b.w	800afa8 <_raise_r>
 800b002:	bf00      	nop
 800b004:	20000010 	.word	0x20000010

0800b008 <_kill_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4d07      	ldr	r5, [pc, #28]	; (800b028 <_kill_r+0x20>)
 800b00c:	2300      	movs	r3, #0
 800b00e:	4604      	mov	r4, r0
 800b010:	4608      	mov	r0, r1
 800b012:	4611      	mov	r1, r2
 800b014:	602b      	str	r3, [r5, #0]
 800b016:	f7f7 fb2b 	bl	8002670 <_kill>
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	d102      	bne.n	800b024 <_kill_r+0x1c>
 800b01e:	682b      	ldr	r3, [r5, #0]
 800b020:	b103      	cbz	r3, 800b024 <_kill_r+0x1c>
 800b022:	6023      	str	r3, [r4, #0]
 800b024:	bd38      	pop	{r3, r4, r5, pc}
 800b026:	bf00      	nop
 800b028:	20004d20 	.word	0x20004d20

0800b02c <_getpid_r>:
 800b02c:	f7f7 bb18 	b.w	8002660 <_getpid>

0800b030 <__malloc_lock>:
 800b030:	4801      	ldr	r0, [pc, #4]	; (800b038 <__malloc_lock+0x8>)
 800b032:	f000 b809 	b.w	800b048 <__retarget_lock_acquire_recursive>
 800b036:	bf00      	nop
 800b038:	20004d24 	.word	0x20004d24

0800b03c <__malloc_unlock>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__malloc_unlock+0x8>)
 800b03e:	f000 b804 	b.w	800b04a <__retarget_lock_release_recursive>
 800b042:	bf00      	nop
 800b044:	20004d24 	.word	0x20004d24

0800b048 <__retarget_lock_acquire_recursive>:
 800b048:	4770      	bx	lr

0800b04a <__retarget_lock_release_recursive>:
 800b04a:	4770      	bx	lr

0800b04c <_init>:
 800b04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b04e:	bf00      	nop
 800b050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b052:	bc08      	pop	{r3}
 800b054:	469e      	mov	lr, r3
 800b056:	4770      	bx	lr

0800b058 <_fini>:
 800b058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05a:	bf00      	nop
 800b05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b05e:	bc08      	pop	{r3}
 800b060:	469e      	mov	lr, r3
 800b062:	4770      	bx	lr


V8_Roomba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800a398  0800a398  0001a398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a490  0800a490  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a498  0800a498  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a498  0800a498  0001a498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a4a0  0800a4a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d60  20000070  0800a518  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd0  0800a518  00024dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000241c1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004870  00000000  00000000  00044261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  00048ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  0004a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001be8f  00000000  00000000  0004bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f338  00000000  00000000  00067b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0f7e  00000000  00000000  00086ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127e3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007538  00000000  00000000  00127e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a380 	.word	0x0800a380

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800a380 	.word	0x0800a380

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eba:	eef0 7ae7 	vabs.f32	s15, s15
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>:
#include "MPU_6050_Driver.hpp"

MPU_6050::MPU_6050(bool setAddressHigh, I2C_HandleTypeDef *hi2c_in,
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	72fb      	strb	r3, [r7, #11]
  GPIO_TypeDef* addressPinReg, uint16_t addressPin):
  addressPin(addressPinReg), addressPinVal(addressPin)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8b3a      	ldrh	r2, [r7, #24]
 8000ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
{
  if (setAddressHigh)
 8000ee8:	7afb      	ldrb	r3, [r7, #11]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft+0x2a>
  {
    address = ADDRESS_HIGH;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2269      	movs	r2, #105	; 0x69
 8000ef2:	801a      	strh	r2, [r3, #0]
 8000ef4:	e002      	b.n	8000efc <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft+0x30>
  }
  else
    address= ADDRESS_LOW;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2268      	movs	r2, #104	; 0x68
 8000efa:	801a      	strh	r2, [r3, #0]

  imuData = new IMU_Data();
 8000efc:	201c      	movs	r0, #28
 8000efe:	f008 f96f 	bl	80091e0 <_Znwj>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4619      	mov	r1, r3
 8000f06:	460a      	mov	r2, r1
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	6053      	str	r3, [r2, #4]
 8000f0e:	6093      	str	r3, [r2, #8]
 8000f10:	60d3      	str	r3, [r2, #12]
 8000f12:	6113      	str	r3, [r2, #16]
 8000f14:	6153      	str	r3, [r2, #20]
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6419      	str	r1, [r3, #64]	; 0x40

  hi2c = hi2c_in;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	645a      	str	r2, [r3, #68]	; 0x44
} 
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_ZN8MPU_6050D1Ev>:

MPU_6050::~MPU_6050()
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
{
	delete imuData;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <_ZN8MPU_6050D1Ev+0x18>
 8000f3c:	211c      	movs	r1, #28
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f008 f94c 	bl	80091dc <_ZdlPvj>
}
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <_ZN8MPU_605012calibrateMPUEv>:

void MPU_6050::calibrateMPU(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  // take 4000 measurements and average them out;
  float buffAx = 0, buffAy = 0, buffAz = 0;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  float buffGx = 0, buffGy = 0, buffGz = 0;
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  const int TOTAL_MEASUREMENTS = 4000;
 8000f7c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000f80:	60bb      	str	r3, [r7, #8]

  for (int measIter = 0; measIter < TOTAL_MEASUREMENTS; measIter ++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f8c:	da58      	bge.n	8001040 <_ZN8MPU_605012calibrateMPUEv+0xf0>
  {
    readTempRegisters();
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fd9a 	bl	8001ac8 <_ZN8MPU_605017readTempRegistersEv>
	readGyroRegisters();
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 fd44 	bl	8001a22 <_ZN8MPU_605017readGyroRegistersEv>
	readAccelRegisters();
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 fcf0 	bl	8001980 <_ZN8MPU_605018readAccelRegistersEv>

    buffAx += imuData->accX;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    buffAy += imuData->accY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	edc7 7a08 	vstr	s15, [r7, #32]
    buffAz += imuData->accZ - LSB_g * (address == ADDRESS_HIGH?-1:1);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	2b69      	cmp	r3, #105	; 0x69
 8000fdc:	d102      	bne.n	8000fe4 <_ZN8MPU_605012calibrateMPUEv+0x94>
 8000fde:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000fe2:	e001      	b.n	8000fe8 <_ZN8MPU_605012calibrateMPUEv+0x98>
 8000fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff8:	edc7 7a07 	vstr	s15, [r7, #28]

    buffGx += imuData->gyroX;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ed97 7a06 	vldr	s14, [r7, #24]
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	edc7 7a06 	vstr	s15, [r7, #24]
    buffGy += imuData->gyroY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	ed97 7a05 	vldr	s14, [r7, #20]
 800101c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001020:	edc7 7a05 	vstr	s15, [r7, #20]
    buffGz += imuData->gyroZ;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	edd3 7a05 	vldr	s15, [r3, #20]
 800102c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001034:	edc7 7a04 	vstr	s15, [r7, #16]
  for (int measIter = 0; measIter < TOTAL_MEASUREMENTS; measIter ++)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e7a2      	b.n	8000f86 <_ZN8MPU_605012calibrateMPUEv+0x36>
  }

  calibAx = buffAx / TOTAL_MEASUREMENTS;
 8001040:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001044:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80010b4 <_ZN8MPU_605012calibrateMPUEv+0x164>
 8001048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	edc3 7a08 	vstr	s15, [r3, #32]
  calibAy = buffAy / TOTAL_MEASUREMENTS;
 8001052:	ed97 7a08 	vldr	s14, [r7, #32]
 8001056:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010b4 <_ZN8MPU_605012calibrateMPUEv+0x164>
 800105a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  calibAz = buffAz / TOTAL_MEASUREMENTS;
 8001064:	ed97 7a07 	vldr	s14, [r7, #28]
 8001068:	eddf 6a12 	vldr	s13, [pc, #72]	; 80010b4 <_ZN8MPU_605012calibrateMPUEv+0x164>
 800106c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  calibGx = buffGx / TOTAL_MEASUREMENTS;
 8001076:	ed97 7a06 	vldr	s14, [r7, #24]
 800107a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80010b4 <_ZN8MPU_605012calibrateMPUEv+0x164>
 800107e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  calibGy = buffGy / TOTAL_MEASUREMENTS;
 8001088:	ed97 7a05 	vldr	s14, [r7, #20]
 800108c:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010b4 <_ZN8MPU_605012calibrateMPUEv+0x164>
 8001090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  calibGz = buffGz / TOTAL_MEASUREMENTS;
 800109a:	ed97 7a04 	vldr	s14, [r7, #16]
 800109e:	eddf 6a05 	vldr	s13, [pc, #20]	; 80010b4 <_ZN8MPU_605012calibrateMPUEv+0x164>
 80010a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	457a0000 	.word	0x457a0000

080010b8 <_ZN8MPU_605011correctDataEv>:

void MPU_6050::correctData(void)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  imuData->accX = (imuData->accX - calibAx)/LSB_g;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	ed93 7a00 	vldr	s14, [r3]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80010ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e0:	edc3 7a00 	vstr	s15, [r3]
  imuData->accY = (imuData->accY - calibAy)/LSB_g;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80010f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001104:	edc3 7a01 	vstr	s15, [r3, #4]
  imuData->accZ = (imuData->accZ - calibAz)/LSB_g;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001116:	ee77 6a67 	vsub.f32	s13, s14, s15
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	edc3 7a02 	vstr	s15, [r3, #8]

  imuData->gyroX = (imuData->gyroX - calibGx)/LSB_deg_s * 0.01745329; //deg to rad
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	ed93 7a03 	vldr	s14, [r3, #12]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800113a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edd3 7a07 	vldr	s15, [r3, #28]
 8001144:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001148:	ee16 0a90 	vmov	r0, s13
 800114c:	f7ff f9ac 	bl	80004a8 <__aeabi_f2d>
 8001150:	a32b      	add	r3, pc, #172	; (adr r3, 8001200 <_ZN8MPU_605011correctDataEv+0x148>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9ff 	bl	8000558 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001166:	f7ff fccf 	bl	8000b08 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	60e3      	str	r3, [r4, #12]
  imuData->gyroY = (imuData->gyroY - calibGy)/LSB_deg_s * 0.01745329;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	ed93 7a04 	vldr	s14, [r3, #16]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800117c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a07 	vldr	s15, [r3, #28]
 8001186:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800118a:	ee16 0a90 	vmov	r0, s13
 800118e:	f7ff f98b 	bl	80004a8 <__aeabi_f2d>
 8001192:	a31b      	add	r3, pc, #108	; (adr r3, 8001200 <_ZN8MPU_605011correctDataEv+0x148>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff f9de 	bl	8000558 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80011a8:	f7ff fcae 	bl	8000b08 <__aeabi_d2f>
 80011ac:	4603      	mov	r3, r0
 80011ae:	6123      	str	r3, [r4, #16]
  imuData->gyroZ = (imuData->gyroZ - calibGz)/LSB_deg_s * 0.01745329;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	ed93 7a05 	vldr	s14, [r3, #20]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80011be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80011c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011cc:	ee16 0a90 	vmov	r0, s13
 80011d0:	f7ff f96a 	bl	80004a8 <__aeabi_f2d>
 80011d4:	a30a      	add	r3, pc, #40	; (adr r3, 8001200 <_ZN8MPU_605011correctDataEv+0x148>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff f9bd 	bl	8000558 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80011ea:	f7ff fc8d 	bl	8000b08 <__aeabi_d2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	6163      	str	r3, [r4, #20]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	7707c94d 	.word	0x7707c94d
 8001204:	3f91df46 	.word	0x3f91df46

08001208 <_ZN8MPU_60509startPinsEv>:

void MPU_6050::startPins()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if (address == ADDRESS_HIGH)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b69      	cmp	r3, #105	; 0x69
 8001216:	d108      	bne.n	800122a <_ZN8MPU_60509startPinsEv+0x22>
  {
	HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_SET);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	f002 fae6 	bl	80037f4 <HAL_GPIO_WritePin>
  }
  else
  {
	  HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_RESET);
  }
}
 8001228:	e007      	b.n	800123a <_ZN8MPU_60509startPinsEv+0x32>
	  HAL_GPIO_WritePin(addressPin, addressPinVal, GPIO_PIN_RESET);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001232:	2200      	movs	r2, #0
 8001234:	4619      	mov	r1, r3
 8001236:	f002 fadd 	bl	80037f4 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_ZN8MPU_605010initializeEv>:

bool MPU_6050::initialize(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  sleepMode(false);
 800124a:	2100      	movs	r1, #0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fcb9 	bl	8001bc4 <_ZN8MPU_60509sleepModeEb>
  resetRegisters();
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fc9a 	bl	8001b8c <_ZN8MPU_605014resetRegistersEv>
  disableTemp(false);
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 fd31 	bl	8001cc2 <_ZN8MPU_605011disableTempEb>
  setFullScaleAccel(ACCEL_FULLSCALE_16);
 8001260:	2103      	movs	r1, #3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fb4a 	bl	80018fc <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale>
  setFullScaleGyro(GYRO_FULLSCALE_1000);
 8001268:	2102      	movs	r1, #2
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fb00 	bl	8001870 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale>
  selectClockSource(INTERNAL_8MHZ);
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fce9 	bl	8001c4a <_ZN8MPU_605017selectClockSourceE12Clock_Select>
  calibrateMPU();
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fe69 	bl	8000f50 <_ZN8MPU_605012calibrateMPUEv>
  if (!selfTest())
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f8b6 	bl	80013f0 <_ZN8MPU_60508selfTestEv>
 8001284:	4603      	mov	r3, r0
 8001286:	f083 0301 	eor.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <_ZN8MPU_605010initializeEv+0x52>
  {
    return INIT_FAIL;
 8001290:	2300      	movs	r3, #0
 8001292:	e000      	b.n	8001296 <_ZN8MPU_605010initializeEv+0x54>
  }
  return INIT_SUCCESS;
 8001294:	2301      	movs	r3, #1
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	ed87 0b02 	vstr	d0, [r7, #8]
 80012a8:	6078      	str	r0, [r7, #4]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff f8ea 	bl	8000484 <__aeabi_i2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b11 	vmov	d1, r2, r3
 80012b8:	ed97 0b02 	vldr	d0, [r7, #8]
 80012bc:	f007 ffac 	bl	8009218 <pow>
 80012c0:	eeb0 7a40 	vmov.f32	s14, s0
 80012c4:	eef0 7a60 	vmov.f32	s15, s1
    }
 80012c8:	eeb0 0a47 	vmov.f32	s0, s14
 80012cc:	eef0 0a67 	vmov.f32	s1, s15
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <_Z15factoryTrimGyroh>:

double factoryTrimGyro(uint8_t testVal)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  return 25 * 131 * pow(1.046, testVal-1);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4618      	mov	r0, r3
 80012e8:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001318 <_Z15factoryTrimGyroh+0x40>
 80012ec:	f7ff ffd7 	bl	800129e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012f0:	ec51 0b10 	vmov	r0, r1, d0
 80012f4:	a30a      	add	r3, pc, #40	; (adr r3, 8001320 <_Z15factoryTrimGyroh+0x48>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f92d 	bl	8000558 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ec43 2b17 	vmov	d7, r2, r3
}
 8001306:	eeb0 0a47 	vmov.f32	s0, s14
 800130a:	eef0 0a67 	vmov.f32	s1, s15
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	f3af 8000 	nop.w
 8001318:	7ef9db23 	.word	0x7ef9db23
 800131c:	3ff0bc6a 	.word	0x3ff0bc6a
 8001320:	00000000 	.word	0x00000000
 8001324:	40a99600 	.word	0x40a99600

08001328 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
      return pow(__type(__x), __type(__y));
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff f8a6 	bl	8000484 <__aeabi_i2d>
 8001338:	4604      	mov	r4, r0
 800133a:	460d      	mov	r5, r1
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff f8a1 	bl	8000484 <__aeabi_i2d>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ec43 2b11 	vmov	d1, r2, r3
 800134a:	ec45 4b10 	vmov	d0, r4, r5
 800134e:	f007 ff63 	bl	8009218 <pow>
 8001352:	eeb0 7a40 	vmov.f32	s14, s0
 8001356:	eef0 7a60 	vmov.f32	s15, s1
    }
 800135a:	eeb0 0a47 	vmov.f32	s0, s14
 800135e:	eef0 0a67 	vmov.f32	s1, s15
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}

08001368 <_Z16factoryTrimAccelh>:

double factoryTrimAccel(uint8_t testVal)
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  return 4096 * 0.34 * pow((0.92/0.34), (testVal-1)/(pow(2,5)-2));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	3b01      	subs	r3, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f884 	bl	8000484 <__aeabi_i2d>
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	2105      	movs	r1, #5
 8001382:	2002      	movs	r0, #2
 8001384:	f7ff ffd0 	bl	8001328 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001388:	ec51 0b10 	vmov	r0, r1, d0
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001394:	f7fe ff28 	bl	80001e8 <__aeabi_dsub>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7ff fa04 	bl	80007ac <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	ec43 2b17 	vmov	d7, r2, r3
 80013ac:	eeb0 1a47 	vmov.f32	s2, s14
 80013b0:	eef0 1a67 	vmov.f32	s3, s15
 80013b4:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80013e0 <_Z16factoryTrimAccelh+0x78>
 80013b8:	f007 ff2e 	bl	8009218 <pow>
 80013bc:	ec51 0b10 	vmov	r0, r1, d0
 80013c0:	a309      	add	r3, pc, #36	; (adr r3, 80013e8 <_Z16factoryTrimAccelh+0x80>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff f8c7 	bl	8000558 <__aeabi_dmul>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	ec43 2b17 	vmov	d7, r2, r3
}
 80013d2:	eeb0 0a47 	vmov.f32	s0, s14
 80013d6:	eef0 0a67 	vmov.f32	s1, s15
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bdb0      	pop	{r4, r5, r7, pc}
 80013e0:	a5a5a5a5 	.word	0xa5a5a5a5
 80013e4:	4005a5a5 	.word	0x4005a5a5
 80013e8:	5c28f5c3 	.word	0x5c28f5c3
 80013ec:	4095c28f 	.word	0x4095c28f

080013f0 <_ZN8MPU_60508selfTestEv>:

bool MPU_6050::selfTest(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0a6      	sub	sp, #152	; 0x98
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	6078      	str	r0, [r7, #4]
  uint8_t test_recv[4];

  float GyroXDisabled, GyroYDisabled, GyroZDisabled;
  float AccelXDisabled, AccelYDisabled, AccelZDisabled;
  
  uint8_t normalMeas[1] = {0b00011000};
 80013f8:	2318      	movs	r3, #24
 80013fa:	743b      	strb	r3, [r7, #16]
  HAL_I2C_Mem_Write(hi2c, (address<<1), GYRO_CONFIG, 1,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b299      	uxth	r1, r3
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	221b      	movs	r2, #27
 800141c:	f002 fb48 	bl	8003ab0 <HAL_I2C_Mem_Write>
    normalMeas, 1, HAL_MAX_DELAY);
  //osDelay(50);

  readAccelRegisters();
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 faad 	bl	8001980 <_ZN8MPU_605018readAccelRegistersEv>
  readGyroRegisters();
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fafb 	bl	8001a22 <_ZN8MPU_605017readGyroRegistersEv>

  GyroXDisabled = imuData->gyroX;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	66fb      	str	r3, [r7, #108]	; 0x6c
  GyroYDisabled = imuData->gyroY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	66bb      	str	r3, [r7, #104]	; 0x68
  GyroZDisabled = imuData->gyroZ;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	667b      	str	r3, [r7, #100]	; 0x64

  AccelXDisabled = imuData->accX;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	663b      	str	r3, [r7, #96]	; 0x60
  AccelYDisabled = imuData->accY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	65fb      	str	r3, [r7, #92]	; 0x5c
  AccelZDisabled = imuData->accZ;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	65bb      	str	r3, [r7, #88]	; 0x58

  float StrGyroX, StrGyroY, StrGyroZ;
  float StrAccelX, StrAccelY, StrAccelZ;

  uint8_t selfTest = 0b11111000;
 800145c:	23f8      	movs	r3, #248	; 0xf8
 800145e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(hi2c, (address<<1), GYRO_CONFIG, 1,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	b299      	uxth	r1, r3
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2301      	movs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f107 030f 	add.w	r3, r7, #15
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	221b      	movs	r2, #27
 8001480:	f002 fb16 	bl	8003ab0 <HAL_I2C_Mem_Write>
    &selfTest, sizeof(selfTest), HAL_MAX_DELAY);

  //osDelay(50);

  readAccelRegisters();
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fa7b 	bl	8001980 <_ZN8MPU_605018readAccelRegistersEv>
  readGyroRegisters();
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fac9 	bl	8001a22 <_ZN8MPU_605017readGyroRegistersEv>


  StrGyroX = imuData->gyroX - GyroXDisabled;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	ed93 7a03 	vldr	s14, [r3, #12]
 8001498:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  StrGyroY = imuData->gyroY - GyroYDisabled;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80014ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  StrGyroZ = imuData->gyroZ - GyroZDisabled;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80014c0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80014c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

  StrAccelX = imuData->accX - AccelXDisabled;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  StrAccelY = imuData->accY - AccelYDisabled;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80014e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  StrAccelZ = imuData->accZ - AccelZDisabled;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80014fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001504:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  HAL_I2C_Mem_Write(hi2c, (address<<1), GYRO_CONFIG, 1,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b299      	uxth	r1, r3
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2301      	movs	r3, #1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	221b      	movs	r2, #27
 8001528:	f002 fac2 	bl	8003ab0 <HAL_I2C_Mem_Write>
    normalMeas, sizeof(normalMeas), HAL_MAX_DELAY);

  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, SELF_TEST_X, 1,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b21b      	sxth	r3, r3
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	b21b      	sxth	r3, r3
 800153e:	b299      	uxth	r1, r3
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2304      	movs	r3, #4
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2301      	movs	r3, #1
 8001552:	220d      	movs	r2, #13
 8001554:	f002 fba6 	bl	8003ca4 <HAL_I2C_Mem_Read>
    test_recv, 4, HAL_MAX_DELAY);
  
  uint8_t test_a_x, test_a_y, test_a_z;
  uint8_t test_g_x, test_g_y, test_g_z;

  test_a_x = (test_recv[0] & 0b11100000) >> 1 
 8001558:	7d3b      	ldrb	r3, [r7, #20]
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001562:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    | ((test_recv[3] & 0b00110000) << 4);
  test_a_y = (test_recv[1] & 0b11100000) >> 1 
 8001566:	7d7b      	ldrb	r3, [r7, #21]
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	b25b      	sxtb	r3, r3
 800156e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001572:	b25a      	sxtb	r2, r3
    | ((test_recv[3] & 0b00001100) << 2);
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	b25b      	sxtb	r3, r3
 800157a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800157e:	b25b      	sxtb	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b25b      	sxtb	r3, r3
  test_a_y = (test_recv[1] & 0b11100000) >> 1 
 8001584:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  test_a_z = (test_recv[2] & 0b11100000) >> 1
 8001588:	7dbb      	ldrb	r3, [r7, #22]
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001592:	b2da      	uxtb	r2, r3
    | ((test_recv[3] & 0b00000011));
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	b2db      	uxtb	r3, r3
  test_a_z = (test_recv[2] & 0b11100000) >> 1
 800159c:	4313      	orrs	r3, r2
 800159e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  
  test_g_x = (test_recv[0] & 0b00011111);
 80015a2:	7d3b      	ldrb	r3, [r7, #20]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  test_g_y = (test_recv[1] & 0b00011111);
 80015ac:	7d7b      	ldrb	r3, [r7, #21]
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  test_g_z = (test_recv[2] & 0b00011111);
 80015b6:	7dbb      	ldrb	r3, [r7, #22]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

  float factTrimGx = 0, factTrimGy = 0, factTrimGz = 0;
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  float factTrimAx = 0, factTrimAy = 0, factTrimAz = 0;
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	67bb      	str	r3, [r7, #120]	; 0x78
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	677b      	str	r3, [r7, #116]	; 0x74
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	673b      	str	r3, [r7, #112]	; 0x70

  if (test_g_x != 0)
 80015e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00d      	beq.n	800160c <_ZN8MPU_60508selfTestEv+0x21c>
    factTrimGx = factoryTrimGyro(test_g_x);
 80015f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe6f 	bl	80012d8 <_Z15factoryTrimGyroh>
 80015fa:	ec53 2b10 	vmov	r2, r3, d0
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa81 	bl	8000b08 <__aeabi_d2f>
 8001606:	4603      	mov	r3, r0
 8001608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (test_g_y != 0)
 800160c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00d      	beq.n	8001630 <_ZN8MPU_60508selfTestEv+0x240>
    factTrimGy = factoryTrimGyro(test_g_y);
 8001614:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fe5d 	bl	80012d8 <_Z15factoryTrimGyroh>
 800161e:	ec53 2b10 	vmov	r2, r3, d0
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa6f 	bl	8000b08 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (test_g_z != 0)
 8001630:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00c      	beq.n	8001652 <_ZN8MPU_60508selfTestEv+0x262>
    factTrimGz = factoryTrimGyro(test_g_z);
 8001638:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe4b 	bl	80012d8 <_Z15factoryTrimGyroh>
 8001642:	ec53 2b10 	vmov	r2, r3, d0
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa5d 	bl	8000b08 <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (test_a_x != 0)
 8001652:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <_ZN8MPU_60508selfTestEv+0x284>
    factTrimAx = factoryTrimAccel(test_a_x);
 800165a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe82 	bl	8001368 <_Z16factoryTrimAccelh>
 8001664:	ec53 2b10 	vmov	r2, r3, d0
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	f7ff fa4c 	bl	8000b08 <__aeabi_d2f>
 8001670:	4603      	mov	r3, r0
 8001672:	67bb      	str	r3, [r7, #120]	; 0x78
  if (test_a_y != 0)
 8001674:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <_ZN8MPU_60508selfTestEv+0x2a6>
    factTrimAy = factoryTrimAccel(test_a_y);
 800167c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fe71 	bl	8001368 <_Z16factoryTrimAccelh>
 8001686:	ec53 2b10 	vmov	r2, r3, d0
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fa3b 	bl	8000b08 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	677b      	str	r3, [r7, #116]	; 0x74
  if (test_a_z != 0)
 8001696:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <_ZN8MPU_60508selfTestEv+0x2c8>
    factTrimAz = factoryTrimAccel(test_a_z);
 800169e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fe60 	bl	8001368 <_Z16factoryTrimAccelh>
 80016a8:	ec53 2b10 	vmov	r2, r3, d0
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff fa2a 	bl	8000b08 <__aeabi_d2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	673b      	str	r3, [r7, #112]	; 0x70

  float accXRes = (StrAccelX - factTrimAx)/factTrimAx * 100;
 80016b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80016bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016c4:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80016c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016cc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800186c <_ZN8MPU_60508selfTestEv+0x47c>
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float accYRes = (StrAccelY - factTrimAy)/factTrimAy * 100;
 80016d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80016dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80016e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016e4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80016e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ec:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800186c <_ZN8MPU_60508selfTestEv+0x47c>
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  float accZRes = (StrAccelZ - factTrimAz)/factTrimAz * 100;
 80016f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016fc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001700:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001704:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800186c <_ZN8MPU_60508selfTestEv+0x47c>
 8001710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001714:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

  float gyroXRes = (StrGyroX - factTrimGx)/factTrimGx * 100;
 8001718:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800171c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001720:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001724:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800186c <_ZN8MPU_60508selfTestEv+0x47c>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  float gyroYRes = (StrGyroY - factTrimGy)/factTrimGy * 100;
 8001738:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800173c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001740:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001744:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800186c <_ZN8MPU_60508selfTestEv+0x47c>
 8001750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001754:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float gyroZRes = (StrGyroZ - factTrimGz)/factTrimGz * 100;
 8001758:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800175c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001760:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001764:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800186c <_ZN8MPU_60508selfTestEv+0x47c>
 8001770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001774:	edc7 7a08 	vstr	s15, [r7, #32]

  bool passAccX = abs(accXRes) < 14;
 8001778:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800177c:	f7ff fb96 	bl	8000eac <_ZSt3absf>
 8001780:	eef0 7a40 	vmov.f32	s15, s0
 8001784:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	bf4c      	ite	mi
 8001792:	2301      	movmi	r3, #1
 8001794:	2300      	movpl	r3, #0
 8001796:	77fb      	strb	r3, [r7, #31]
  bool passAccY = abs(accYRes) < 14;
 8001798:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800179c:	f7ff fb86 	bl	8000eac <_ZSt3absf>
 80017a0:	eef0 7a40 	vmov.f32	s15, s0
 80017a4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80017a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	bf4c      	ite	mi
 80017b2:	2301      	movmi	r3, #1
 80017b4:	2300      	movpl	r3, #0
 80017b6:	77bb      	strb	r3, [r7, #30]
  bool passAccZ = abs(accZRes) < 14;
 80017b8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80017bc:	f7ff fb76 	bl	8000eac <_ZSt3absf>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	bf4c      	ite	mi
 80017d2:	2301      	movmi	r3, #1
 80017d4:	2300      	movpl	r3, #0
 80017d6:	777b      	strb	r3, [r7, #29]

  bool passGyroX = abs(gyroXRes) < 14;
 80017d8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80017dc:	f7ff fb66 	bl	8000eac <_ZSt3absf>
 80017e0:	eef0 7a40 	vmov.f32	s15, s0
 80017e4:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	bf4c      	ite	mi
 80017f2:	2301      	movmi	r3, #1
 80017f4:	2300      	movpl	r3, #0
 80017f6:	773b      	strb	r3, [r7, #28]
  bool passGyroY = abs(gyroYRes) < 14;
 80017f8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80017fc:	f7ff fb56 	bl	8000eac <_ZSt3absf>
 8001800:	eef0 7a40 	vmov.f32	s15, s0
 8001804:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	bf4c      	ite	mi
 8001812:	2301      	movmi	r3, #1
 8001814:	2300      	movpl	r3, #0
 8001816:	76fb      	strb	r3, [r7, #27]
  bool passGyroZ = abs(gyroZRes) < 14;
 8001818:	ed97 0a08 	vldr	s0, [r7, #32]
 800181c:	f7ff fb46 	bl	8000eac <_ZSt3absf>
 8001820:	eef0 7a40 	vmov.f32	s15, s0
 8001824:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	bf4c      	ite	mi
 8001832:	2301      	movmi	r3, #1
 8001834:	2300      	movpl	r3, #0
 8001836:	76bb      	strb	r3, [r7, #26]

  return passAccX && passAccY && passAccZ && passGyroX
    && passGyroY && passGyroZ;
 8001838:	7ffb      	ldrb	r3, [r7, #31]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d010      	beq.n	8001860 <_ZN8MPU_60508selfTestEv+0x470>
  return passAccX && passAccY && passAccZ && passGyroX
 800183e:	7fbb      	ldrb	r3, [r7, #30]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <_ZN8MPU_60508selfTestEv+0x470>
 8001844:	7f7b      	ldrb	r3, [r7, #29]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00a      	beq.n	8001860 <_ZN8MPU_60508selfTestEv+0x470>
 800184a:	7f3b      	ldrb	r3, [r7, #28]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <_ZN8MPU_60508selfTestEv+0x470>
    && passGyroY && passGyroZ;
 8001850:	7efb      	ldrb	r3, [r7, #27]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <_ZN8MPU_60508selfTestEv+0x470>
 8001856:	7ebb      	ldrb	r3, [r7, #26]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <_ZN8MPU_60508selfTestEv+0x470>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <_ZN8MPU_60508selfTestEv+0x472>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3788      	adds	r7, #136	; 0x88
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	42c80000 	.word	0x42c80000

08001870 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale>:
  HAL_I2C_Mem_Write(hi2c, (address<<1), SMPLRT_DIV, 1,
    rate_divider, 1, HAL_MAX_DELAY);
}

void MPU_6050::setFullScaleGyro(Gyro_FullScale gyro_fs_setting)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af04      	add	r7, sp, #16
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
  uint8_t config[1] = {(uint8_t)(gyro_fs_setting << 3)};
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), GYRO_CONFIG, 1,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	b299      	uxth	r1, r3
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	2301      	movs	r3, #1
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2301      	movs	r3, #1
 80018a2:	221b      	movs	r2, #27
 80018a4:	f002 f904 	bl	8003ab0 <HAL_I2C_Mem_Write>
    config, 1, HAL_MAX_DELAY);

  switch(gyro_fs_setting)
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d81a      	bhi.n	80018e4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x44>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018cd 	.word	0x080018cd
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	080018dd 	.word	0x080018dd
  {
    case 0x00: // 250
      LSB_deg_s = GYRO_FS_250_RANGE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x7c>)
 80018c8:	61da      	str	r2, [r3, #28]
      break; 
 80018ca:	e00b      	b.n	80018e4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x01: //500
      LSB_deg_s = GYRO_FS_500_RANGE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x80>)
 80018d0:	61da      	str	r2, [r3, #28]
      break;
 80018d2:	e007      	b.n	80018e4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x02: // 1000
      LSB_deg_s = GYRO_FS_1000_RANGE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x84>)
 80018d8:	61da      	str	r2, [r3, #28]
      break;
 80018da:	e003      	b.n	80018e4 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x74>
    case 0x03: // 2000
      LSB_deg_s = GYRO_FS_2000_RANGE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <_ZN8MPU_605016setFullScaleGyroE14Gyro_FullScale+0x88>)
 80018e0:	61da      	str	r2, [r3, #28]
      break;
 80018e2:	bf00      	nop
  }
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	43030000 	.word	0x43030000
 80018f0:	42830000 	.word	0x42830000
 80018f4:	42033333 	.word	0x42033333
 80018f8:	41833333 	.word	0x41833333

080018fc <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale>:

void MPU_6050::setFullScaleAccel(Accel_FullScale accel_fs_setting)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af04      	add	r7, sp, #16
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	70fb      	strb	r3, [r7, #3]
  uint8_t config[1] = {(uint8_t)(accel_fs_setting << 3)};
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), ACCEL_CONFIG, 1,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	b299      	uxth	r1, r3
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2301      	movs	r3, #1
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	221c      	movs	r2, #28
 8001930:	f002 f8be 	bl	8003ab0 <HAL_I2C_Mem_Write>
    config, 1, HAL_MAX_DELAY);

  switch(accel_fs_setting)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d81e      	bhi.n	8001978 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x44>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001951 	.word	0x08001951
 8001944:	0800195b 	.word	0x0800195b
 8001948:	08001965 	.word	0x08001965
 800194c:	0800196f 	.word	0x0800196f
  {
    case 0x00: // 2
      LSB_g = ACCEL_FS_2_RANGE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001956:	619a      	str	r2, [r3, #24]
      break; 
 8001958:	e00e      	b.n	8001978 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x01: // 4
      LSB_g = ACCEL_FS_4_RANGE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001960:	619a      	str	r2, [r3, #24]
      break;
 8001962:	e009      	b.n	8001978 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x02: // 8
      LSB_g = ACCEL_FS_8_RANGE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800196a:	619a      	str	r2, [r3, #24]
      break;
 800196c:	e004      	b.n	8001978 <_ZN8MPU_605017setFullScaleAccelE15Accel_FullScale+0x7c>
    case 0x03: // 16
      LSB_g = ACCEL_FS_16_RANGE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001974:	619a      	str	r2, [r3, #24]
      break;
 8001976:	bf00      	nop
  }
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <_ZN8MPU_605018readAccelRegistersEv>:


void MPU_6050::readAccelRegisters(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af04      	add	r7, sp, #16
 8001986:	6078      	str	r0, [r7, #4]
  int16_t accelX, accelY, accelZ;
  uint8_t accelRec[6];

  HAL_I2C_Mem_Read(hi2c,(address<<1) | 0x01, ACCEL_XOUT_H, 1,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	b21b      	sxth	r3, r3
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	b21b      	sxth	r3, r3
 800199a:	b299      	uxth	r1, r3
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2306      	movs	r3, #6
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2301      	movs	r3, #1
 80019ae:	223b      	movs	r2, #59	; 0x3b
 80019b0:	f002 f978 	bl	8003ca4 <HAL_I2C_Mem_Read>
    accelRec, 6, HAL_MAX_DELAY);
  
  accelX = (int16_t)(accelRec[0] << 8 | accelRec[1]);
 80019b4:	7b3b      	ldrb	r3, [r7, #12]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	7b7b      	ldrb	r3, [r7, #13]
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4313      	orrs	r3, r2
 80019c0:	82fb      	strh	r3, [r7, #22]
  accelY = (int16_t)(accelRec[2] << 8 | accelRec[3]);
 80019c2:	7bbb      	ldrb	r3, [r7, #14]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	b21b      	sxth	r3, r3
 80019cc:	4313      	orrs	r3, r2
 80019ce:	82bb      	strh	r3, [r7, #20]
  accelZ = (int16_t)(accelRec[4] << 8 | accelRec[5]);
 80019d0:	7c3b      	ldrb	r3, [r7, #16]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21a      	sxth	r2, r3
 80019d6:	7c7b      	ldrb	r3, [r7, #17]
 80019d8:	b21b      	sxth	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	827b      	strh	r3, [r7, #18]

  imuData->accX = accelX;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019e6:	ee07 2a90 	vmov	s15, r2
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	edc3 7a00 	vstr	s15, [r3]
  imuData->accY = accelY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019fa:	ee07 2a90 	vmov	s15, r2
 80019fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a02:	edc3 7a01 	vstr	s15, [r3, #4]
  imuData->accZ = accelZ;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a0e:	ee07 2a90 	vmov	s15, r2
 8001a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a16:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZN8MPU_605017readGyroRegistersEv>:

void MPU_6050::readGyroRegisters(void)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b08a      	sub	sp, #40	; 0x28
 8001a26:	af04      	add	r7, sp, #16
 8001a28:	6078      	str	r0, [r7, #4]
  int16_t gyroX, gyroY, gyroZ;
  uint8_t gyroRec[6];

  HAL_I2C_Mem_Read(hi2c,(address<<1) | 0x01,GYRO_XOUT_H, 1,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2306      	movs	r3, #6
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	2243      	movs	r2, #67	; 0x43
 8001a52:	f002 f927 	bl	8003ca4 <HAL_I2C_Mem_Read>
    gyroRec, 6, HAL_MAX_DELAY);
  
  gyroX = (int16_t)(gyroRec[0] << 8 | gyroRec[1]);
 8001a56:	7b3b      	ldrb	r3, [r7, #12]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	7b7b      	ldrb	r3, [r7, #13]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	82fb      	strh	r3, [r7, #22]
  gyroY = (int16_t)(gyroRec[2] << 8 | gyroRec[3]);
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	82bb      	strh	r3, [r7, #20]
  gyroZ = (int16_t)(gyroRec[4] << 8 | gyroRec[5]);
 8001a72:	7c3b      	ldrb	r3, [r7, #16]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	7c7b      	ldrb	r3, [r7, #17]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	827b      	strh	r3, [r7, #18]

  imuData->gyroX = gyroX;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a88:	ee07 2a90 	vmov	s15, r2
 8001a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a90:	edc3 7a03 	vstr	s15, [r3, #12]
  imuData->gyroY = gyroY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a9c:	ee07 2a90 	vmov	s15, r2
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	edc3 7a04 	vstr	s15, [r3, #16]
  imuData->gyroZ = gyroZ;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ab0:	ee07 2a90 	vmov	s15, r2
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8001abc:	bf00      	nop
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	0000      	movs	r0, r0
	...

08001ac8 <_ZN8MPU_605017readTempRegistersEv>:

void MPU_6050::readTempRegisters(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	6078      	str	r0, [r7, #4]
  int16_t temp;
  uint8_t tempRecv[2];

  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, TEMP_OUT_H, 1,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae8:	9302      	str	r3, [sp, #8]
 8001aea:	2302      	movs	r3, #2
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	2241      	movs	r2, #65	; 0x41
 8001af8:	f002 f8d4 	bl	8003ca4 <HAL_I2C_Mem_Read>
    tempRecv, 2, HAL_MAX_DELAY);

  temp = (int16_t)(tempRecv[0] << 8 | tempRecv[1]);
 8001afc:	7b3b      	ldrb	r3, [r7, #12]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	7b7b      	ldrb	r3, [r7, #13]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	81fb      	strh	r3, [r7, #14]
  temp = temp / 340 + 36.53;
 8001b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_ZN8MPU_605017readTempRegistersEv+0x98>)
 8001b10:	fb82 1203 	smull	r1, r2, r2, r3
 8001b14:	11d2      	asrs	r2, r2, #7
 8001b16:	17db      	asrs	r3, r3, #31
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fcb1 	bl	8000484 <__aeabi_i2d>
 8001b22:	a30d      	add	r3, pc, #52	; (adr r3, 8001b58 <_ZN8MPU_605017readTempRegistersEv+0x90>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fb60 	bl	80001ec <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe ffc0 	bl	8000ab8 <__aeabi_d2iz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	81fb      	strh	r3, [r7, #14]

  imuData->temp = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b44:	ee07 2a90 	vmov	s15, r2
 8001b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	0a3d70a4 	.word	0x0a3d70a4
 8001b5c:	404243d7 	.word	0x404243d7
 8001b60:	60606061 	.word	0x60606061

08001b64 <_ZN8MPU_605010updateDataEv>:

void MPU_6050::updateData(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  readTempRegisters();
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffab 	bl	8001ac8 <_ZN8MPU_605017readTempRegistersEv>
  readGyroRegisters();
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ff55 	bl	8001a22 <_ZN8MPU_605017readGyroRegistersEv>
  readAccelRegisters();
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff01 	bl	8001980 <_ZN8MPU_605018readAccelRegistersEv>
  correctData();
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fa9a 	bl	80010b8 <_ZN8MPU_605011correctDataEv>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZN8MPU_605014resetRegistersEv>:

void MPU_6050::resetRegisters(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af04      	add	r7, sp, #16
 8001b92:	6078      	str	r0, [r7, #4]
  uint8_t resetRegisters[1] = {0b00000111};
 8001b94:	2307      	movs	r3, #7
 8001b96:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Write(hi2c, (address<<1), SIGNAL_PATH_RESET, 1,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	b299      	uxth	r1, r3
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	2301      	movs	r3, #1
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	2268      	movs	r2, #104	; 0x68
 8001bb8:	f001 ff7a 	bl	8003ab0 <HAL_I2C_Mem_Write>
    resetRegisters, 1, HAL_MAX_DELAY);
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZN8MPU_60509sleepModeEb>:

void MPU_6050::sleepMode(bool sleep)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af04      	add	r7, sp, #16
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	b299      	uxth	r1, r3
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	226b      	movs	r2, #107	; 0x6b
 8001bfc:	f002 f852 	bl	8003ca4 <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0] & 0b10111111) | ((sleep?0x01:0x00) << 6);
 8001c00:	7b3b      	ldrb	r3, [r7, #12]
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	2a00      	cmp	r2, #0
 8001c0e:	d001      	beq.n	8001c14 <_ZN8MPU_60509sleepModeEb+0x50>
 8001c10:	2240      	movs	r2, #64	; 0x40
 8001c12:	e000      	b.n	8001c16 <_ZN8MPU_60509sleepModeEb+0x52>
 8001c14:	2200      	movs	r2, #0
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	2301      	movs	r3, #1
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	226b      	movs	r2, #107	; 0x6b
 8001c3e:	f001 ff37 	bl	8003ab0 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001c42:	bf00      	nop
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_ZN8MPU_605017selectClockSourceE12Clock_Select>:

void MPU_6050::selectClockSource(Clock_Select clock_sel)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b088      	sub	sp, #32
 8001c4e:	af04      	add	r7, sp, #16
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001c56:	2300      	movs	r3, #0
 8001c58:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	b299      	uxth	r1, r3
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2301      	movs	r3, #1
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	226b      	movs	r2, #107	; 0x6b
 8001c82:	f002 f80f 	bl	8003ca4 <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0]&0b11111000) | clock_sel;
 8001c86:	7b3b      	ldrb	r3, [r7, #12]
 8001c88:	f023 0307 	bic.w	r3, r3, #7
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	226b      	movs	r2, #107	; 0x6b
 8001cb6:	f001 fefb 	bl	8003ab0 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZN8MPU_605011disableTempEb>:

void MPU_6050::disableTemp(bool disable)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af04      	add	r7, sp, #16
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
  uint8_t pwr_mgmt[1] = {0x00};
 8001cce:	2300      	movs	r3, #0
 8001cd0:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(hi2c, (address<<1) | 0x01, PWR_MGMT_1, 1,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	b299      	uxth	r1, r3
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2301      	movs	r3, #1
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	226b      	movs	r2, #107	; 0x6b
 8001cfa:	f001 ffd3 	bl	8003ca4 <HAL_I2C_Mem_Read>
    pwr_mgmt, 1, HAL_MAX_DELAY);
  
  pwr_mgmt[0] = (pwr_mgmt[0] & 0b11110111) | (disable?0x01:0x00) << 3;
 8001cfe:	7b3b      	ldrb	r3, [r7, #12]
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	f023 0308 	bic.w	r3, r3, #8
 8001d06:	b25b      	sxtb	r3, r3
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d001      	beq.n	8001d12 <_ZN8MPU_605011disableTempEb+0x50>
 8001d0e:	2208      	movs	r2, #8
 8001d10:	e000      	b.n	8001d14 <_ZN8MPU_605011disableTempEb+0x52>
 8001d12:	2200      	movs	r2, #0
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	733b      	strb	r3, [r7, #12]

  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_1, 1,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	b299      	uxth	r1, r3
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	226b      	movs	r2, #107	; 0x6b
 8001d3c:	f001 feb8 	bl	8003ab0 <HAL_I2C_Mem_Write>
    pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001d40:	bf00      	nop
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_ZN8MPU_605017generateNewResultEv>:
  HAL_I2C_Mem_Write(hi2c, (address<<1), PWR_MGMT_2, 1,
    pwr_mgmt2, 1, HAL_MAX_DELAY);
}

IMU_Data* MPU_6050::generateNewResult(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  updateData();
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff ff07 	bl	8001b64 <_ZN8MPU_605010updateDataEv>
  return imuData;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d70:	eef0 7ae7 	vabs.f32	s15, s15
 8001d74:	eeb0 0a67 	vmov.f32	s0, s15
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>:
#include "MotorControl.hpp"
#include "math.h"
#include "main.h"

Motor::Motor(TIM_HandleTypeDef *timerF, TIM_HandleTypeDef *timerB,
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	603b      	str	r3, [r7, #0]
  unsigned int channelF, unsigned int channelB):
  timer_f(timerF), timer_b(timerB), channel_f(channelF), channel_b(channelB)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
{}
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <_ZN5Motor4initEv>:

void Motor::init(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
	 HAL_TIM_PWM_Start(timer_f, channel_f);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f003 fa6b 	bl	80052ac <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(timer_b, channel_b);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f003 fa63 	bl	80052ac <HAL_TIM_PWM_Start>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <_ZNK5Motor5driveEv>:

void Motor::drive(void) const
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  unsigned int currentChannel;

  TIM_HandleTypeDef *offTimer;
  unsigned int offChannel;

  if (speed > 0)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	dd0c      	ble.n	8001e22 <_ZNK5Motor5driveEv+0x32>
  {
	  offTimer = timer_b;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	617b      	str	r3, [r7, #20]
	  offChannel = channel_b;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	613b      	str	r3, [r7, #16]
	  currentTimer = timer_f;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61fb      	str	r3, [r7, #28]
	  currentChannel = channel_f;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	e013      	b.n	8001e4a <_ZNK5Motor5driveEv+0x5a>
  }
  else if (speed <= 0)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d80b      	bhi.n	8001e4a <_ZNK5Motor5driveEv+0x5a>
  {
    
    currentTimer = timer_b;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61fb      	str	r3, [r7, #28]
    currentChannel = channel_b;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	61bb      	str	r3, [r7, #24]
    offTimer = timer_f;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
    offChannel = channel_f;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	613b      	str	r3, [r7, #16]
  }

  unsigned int pwm_comp = fabs(speed * 100);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e50:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ee8 <_ZNK5Motor5driveEv+0xf8>
 8001e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e58:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5c:	f7ff ff81 	bl	8001d62 <_ZSt4fabsf>
 8001e60:	eef0 7a40 	vmov.f32	s15, s0
 8001e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e68:	ee17 3a90 	vmov	r3, s15
 8001e6c:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(currentTimer, currentChannel, pwm_comp);
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d104      	bne.n	8001e7e <_ZNK5Motor5driveEv+0x8e>
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7c:	e013      	b.n	8001ea6 <_ZNK5Motor5driveEv+0xb6>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d104      	bne.n	8001e8e <_ZNK5Motor5driveEv+0x9e>
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001e8c:	e00b      	b.n	8001ea6 <_ZNK5Motor5driveEv+0xb6>
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d104      	bne.n	8001e9e <_ZNK5Motor5driveEv+0xae>
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e9c:	e003      	b.n	8001ea6 <_ZNK5Motor5driveEv+0xb6>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <_ZNK5Motor5driveEv+0xc6>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

  return;
 8001eb4:	e014      	b.n	8001ee0 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d104      	bne.n	8001ec6 <_ZNK5Motor5driveEv+0xd6>
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
  return;
 8001ec4:	e00c      	b.n	8001ee0 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d104      	bne.n	8001ed6 <_ZNK5Motor5driveEv+0xe6>
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	63da      	str	r2, [r3, #60]	; 0x3c
  return;
 8001ed4:	e004      	b.n	8001ee0 <_ZNK5Motor5driveEv+0xf0>
  __HAL_TIM_SET_COMPARE(offTimer, offChannel, 0);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
  return;
 8001ede:	bf00      	nop
}
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	42c80000 	.word	0x42c80000

08001eec <_ZN5Motor6targetEf>:

void Motor::target(float speed_in)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	ed87 0a00 	vstr	s0, [r7]
  if (speed_in > 1)
 8001ef8:	edd7 7a00 	vldr	s15, [r7]
 8001efc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	dd04      	ble.n	8001f14 <_ZN5Motor6targetEf+0x28>
    speed = 1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f10:	611a      	str	r2, [r3, #16]
  else if (speed_in < -1)
    speed = -1;
  else
    speed = speed_in;

  return;
 8001f12:	e010      	b.n	8001f36 <_ZN5Motor6targetEf+0x4a>
  else if (speed_in < -1)
 8001f14:	edd7 7a00 	vldr	s15, [r7]
 8001f18:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f24:	d503      	bpl.n	8001f2e <_ZN5Motor6targetEf+0x42>
    speed = -1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_ZN5Motor6targetEf+0x54>)
 8001f2a:	611a      	str	r2, [r3, #16]
  return;
 8001f2c:	e003      	b.n	8001f36 <_ZN5Motor6targetEf+0x4a>
    speed = speed_in;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	611a      	str	r2, [r3, #16]
  return;
 8001f34:	bf00      	nop
}
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	bf800000 	.word	0xbf800000

08001f44 <_ZN6ChasisC1EdP5MotorS1_S1_S1_b>:

Chasis::Chasis(double botLen, Motor *r1, Motor *r2, Motor *l1, Motor *l2):
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), bot_length(botLen)
{}

Chasis::Chasis(double botLen, Motor *r1, Motor *r2, Motor *l1, Motor *l2, bool omni):
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6178      	str	r0, [r7, #20]
 8001f4c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f50:	6139      	str	r1, [r7, #16]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), bot_length(botLen),
  omniDrive(omni)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	6a3a      	ldr	r2, [r7, #32]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	6979      	ldr	r1, [r7, #20]
 8001f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f74:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f7e:	761a      	strb	r2, [r3, #24]
{}
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	4618      	mov	r0, r3
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_ZN6Chasis4initEv>:

void Chasis::init(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  right_1->init();
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff0f 	bl	8001dbe <_ZN5Motor4initEv>
  right_2->init();
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff0a 	bl	8001dbe <_ZN5Motor4initEv>

  left_1->init();
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff05 	bl	8001dbe <_ZN5Motor4initEv>
  left_2->init();
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff00 	bl	8001dbe <_ZN5Motor4initEv>
}
 8001fbe:	bf00      	nop
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_ZN6Chasis5steerEff>:

void Chasis::steer(float angular_rate, float speed)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b088      	sub	sp, #32
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fd2:	edc7 0a01 	vstr	s1, [r7, #4]
  // speed = (speed_w1 + speed_w2)/2
  // angular_rate = (speed_w1 - speed_w2)/(2*length_bot)
  speed *= 2;
 8001fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fde:	edc7 7a01 	vstr	s15, [r7, #4]

  float rotFactor = angular_rate * 2 * bot_length;
 8001fe2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fea:	ee17 0a90 	vmov	r0, s15
 8001fee:	f7fe fa5b 	bl	80004a8 <__aeabi_f2d>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ff8:	f7fe faae 	bl	8000558 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fd80 	bl	8000b08 <__aeabi_d2f>
 8002008:	4603      	mov	r3, r0
 800200a:	61fb      	str	r3, [r7, #28]

  float speed_left = (speed + rotFactor)/2;
 800200c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002010:	edd7 7a07 	vldr	s15, [r7, #28]
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800201c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002020:	edc7 7a06 	vstr	s15, [r7, #24]
  float speed_right = speed - speed_left;
 8002024:	ed97 7a01 	vldr	s14, [r7, #4]
 8002028:	edd7 7a06 	vldr	s15, [r7, #24]
 800202c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002030:	edc7 7a05 	vstr	s15, [r7, #20]

  left_1->target(speed_left);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	ed97 0a06 	vldr	s0, [r7, #24]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff55 	bl	8001eec <_ZN5Motor6targetEf>
  left_2->target(speed_left);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	ed97 0a06 	vldr	s0, [r7, #24]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff4e 	bl	8001eec <_ZN5Motor6targetEf>
  
  right_1->target(speed_right);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	ed97 0a05 	vldr	s0, [r7, #20]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff47 	bl	8001eec <_ZN5Motor6targetEf>
  right_2->target(speed_right);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	ed97 0a05 	vldr	s0, [r7, #20]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff40 	bl	8001eec <_ZN5Motor6targetEf>
}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN6Chasis5driveEv>:
  
  return true;
}

void Chasis::drive(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  right_1->drive();
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff feb5 	bl	8001df0 <_ZNK5Motor5driveEv>
  right_2->drive();
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff feb0 	bl	8001df0 <_ZNK5Motor5driveEv>

  left_1->drive();
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff feab 	bl	8001df0 <_ZNK5Motor5driveEv>
  left_2->drive();
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fea6 	bl	8001df0 <_ZNK5Motor5driveEv>

  return;
 80020a4:	bf00      	nop
}
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//  right_b.init();
//  right_f.init();
//  left_b.init();
//  left_f.init();
  car.init();
 80020b0:	481a      	ldr	r0, [pc, #104]	; (800211c <_Z16MX_FREERTOS_Initv+0x70>)
 80020b2:	f7ff ff6c 	bl	8001f8e <_ZN6Chasis4initEv>
  mpu1.startPins();
 80020b6:	481a      	ldr	r0, [pc, #104]	; (8002120 <_Z16MX_FREERTOS_Initv+0x74>)
 80020b8:	f7ff f8a6 	bl	8001208 <_ZN8MPU_60509startPinsEv>
  mpu2.startPins();
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <_Z16MX_FREERTOS_Initv+0x78>)
 80020be:	f7ff f8a3 	bl	8001208 <_ZN8MPU_60509startPinsEv>
  mpu1.initialize();
 80020c2:	4817      	ldr	r0, [pc, #92]	; (8002120 <_Z16MX_FREERTOS_Initv+0x74>)
 80020c4:	f7ff f8bd 	bl	8001242 <_ZN8MPU_605010initializeEv>
  mpu2.initialize();
 80020c8:	4816      	ldr	r0, [pc, #88]	; (8002124 <_Z16MX_FREERTOS_Initv+0x78>)
 80020ca:	f7ff f8ba 	bl	8001242 <_ZN8MPU_605010initializeEv>
  imuData1 = mpu1.generateNewResult();
 80020ce:	4814      	ldr	r0, [pc, #80]	; (8002120 <_Z16MX_FREERTOS_Initv+0x74>)
 80020d0:	f7ff fe3a 	bl	8001d48 <_ZN8MPU_605017generateNewResultEv>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a14      	ldr	r2, [pc, #80]	; (8002128 <_Z16MX_FREERTOS_Initv+0x7c>)
 80020d8:	6013      	str	r3, [r2, #0]
  imuData2 = mpu2.generateNewResult();
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <_Z16MX_FREERTOS_Initv+0x78>)
 80020dc:	f7ff fe34 	bl	8001d48 <_ZN8MPU_605017generateNewResultEv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a12      	ldr	r2, [pc, #72]	; (800212c <_Z16MX_FREERTOS_Initv+0x80>)
 80020e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <_Z16MX_FREERTOS_Initv+0x84>)
 80020e8:	2100      	movs	r1, #0
 80020ea:	4812      	ldr	r0, [pc, #72]	; (8002134 <_Z16MX_FREERTOS_Initv+0x88>)
 80020ec:	f004 fb70 	bl	80067d0 <osThreadNew>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a11      	ldr	r2, [pc, #68]	; (8002138 <_Z16MX_FREERTOS_Initv+0x8c>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* creation of controlSpeed */
  controlSpeedHandle = osThreadNew(StartTask02, NULL, &controlSpeed_attributes);
 80020f6:	4a11      	ldr	r2, [pc, #68]	; (800213c <_Z16MX_FREERTOS_Initv+0x90>)
 80020f8:	2100      	movs	r1, #0
 80020fa:	4811      	ldr	r0, [pc, #68]	; (8002140 <_Z16MX_FREERTOS_Initv+0x94>)
 80020fc:	f004 fb68 	bl	80067d0 <osThreadNew>
 8002100:	4603      	mov	r3, r0
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <_Z16MX_FREERTOS_Initv+0x98>)
 8002104:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  microROSHandle = osThreadNew(startMicroROS, NULL, &microROS_attributes);
 8002106:	4a10      	ldr	r2, [pc, #64]	; (8002148 <_Z16MX_FREERTOS_Initv+0x9c>)
 8002108:	2100      	movs	r1, #0
 800210a:	4810      	ldr	r0, [pc, #64]	; (800214c <_Z16MX_FREERTOS_Initv+0xa0>)
 800210c:	f004 fb60 	bl	80067d0 <osThreadNew>
 8002110:	4603      	mov	r3, r0
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <_Z16MX_FREERTOS_Initv+0xa4>)
 8002114:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000178 	.word	0x20000178
 8002120:	200000dc 	.word	0x200000dc
 8002124:	20000124 	.word	0x20000124
 8002128:	2000016c 	.word	0x2000016c
 800212c:	20000170 	.word	0x20000170
 8002130:	0800a3d8 	.word	0x0800a3d8
 8002134:	08002155 	.word	0x08002155
 8002138:	20000198 	.word	0x20000198
 800213c:	0800a3fc 	.word	0x0800a3fc
 8002140:	08002171 	.word	0x08002171
 8002144:	2000019c 	.word	0x2000019c
 8002148:	0800a420 	.word	0x0800a420
 800214c:	080021ad 	.word	0x080021ad
 8002150:	200001a0 	.word	0x200001a0

08002154 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    car.drive();
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <_Z16StartDefaultTaskPv+0x18>)
 800215e:	f7ff ff89 	bl	8002074 <_ZN6Chasis5driveEv>
	osDelay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f004 fbc6 	bl	80068f4 <osDelay>
    car.drive();
 8002168:	e7f8      	b.n	800215c <_Z16StartDefaultTaskPv+0x8>
 800216a:	bf00      	nop
 800216c:	20000178 	.word	0x20000178

08002170 <_Z11StartTask02Pv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  car.steer(-0.3,1);
 8002178:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800217c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800219c <_Z11StartTask02Pv+0x2c>
 8002180:	4807      	ldr	r0, [pc, #28]	; (80021a0 <_Z11StartTask02Pv+0x30>)
 8002182:	f7ff ff20 	bl	8001fc6 <_ZN6Chasis5steerEff>
  for(;;)
  {
	mpu1.updateData();
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <_Z11StartTask02Pv+0x34>)
 8002188:	f7ff fcec 	bl	8001b64 <_ZN8MPU_605010updateDataEv>
  mpu2.updateData();
 800218c:	4806      	ldr	r0, [pc, #24]	; (80021a8 <_Z11StartTask02Pv+0x38>)
 800218e:	f7ff fce9 	bl	8001b64 <_ZN8MPU_605010updateDataEv>
    osDelay(20);
 8002192:	2014      	movs	r0, #20
 8002194:	f004 fbae 	bl	80068f4 <osDelay>
	mpu1.updateData();
 8002198:	e7f5      	b.n	8002186 <_Z11StartTask02Pv+0x16>
 800219a:	bf00      	nop
 800219c:	be99999a 	.word	0xbe99999a
 80021a0:	20000178 	.word	0x20000178
 80021a4:	200000dc 	.word	0x200000dc
 80021a8:	20000124 	.word	0x20000124

080021ac <_Z13startMicroROSPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMicroROS */
void startMicroROS(void *argument)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMicroROS */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f004 fb9d 	bl	80068f4 <osDelay>
 80021ba:	e7fb      	b.n	80021b4 <_Z13startMicroROSPv+0x8>
 80021bc:	0000      	movs	r0, r0
	...

080021c0 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END startMicroROS */
}
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d141      	bne.n	8002254 <_Z41__static_initialization_and_destruction_0ii+0x94>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d13c      	bne.n	8002254 <_Z41__static_initialization_and_destruction_0ii+0x94>
Motor right_b(&htim1, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_4);
 80021da:	230c      	movs	r3, #12
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2300      	movs	r3, #0
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80021e2:	4928      	ldr	r1, [pc, #160]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80021e4:	4828      	ldr	r0, [pc, #160]	; (8002288 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80021e6:	f7ff fdcc 	bl	8001d82 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor right_f(&htim1, &htim1, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80021ea:	230c      	movs	r3, #12
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2308      	movs	r3, #8
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80021f2:	4924      	ldr	r1, [pc, #144]	; (8002284 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80021f4:	4825      	ldr	r0, [pc, #148]	; (800228c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80021f6:	f7ff fdc4 	bl	8001d82 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor left_f(&htim3, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80021fa:	2304      	movs	r3, #4
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8002202:	491f      	ldr	r1, [pc, #124]	; (8002280 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002204:	4823      	ldr	r0, [pc, #140]	; (8002294 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002206:	f7ff fdbc 	bl	8001d82 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
Motor left_b(&htim4, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_2);
 800220a:	2304      	movs	r3, #4
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2300      	movs	r3, #0
 8002210:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8002212:	4921      	ldr	r1, [pc, #132]	; (8002298 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002214:	4821      	ldr	r0, [pc, #132]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002216:	f7ff fdb4 	bl	8001d82 <_ZN5MotorC1EP17TIM_HandleTypeDefS1_jj>
MPU_6050 mpu1(true, &hi2c1, GPIOC, GPIO_PIN_15);
 800221a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002222:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002224:	2101      	movs	r1, #1
 8002226:	4820      	ldr	r0, [pc, #128]	; (80022a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002228:	f7fe fe50 	bl	8000ecc <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>
MPU_6050 mpu2(false, &hi2c1, GPIOB, GPIO_PIN_2);
 800222c:	2304      	movs	r3, #4
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8002234:	2100      	movs	r1, #0
 8002236:	481e      	ldr	r0, [pc, #120]	; (80022b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002238:	f7fe fe48 	bl	8000ecc <_ZN8MPU_6050C1EbP17I2C_HandleTypeDefP12GPIO_TypeDeft>
Chasis car(lenBot, &right_b, &right_f, &left_b, &left_f, false);
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002248:	490f      	ldr	r1, [pc, #60]	; (8002288 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800224a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002278 <_Z41__static_initialization_and_destruction_0ii+0xb8>
 800224e:	4819      	ldr	r0, [pc, #100]	; (80022b4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002250:	f7ff fe78 	bl	8001f44 <_ZN6ChasisC1EdP5MotorS1_S1_S1_b>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10a      	bne.n	8002270 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002260:	4293      	cmp	r3, r2
 8002262:	d105      	bne.n	8002270 <_Z41__static_initialization_and_destruction_0ii+0xb0>
MPU_6050 mpu2(false, &hi2c1, GPIOB, GPIO_PIN_2);
 8002264:	4812      	ldr	r0, [pc, #72]	; (80022b0 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8002266:	f7fe fe61 	bl	8000f2c <_ZN8MPU_6050D1Ev>
MPU_6050 mpu1(true, &hi2c1, GPIOC, GPIO_PIN_15);
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800226c:	f7fe fe5e 	bl	8000f2c <_ZN8MPU_6050D1Ev>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	0e560419 	.word	0x0e560419
 800227c:	3fd1b22d 	.word	0x3fd1b22d
 8002280:	200002d4 	.word	0x200002d4
 8002284:	20000244 	.word	0x20000244
 8002288:	2000008c 	.word	0x2000008c
 800228c:	200000a0 	.word	0x200000a0
 8002290:	2000028c 	.word	0x2000028c
 8002294:	200000b4 	.word	0x200000b4
 8002298:	2000031c 	.word	0x2000031c
 800229c:	200000c8 	.word	0x200000c8
 80022a0:	40020800 	.word	0x40020800
 80022a4:	200001a4 	.word	0x200001a4
 80022a8:	200000dc 	.word	0x200000dc
 80022ac:	40020400 	.word	0x40020400
 80022b0:	20000124 	.word	0x20000124
 80022b4:	20000178 	.word	0x20000178

080022b8 <_GLOBAL__sub_I_right_b>:
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022c0:	2001      	movs	r0, #1
 80022c2:	f7ff ff7d 	bl	80021c0 <_Z41__static_initialization_and_destruction_0ii>
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_GLOBAL__sub_D_right_b>:
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff ff75 	bl	80021c0 <_Z41__static_initialization_and_destruction_0ii>
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <MX_GPIO_Init+0x114>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a3d      	ldr	r2, [pc, #244]	; (80023ec <MX_GPIO_Init+0x114>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b3b      	ldr	r3, [pc, #236]	; (80023ec <MX_GPIO_Init+0x114>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b37      	ldr	r3, [pc, #220]	; (80023ec <MX_GPIO_Init+0x114>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a36      	ldr	r2, [pc, #216]	; (80023ec <MX_GPIO_Init+0x114>)
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <MX_GPIO_Init+0x114>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <MX_GPIO_Init+0x114>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <MX_GPIO_Init+0x114>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <MX_GPIO_Init+0x114>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <MX_GPIO_Init+0x114>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a28      	ldr	r2, [pc, #160]	; (80023ec <MX_GPIO_Init+0x114>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b26      	ldr	r3, [pc, #152]	; (80023ec <MX_GPIO_Init+0x114>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002364:	4822      	ldr	r0, [pc, #136]	; (80023f0 <MX_GPIO_Init+0x118>)
 8002366:	f001 fa45 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2104      	movs	r1, #4
 800236e:	4821      	ldr	r0, [pc, #132]	; (80023f4 <MX_GPIO_Init+0x11c>)
 8002370:	f001 fa40 	bl	80037f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002374:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4819      	ldr	r0, [pc, #100]	; (80023f0 <MX_GPIO_Init+0x118>)
 800238a:	f001 f8af 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800238e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4812      	ldr	r0, [pc, #72]	; (80023f0 <MX_GPIO_Init+0x118>)
 80023a8:	f001 f8a0 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ac:	2304      	movs	r3, #4
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MX_GPIO_Init+0x11c>)
 80023c4:	f001 f892 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 0314 	add.w	r3, r7, #20
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_GPIO_Init+0x11c>)
 80023de:	f001 f885 	bl	80034ec <HAL_GPIO_Init>

}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020400 	.word	0x40020400

080023f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_I2C1_Init+0x50>)
 80023fe:	4a13      	ldr	r2, [pc, #76]	; (800244c <MX_I2C1_Init+0x54>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_I2C1_Init+0x50>)
 8002404:	4a12      	ldr	r2, [pc, #72]	; (8002450 <MX_I2C1_Init+0x58>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_I2C1_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_I2C1_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_I2C1_Init+0x50>)
 8002416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800241a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <MX_I2C1_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_I2C1_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <MX_I2C1_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_I2C1_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002434:	4804      	ldr	r0, [pc, #16]	; (8002448 <MX_I2C1_Init+0x50>)
 8002436:	f001 f9f7 	bl	8003828 <HAL_I2C_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002440:	f000 f8d2 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200001a4 	.word	0x200001a4
 800244c:	40005400 	.word	0x40005400
 8002450:	000186a0 	.word	0x000186a0

08002454 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_I2C_MspInit+0x84>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d12c      	bne.n	80024d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_I2C_MspInit+0x88>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_I2C_MspInit+0x88>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_I2C_MspInit+0x88>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002498:	2312      	movs	r3, #18
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024a4:	2304      	movs	r3, #4
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <HAL_I2C_MspInit+0x8c>)
 80024b0:	f001 f81c 	bl	80034ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_I2C_MspInit+0x88>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_I2C_MspInit+0x88>)
 80024be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024c2:	6413      	str	r3, [r2, #64]	; 0x40
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_I2C_MspInit+0x88>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40005400 	.word	0x40005400
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020400 	.word	0x40020400

080024e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024e8:	f000 fcd4 	bl	8002e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ec:	f000 f814 	bl	8002518 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f0:	f7ff fef2 	bl	80022d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80024f4:	f000 f9d8 	bl	80028a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80024f8:	f000 fa64 	bl	80029c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024fc:	f000 faba 	bl	8002a74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002500:	f000 fb32 	bl	8002b68 <MX_TIM4_Init>
  MX_I2C1_Init();
 8002504:	f7ff ff78 	bl	80023f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002508:	f004 f918 	bl	800673c <osKernelInitialize>
  MX_FREERTOS_Init();
 800250c:	f7ff fdce 	bl	80020ac <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002510:	f004 f938 	bl	8006784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002514:	e7fe      	b.n	8002514 <main+0x30>
	...

08002518 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b094      	sub	sp, #80	; 0x50
 800251c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	2230      	movs	r2, #48	; 0x30
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f007 fde0 	bl	800a0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <_Z18SystemClock_Configv+0xc8>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <_Z18SystemClock_Configv+0xc8>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254a:	6413      	str	r3, [r2, #64]	; 0x40
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <_Z18SystemClock_Configv+0xc8>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002558:	2300      	movs	r3, #0
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <_Z18SystemClock_Configv+0xcc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a20      	ldr	r2, [pc, #128]	; (80025e4 <_Z18SystemClock_Configv+0xcc>)
 8002562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <_Z18SystemClock_Configv+0xcc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002578:	2301      	movs	r3, #1
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257c:	2310      	movs	r3, #16
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002580:	2300      	movs	r3, #0
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002584:	f107 0320 	add.w	r3, r7, #32
 8002588:	4618      	mov	r0, r3
 800258a:	f002 f90d 	bl	80047a8 <HAL_RCC_OscConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 800259e:	f000 f823 	bl	80025e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025a2:	230f      	movs	r3, #15
 80025a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025b6:	f107 030c 	add.w	r3, r7, #12
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 fb6b 	bl	8004c98 <HAL_RCC_ClockConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80025d2:	f000 f809 	bl	80025e8 <Error_Handler>
  }
}
 80025d6:	bf00      	nop
 80025d8:	3750      	adds	r7, #80	; 0x50
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40007000 	.word	0x40007000

080025e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025ec:	b672      	cpsid	i
}
 80025ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <Error_Handler+0x8>
	...

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_MspInit+0x54>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4a11      	ldr	r2, [pc, #68]	; (8002648 <HAL_MspInit+0x54>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002608:	6453      	str	r3, [r2, #68]	; 0x44
 800260a:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_MspInit+0x54>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <HAL_MspInit+0x54>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <HAL_MspInit+0x54>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_MspInit+0x54>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	f06f 0001 	mvn.w	r0, #1
 800263a:	f000 fd11 	bl	8003060 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_InitTick+0xe4>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	4a32      	ldr	r2, [pc, #200]	; (8002730 <HAL_InitTick+0xe4>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6413      	str	r3, [r2, #64]	; 0x40
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_InitTick+0xe4>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002678:	f107 0210 	add.w	r2, r7, #16
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fcd4 	bl	8005030 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800268c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002692:	f002 fcb9 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 8002696:	6378      	str	r0, [r7, #52]	; 0x34
 8002698:	e004      	b.n	80026a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800269a:	f002 fcb5 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 800269e:	4603      	mov	r3, r0
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_InitTick+0xe8>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	0c9b      	lsrs	r3, r3, #18
 80026ae:	3b01      	subs	r3, #1
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_InitTick+0xec>)
 80026b4:	4a21      	ldr	r2, [pc, #132]	; (800273c <HAL_InitTick+0xf0>)
 80026b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_InitTick+0xec>)
 80026ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026be:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_InitTick+0xec>)
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80026c6:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_InitTick+0xec>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_InitTick+0xec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_InitTick+0xec>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80026d8:	4817      	ldr	r0, [pc, #92]	; (8002738 <HAL_InitTick+0xec>)
 80026da:	f002 fcdb 	bl	8005094 <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80026e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d11b      	bne.n	8002724 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80026ec:	4812      	ldr	r0, [pc, #72]	; (8002738 <HAL_InitTick+0xec>)
 80026ee:	f002 fd2b 	bl	8005148 <HAL_TIM_Base_Start_IT>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d111      	bne.n	8002724 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002700:	2032      	movs	r0, #50	; 0x32
 8002702:	f000 fcc9 	bl	8003098 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d808      	bhi.n	800271e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800270c:	2200      	movs	r2, #0
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	2032      	movs	r0, #50	; 0x32
 8002712:	f000 fca5 	bl	8003060 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <HAL_InitTick+0xf4>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e002      	b.n	8002724 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002724:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002728:	4618      	mov	r0, r3
 800272a:	3738      	adds	r7, #56	; 0x38
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	431bde83 	.word	0x431bde83
 8002738:	200001f8 	.word	0x200001f8
 800273c:	40000c00 	.word	0x40000c00
 8002740:	20000004 	.word	0x20000004

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <NMI_Handler+0x4>

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002776:	f002 fe49 	bl	800540c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000244 	.word	0x20000244

08002784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <USART1_IRQHandler+0x10>)
 800278a:	f003 fb41 	bl	8005e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000364 	.word	0x20000364

08002798 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM5_IRQHandler+0x10>)
 800279e:	f002 fe35 	bl	800540c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200001f8 	.word	0x200001f8

080027ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA2_Stream2_IRQHandler+0x10>)
 80027b2:	f000 fd11 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200003a8 	.word	0x200003a8

080027c0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <DMA2_Stream7_IRQHandler+0x10>)
 80027c6:	f000 fd07 	bl	80031d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000408 	.word	0x20000408

080027d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
	return 1;
 80027d8:	2301      	movs	r3, #1
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_kill>:

int _kill(int pid, int sig)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027ee:	f007 fc35 	bl	800a05c <__errno>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2216      	movs	r2, #22
 80027f6:	601a      	str	r2, [r3, #0]
	return -1;
 80027f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_exit>:

void _exit (int status)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ffe7 	bl	80027e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002816:	e7fe      	b.n	8002816 <_exit+0x12>

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f007 fc08 	bl	800a05c <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20020000 	.word	0x20020000
 8002878:	00000400 	.word	0x00000400
 800287c:	20000240 	.word	0x20000240
 8002880:	20004dd0 	.word	0x20004dd0

08002884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <SystemInit+0x20>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <SystemInit+0x20>)
 8002890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b092      	sub	sp, #72	; 0x48
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
 80028c8:	615a      	str	r2, [r3, #20]
 80028ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2220      	movs	r2, #32
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f007 fc0a 	bl	800a0ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <MX_TIM1_Init+0x114>)
 80028da:	4a39      	ldr	r2, [pc, #228]	; (80029c0 <MX_TIM1_Init+0x118>)
 80028dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <MX_TIM1_Init+0x114>)
 80028e0:	229f      	movs	r2, #159	; 0x9f
 80028e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e4:	4b35      	ldr	r3, [pc, #212]	; (80029bc <MX_TIM1_Init+0x114>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <MX_TIM1_Init+0x114>)
 80028ec:	2263      	movs	r2, #99	; 0x63
 80028ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f0:	4b32      	ldr	r3, [pc, #200]	; (80029bc <MX_TIM1_Init+0x114>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <MX_TIM1_Init+0x114>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fc:	4b2f      	ldr	r3, [pc, #188]	; (80029bc <MX_TIM1_Init+0x114>)
 80028fe:	2200      	movs	r2, #0
 8002900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002902:	482e      	ldr	r0, [pc, #184]	; (80029bc <MX_TIM1_Init+0x114>)
 8002904:	f002 fc82 	bl	800520c <HAL_TIM_PWM_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800290e:	f7ff fe6b 	bl	80025e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800291a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800291e:	4619      	mov	r1, r3
 8002920:	4826      	ldr	r0, [pc, #152]	; (80029bc <MX_TIM1_Init+0x114>)
 8002922:	f003 f9a1 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800292c:	f7ff fe5c 	bl	80025e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002930:	2360      	movs	r3, #96	; 0x60
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800293c:	2300      	movs	r3, #0
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800294c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002950:	2200      	movs	r2, #0
 8002952:	4619      	mov	r1, r3
 8002954:	4819      	ldr	r0, [pc, #100]	; (80029bc <MX_TIM1_Init+0x114>)
 8002956:	f002 fe61 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002960:	f7ff fe42 	bl	80025e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002968:	220c      	movs	r2, #12
 800296a:	4619      	mov	r1, r3
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <MX_TIM1_Init+0x114>)
 800296e:	f002 fe55 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8002978:	f7ff fe36 	bl	80025e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800297c:	2300      	movs	r3, #0
 800297e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002994:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4807      	ldr	r0, [pc, #28]	; (80029bc <MX_TIM1_Init+0x114>)
 80029a0:	f003 f9d0 	bl	8005d44 <HAL_TIMEx_ConfigBreakDeadTime>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80029aa:	f7ff fe1d 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029ae:	4803      	ldr	r0, [pc, #12]	; (80029bc <MX_TIM1_Init+0x114>)
 80029b0:	f000 f99a 	bl	8002ce8 <HAL_TIM_MspPostInit>

}
 80029b4:	bf00      	nop
 80029b6:	3748      	adds	r7, #72	; 0x48
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000244 	.word	0x20000244
 80029c0:	40010000 	.word	0x40010000

080029c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ca:	f107 0320 	add.w	r3, r7, #32
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	611a      	str	r2, [r3, #16]
 80029e2:	615a      	str	r2, [r3, #20]
 80029e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <MX_TIM2_Init+0xac>)
 80029e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <MX_TIM2_Init+0xac>)
 80029f0:	220f      	movs	r2, #15
 80029f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MX_TIM2_Init+0xac>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <MX_TIM2_Init+0xac>)
 80029fc:	2263      	movs	r2, #99	; 0x63
 80029fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_TIM2_Init+0xac>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_TIM2_Init+0xac>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a0c:	4818      	ldr	r0, [pc, #96]	; (8002a70 <MX_TIM2_Init+0xac>)
 8002a0e:	f002 fbfd 	bl	800520c <HAL_TIM_PWM_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002a18:	f7ff fde6 	bl	80025e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a24:	f107 0320 	add.w	r3, r7, #32
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4811      	ldr	r0, [pc, #68]	; (8002a70 <MX_TIM2_Init+0xac>)
 8002a2c:	f003 f91c 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002a36:	f7ff fdd7 	bl	80025e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a3a:	2360      	movs	r3, #96	; 0x60
 8002a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4807      	ldr	r0, [pc, #28]	; (8002a70 <MX_TIM2_Init+0xac>)
 8002a52:	f002 fde3 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002a5c:	f7ff fdc4 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <MX_TIM2_Init+0xac>)
 8002a62:	f000 f941 	bl	8002ce8 <HAL_TIM_MspPostInit>

}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000028c 	.word	0x2000028c

08002a74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	; 0x28
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7a:	f107 0320 	add.w	r3, r7, #32
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]
 8002a92:	615a      	str	r2, [r3, #20]
 8002a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a96:	4b32      	ldr	r3, [pc, #200]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002a98:	4a32      	ldr	r2, [pc, #200]	; (8002b64 <MX_TIM3_Init+0xf0>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002aaa:	2263      	movs	r2, #99	; 0x63
 8002aac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002aba:	4829      	ldr	r0, [pc, #164]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002abc:	f002 fba6 	bl	800520c <HAL_TIM_PWM_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002ac6:	f7ff fd8f 	bl	80025e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ad2:	f107 0320 	add.w	r3, r7, #32
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002ada:	f003 f8c5 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002ae4:	f7ff fd80 	bl	80025e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ae8:	2360      	movs	r3, #96	; 0x60
 8002aea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2200      	movs	r2, #0
 8002afc:	4619      	mov	r1, r3
 8002afe:	4818      	ldr	r0, [pc, #96]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002b00:	f002 fd8c 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002b0a:	f7ff fd6d 	bl	80025e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2204      	movs	r2, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4812      	ldr	r0, [pc, #72]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002b16:	f002 fd81 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002b20:	f7ff fd62 	bl	80025e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2208      	movs	r2, #8
 8002b28:	4619      	mov	r1, r3
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002b2c:	f002 fd76 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002b36:	f7ff fd57 	bl	80025e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	220c      	movs	r2, #12
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002b42:	f002 fd6b 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8002b4c:	f7ff fd4c 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b50:	4803      	ldr	r0, [pc, #12]	; (8002b60 <MX_TIM3_Init+0xec>)
 8002b52:	f000 f8c9 	bl	8002ce8 <HAL_TIM_MspPostInit>

}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200002d4 	.word	0x200002d4
 8002b64:	40000400 	.word	0x40000400

08002b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	f107 0320 	add.w	r3, r7, #32
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002b8c:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <MX_TIM4_Init+0xac>)
 8002b8e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002b90:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002b92:	220f      	movs	r2, #15
 8002b94:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002b9e:	2263      	movs	r2, #99	; 0x63
 8002ba0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bae:	4818      	ldr	r0, [pc, #96]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002bb0:	f002 fb2c 	bl	800520c <HAL_TIM_PWM_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002bba:	f7ff fd15 	bl	80025e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bc6:	f107 0320 	add.w	r3, r7, #32
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002bce:	f003 f84b 	bl	8005c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002bd8:	f7ff fd06 	bl	80025e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bdc:	2360      	movs	r3, #96	; 0x60
 8002bde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4807      	ldr	r0, [pc, #28]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002bf4:	f002 fd12 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002bfe:	f7ff fcf3 	bl	80025e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <MX_TIM4_Init+0xa8>)
 8002c04:	f000 f870 	bl	8002ce8 <HAL_TIM_MspPostInit>

}
 8002c08:	bf00      	nop
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	2000031c 	.word	0x2000031c
 8002c14:	40000800 	.word	0x40000800

08002c18 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2c      	ldr	r2, [pc, #176]	; (8002cd8 <HAL_TIM_PWM_MspInit+0xc0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d116      	bne.n	8002c58 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2105      	movs	r1, #5
 8002c4a:	2018      	movs	r0, #24
 8002c4c:	f000 fa08 	bl	8003060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c50:	2018      	movs	r0, #24
 8002c52:	f000 fa21 	bl	8003098 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c56:	e03a      	b.n	8002cce <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
}
 8002c7e:	e026      	b.n	8002cce <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_TIM_PWM_MspInit+0xc8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_PWM_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c94:	f043 0302 	orr.w	r3, r3, #2
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	e012      	b.n	8002cce <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM4)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0d      	ldr	r2, [pc, #52]	; (8002ce4 <HAL_TIM_PWM_MspInit+0xcc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_TIM_PWM_MspInit+0xc4>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800

08002ce8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 031c 	add.w	r3, r7, #28
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a48      	ldr	r2, [pc, #288]	; (8002e28 <HAL_TIM_MspPostInit+0x140>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d11f      	bne.n	8002d4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a46      	ldr	r2, [pc, #280]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8002d26:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	483b      	ldr	r0, [pc, #236]	; (8002e30 <HAL_TIM_MspPostInit+0x148>)
 8002d44:	f000 fbd2 	bl	80034ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002d48:	e06a      	b.n	8002e20 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d52:	d11e      	bne.n	8002d92 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4a33      	ldr	r2, [pc, #204]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	6313      	str	r3, [r2, #48]	; 0x30
 8002d64:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d70:	2308      	movs	r3, #8
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	482a      	ldr	r0, [pc, #168]	; (8002e34 <HAL_TIM_MspPostInit+0x14c>)
 8002d8c:	f000 fbae 	bl	80034ec <HAL_GPIO_Init>
}
 8002d90:	e046      	b.n	8002e20 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a28      	ldr	r2, [pc, #160]	; (8002e38 <HAL_TIM_MspPostInit+0x150>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d11e      	bne.n	8002dda <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002db8:	2333      	movs	r3, #51	; 0x33
 8002dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4818      	ldr	r0, [pc, #96]	; (8002e34 <HAL_TIM_MspPostInit+0x14c>)
 8002dd4:	f000 fb8a 	bl	80034ec <HAL_GPIO_Init>
}
 8002dd8:	e022      	b.n	8002e20 <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM4)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_TIM_MspPostInit+0x154>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d11d      	bne.n	8002e20 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_TIM_MspPostInit+0x144>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e00:	2340      	movs	r3, #64	; 0x40
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e10:	2302      	movs	r3, #2
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4806      	ldr	r0, [pc, #24]	; (8002e34 <HAL_TIM_MspPostInit+0x14c>)
 8002e1c:	f000 fb66 	bl	80034ec <HAL_GPIO_Init>
}
 8002e20:	bf00      	nop
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40010000 	.word	0x40010000
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800

08002e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e46:	490e      	ldr	r1, [pc, #56]	; (8002e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e4c:	e002      	b.n	8002e54 <LoopCopyDataInit>

08002e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e52:	3304      	adds	r3, #4

08002e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e58:	d3f9      	bcc.n	8002e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e5c:	4c0b      	ldr	r4, [pc, #44]	; (8002e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e60:	e001      	b.n	8002e66 <LoopFillZerobss>

08002e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e64:	3204      	adds	r2, #4

08002e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e68:	d3fb      	bcc.n	8002e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e6a:	f7ff fd0b 	bl	8002884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e6e:	f007 f8fb 	bl	800a068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e72:	f7ff fb37 	bl	80024e4 <main>
  bx  lr    
 8002e76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e80:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e84:	0800a4a8 	.word	0x0800a4a8
  ldr r2, =_sbss
 8002e88:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e8c:	20004dd0 	.word	0x20004dd0

08002e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC_IRQHandler>
	...

08002e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <HAL_Init+0x40>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_Init+0x40>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <HAL_Init+0x40>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f000 f8c4 	bl	800304a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec2:	200f      	movs	r0, #15
 8002ec4:	f7ff fbc2 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec8:	f7ff fb94 	bl	80025f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_GetTick+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000468 	.word	0x20000468

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f22:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60d3      	str	r3, [r2, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4907      	ldr	r1, [pc, #28]	; (8002f8c <__NVIC_EnableIRQ+0x38>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ff4c 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003072:	f7ff ff61 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 8003076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	6978      	ldr	r0, [r7, #20]
 800307e:	f7ff ffb1 	bl	8002fe4 <NVIC_EncodePriority>
 8003082:	4602      	mov	r2, r0
 8003084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff80 	bl	8002f90 <__NVIC_SetPriority>
}
 8003090:	bf00      	nop
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff54 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030c2:	f7ff ff09 	bl	8002ed8 <HAL_GetTick>
 80030c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d008      	beq.n	80030e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e052      	b.n	800318c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0216 	bic.w	r2, r2, #22
 80030f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003104:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_DMA_Abort+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003136:	e013      	b.n	8003160 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003138:	f7ff fece 	bl	8002ed8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d90c      	bls.n	8003160 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e015      	b.n	800318c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1e4      	bne.n	8003138 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	223f      	movs	r2, #63	; 0x3f
 8003174:	409a      	lsls	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d004      	beq.n	80031b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2280      	movs	r2, #128	; 0x80
 80031ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00c      	b.n	80031cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2205      	movs	r2, #5
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031e4:	4b8e      	ldr	r3, [pc, #568]	; (8003420 <HAL_DMA_IRQHandler+0x248>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a8e      	ldr	r2, [pc, #568]	; (8003424 <HAL_DMA_IRQHandler+0x24c>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	2208      	movs	r2, #8
 8003204:	409a      	lsls	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01a      	beq.n	8003244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d013      	beq.n	8003244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	2208      	movs	r2, #8
 8003232:	409a      	lsls	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d012      	beq.n	800327a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2201      	movs	r2, #1
 8003268:	409a      	lsls	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327e:	2204      	movs	r2, #4
 8003280:	409a      	lsls	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4013      	ands	r3, r2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d012      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2204      	movs	r2, #4
 800329e:	409a      	lsls	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2210      	movs	r2, #16
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d043      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d03c      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	2210      	movs	r2, #16
 80032d4:	409a      	lsls	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d018      	beq.n	800331a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d024      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e01f      	b.n	8003348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330c:	2b00      	cmp	r3, #0
 800330e:	d01b      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
 8003318:	e016      	b.n	8003348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0208 	bic.w	r2, r2, #8
 8003336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	2220      	movs	r2, #32
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4013      	ands	r3, r2
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 808f 	beq.w	8003478 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8087 	beq.w	8003478 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2220      	movs	r2, #32
 8003370:	409a      	lsls	r2, r3
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b05      	cmp	r3, #5
 8003380:	d136      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0216 	bic.w	r2, r2, #22
 8003390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d103      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x1da>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0208 	bic.w	r2, r2, #8
 80033c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	223f      	movs	r2, #63	; 0x3f
 80033c8:	409a      	lsls	r2, r3
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d07e      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	4798      	blx	r3
        }
        return;
 80033ee:	e079      	b.n	80034e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01d      	beq.n	800343a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10d      	bne.n	8003428 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	2b00      	cmp	r3, #0
 8003412:	d031      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e02c      	b.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000
 8003424:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	4798      	blx	r3
 8003438:	e01e      	b.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10f      	bne.n	8003468 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0210 	bic.w	r2, r2, #16
 8003456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	d032      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d022      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2205      	movs	r2, #5
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d307      	bcc.n	80034c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f2      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x2cc>
 80034be:	e000      	b.n	80034c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
 80034e2:	e000      	b.n	80034e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034e4:	bf00      	nop
    }
  }
}
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	e159      	b.n	80037bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003508:	2201      	movs	r2, #1
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8148 	bne.w	80037b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b01      	cmp	r3, #1
 8003530:	d005      	beq.n	800353e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800353a:	2b02      	cmp	r3, #2
 800353c:	d130      	bne.n	80035a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003574:	2201      	movs	r2, #1
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 0201 	and.w	r2, r3, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d017      	beq.n	80035dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a2 	beq.w	80037b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_GPIO_Init+0x2e8>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4a56      	ldr	r2, [pc, #344]	; (80037d4 <HAL_GPIO_Init+0x2e8>)
 800367c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	4b54      	ldr	r3, [pc, #336]	; (80037d4 <HAL_GPIO_Init+0x2e8>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800368e:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_GPIO_Init+0x2ec>)
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	3302      	adds	r3, #2
 8003696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	220f      	movs	r2, #15
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a49      	ldr	r2, [pc, #292]	; (80037dc <HAL_GPIO_Init+0x2f0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d019      	beq.n	80036ee <HAL_GPIO_Init+0x202>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a48      	ldr	r2, [pc, #288]	; (80037e0 <HAL_GPIO_Init+0x2f4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_GPIO_Init+0x1fe>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a47      	ldr	r2, [pc, #284]	; (80037e4 <HAL_GPIO_Init+0x2f8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00d      	beq.n	80036e6 <HAL_GPIO_Init+0x1fa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a46      	ldr	r2, [pc, #280]	; (80037e8 <HAL_GPIO_Init+0x2fc>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x1f6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a45      	ldr	r2, [pc, #276]	; (80037ec <HAL_GPIO_Init+0x300>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_GPIO_Init+0x1f2>
 80036da:	2304      	movs	r3, #4
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x204>
 80036de:	2307      	movs	r3, #7
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x204>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x204>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x204>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x204>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x2ec>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_GPIO_Init+0x304>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003732:	4a2f      	ldr	r2, [pc, #188]	; (80037f0 <HAL_GPIO_Init+0x304>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <HAL_GPIO_Init+0x304>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800375c:	4a24      	ldr	r2, [pc, #144]	; (80037f0 <HAL_GPIO_Init+0x304>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_GPIO_Init+0x304>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003786:	4a1a      	ldr	r2, [pc, #104]	; (80037f0 <HAL_GPIO_Init+0x304>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800378c:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_GPIO_Init+0x304>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037b0:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <HAL_GPIO_Init+0x304>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f aea2 	bls.w	8003508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40013c00 	.word	0x40013c00

080037f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
 8003800:	4613      	mov	r3, r2
 8003802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003804:	787b      	ldrb	r3, [r7, #1]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800380a:	887a      	ldrh	r2, [r7, #2]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003810:	e003      	b.n	800381a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003812:	887b      	ldrh	r3, [r7, #2]
 8003814:	041a      	lsls	r2, r3, #16
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	619a      	str	r2, [r3, #24]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e12b      	b.n	8003a92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe fe00 	bl	8002454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800387a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800388a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800388c:	f001 fbbc 	bl	8005008 <HAL_RCC_GetPCLK1Freq>
 8003890:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a81      	ldr	r2, [pc, #516]	; (8003a9c <HAL_I2C_Init+0x274>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d807      	bhi.n	80038ac <HAL_I2C_Init+0x84>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a80      	ldr	r2, [pc, #512]	; (8003aa0 <HAL_I2C_Init+0x278>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bf94      	ite	ls
 80038a4:	2301      	movls	r3, #1
 80038a6:	2300      	movhi	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e006      	b.n	80038ba <HAL_I2C_Init+0x92>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a7d      	ldr	r2, [pc, #500]	; (8003aa4 <HAL_I2C_Init+0x27c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bf94      	ite	ls
 80038b4:	2301      	movls	r3, #1
 80038b6:	2300      	movhi	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0e7      	b.n	8003a92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a78      	ldr	r2, [pc, #480]	; (8003aa8 <HAL_I2C_Init+0x280>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	0c9b      	lsrs	r3, r3, #18
 80038cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4a6a      	ldr	r2, [pc, #424]	; (8003a9c <HAL_I2C_Init+0x274>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d802      	bhi.n	80038fc <HAL_I2C_Init+0xd4>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3301      	adds	r3, #1
 80038fa:	e009      	b.n	8003910 <HAL_I2C_Init+0xe8>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	4a69      	ldr	r2, [pc, #420]	; (8003aac <HAL_I2C_Init+0x284>)
 8003908:	fba2 2303 	umull	r2, r3, r2, r3
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	3301      	adds	r3, #1
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003922:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	495c      	ldr	r1, [pc, #368]	; (8003a9c <HAL_I2C_Init+0x274>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d819      	bhi.n	8003964 <HAL_I2C_Init+0x13c>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e59      	subs	r1, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	fbb1 f3f3 	udiv	r3, r1, r3
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003944:	400b      	ands	r3, r1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_I2C_Init+0x138>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1e59      	subs	r1, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	fbb1 f3f3 	udiv	r3, r1, r3
 8003958:	3301      	adds	r3, #1
 800395a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395e:	e051      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 8003960:	2304      	movs	r3, #4
 8003962:	e04f      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d111      	bne.n	8003990 <HAL_I2C_Init+0x168>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	440b      	add	r3, r1
 800397a:	fbb0 f3f3 	udiv	r3, r0, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e012      	b.n	80039b6 <HAL_I2C_Init+0x18e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	0099      	lsls	r1, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Init+0x196>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e022      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10e      	bne.n	80039e4 <HAL_I2C_Init+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1e58      	subs	r0, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	440b      	add	r3, r1
 80039d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d8:	3301      	adds	r3, #1
 80039da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e2:	e00f      	b.n	8003a04 <HAL_I2C_Init+0x1dc>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	1e58      	subs	r0, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	0099      	lsls	r1, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fa:	3301      	adds	r3, #1
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	6809      	ldr	r1, [r1, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6911      	ldr	r1, [r2, #16]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68d2      	ldr	r2, [r2, #12]
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	000186a0 	.word	0x000186a0
 8003aa0:	001e847f 	.word	0x001e847f
 8003aa4:	003d08ff 	.word	0x003d08ff
 8003aa8:	431bde83 	.word	0x431bde83
 8003aac:	10624dd3 	.word	0x10624dd3

08003ab0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aca:	f7ff fa05 	bl	8002ed8 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	f040 80d9 	bne.w	8003c90 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2319      	movs	r3, #25
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	496d      	ldr	r1, [pc, #436]	; (8003c9c <HAL_I2C_Mem_Write+0x1ec>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fc7f 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	e0cc      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Mem_Write+0x56>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0c5      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d007      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_I2C_Mem_Write+0x1f0>)
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b6e:	88f8      	ldrh	r0, [r7, #6]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fab6 	bl	80040f0 <I2C_RequestMemoryWrite>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d052      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e081      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 fd00 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d107      	bne.n	8003bb6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e06b      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d11b      	bne.n	8003c30 <HAL_I2C_Mem_Write+0x180>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d017      	beq.n	8003c30 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1aa      	bne.n	8003b8e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 fcec 	bl	800461a <I2C_WaitOnBTFFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00d      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d107      	bne.n	8003c60 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e016      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	00100002 	.word	0x00100002
 8003ca0:	ffff0000 	.word	0xffff0000

08003ca4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cbe:	f7ff f90b 	bl	8002ed8 <HAL_GetTick>
 8003cc2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	f040 8208 	bne.w	80040e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2319      	movs	r3, #25
 8003cd8:	2201      	movs	r2, #1
 8003cda:	497b      	ldr	r1, [pc, #492]	; (8003ec8 <HAL_I2C_Mem_Read+0x224>)
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fb85 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e1fb      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x56>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e1f4      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d007      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2222      	movs	r2, #34	; 0x22
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <HAL_I2C_Mem_Read+0x228>)
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d62:	88f8      	ldrh	r0, [r7, #6]
 8003d64:	893a      	ldrh	r2, [r7, #8]
 8003d66:	8979      	ldrh	r1, [r7, #10]
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	4603      	mov	r3, r0
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fa52 	bl	800421c <I2C_RequestMemoryRead>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1b0      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	623b      	str	r3, [r7, #32]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e184      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d11b      	bne.n	8003df2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e164      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d11b      	bne.n	8003e32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	e144      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e48:	e138      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	f200 80f1 	bhi.w	8004036 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d123      	bne.n	8003ea4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fc1b 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e139      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea2:	e10b      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d14e      	bne.n	8003f4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	4906      	ldr	r1, [pc, #24]	; (8003ed0 <HAL_I2C_Mem_Read+0x22c>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 fa98 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d008      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e10e      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
 8003ec6:	bf00      	nop
 8003ec8:	00100002 	.word	0x00100002
 8003ecc:	ffff0000 	.word	0xffff0000
 8003ed0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f48:	e0b8      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2200      	movs	r2, #0
 8003f52:	4966      	ldr	r1, [pc, #408]	; (80040ec <HAL_I2C_Mem_Read+0x448>)
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fa49 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0bf      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	2200      	movs	r2, #0
 8003fae:	494f      	ldr	r1, [pc, #316]	; (80040ec <HAL_I2C_Mem_Read+0x448>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 fa1b 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e091      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004034:	e042      	b.n	80040bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fb2e 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e04c      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d118      	bne.n	80040bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f aec2 	bne.w	8003e4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3728      	adds	r7, #40	; 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00010004 	.word	0x00010004

080040f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	460b      	mov	r3, r1
 8004104:	813b      	strh	r3, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2200      	movs	r2, #0
 8004122:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f960 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004140:	d103      	bne.n	800414a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e05f      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800415c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	492d      	ldr	r1, [pc, #180]	; (8004218 <I2C_RequestMemoryWrite+0x128>)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f998 	bl	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e04c      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	6a39      	ldr	r1, [r7, #32]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa02 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d107      	bne.n	80041b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e02b      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	e021      	b.n	800420c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	6a39      	ldr	r1, [r7, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f9dc 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d107      	bne.n	80041fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e005      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004202:	893b      	ldrh	r3, [r7, #8]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	00010002 	.word	0x00010002

0800421c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	460b      	mov	r3, r1
 8004230:	813b      	strh	r3, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2200      	movs	r2, #0
 800425e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f8c2 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427c:	d103      	bne.n	8004286 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0aa      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	4952      	ldr	r1, [pc, #328]	; (80043e8 <I2C_RequestMemoryRead+0x1cc>)
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f8fa 	bl	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e097      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f964 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d107      	bne.n	80042ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e076      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042f8:	893b      	ldrh	r3, [r7, #8]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	611a      	str	r2, [r3, #16]
 8004302:	e021      	b.n	8004348 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004304:	893b      	ldrh	r3, [r7, #8]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004314:	6a39      	ldr	r1, [r7, #32]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f93e 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b04      	cmp	r3, #4
 8004328:	d107      	bne.n	800433a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e050      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800433e:	893b      	ldrh	r3, [r7, #8]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434a:	6a39      	ldr	r1, [r7, #32]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f923 	bl	8004598 <I2C_WaitOnTXEFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b04      	cmp	r3, #4
 800435e:	d107      	bne.n	8004370 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e035      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004382:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2200      	movs	r2, #0
 800438c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f82b 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043aa:	d103      	bne.n	80043b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e013      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043b8:	897b      	ldrh	r3, [r7, #10]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	6a3a      	ldr	r2, [r7, #32]
 80043cc:	4906      	ldr	r1, [pc, #24]	; (80043e8 <I2C_RequestMemoryRead+0x1cc>)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f863 	bl	800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00010002 	.word	0x00010002

080043ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	e025      	b.n	800444a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d021      	beq.n	800444a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fd67 	bl	8002ed8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d116      	bne.n	800444a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e023      	b.n	8004492 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10d      	bne.n	8004470 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	43da      	mvns	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4013      	ands	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	e00c      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	43da      	mvns	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4013      	ands	r3, r2
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	429a      	cmp	r2, r3
 800448e:	d0b6      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a8:	e051      	b.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b8:	d123      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0204 	orr.w	r2, r3, #4
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e046      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d021      	beq.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fe fce5 	bl	8002ed8 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d116      	bne.n	800454e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	f043 0220 	orr.w	r2, r3, #32
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e020      	b.n	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d10c      	bne.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	43da      	mvns	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4013      	ands	r3, r2
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	bf14      	ite	ne
 800456a:	2301      	movne	r3, #1
 800456c:	2300      	moveq	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e00b      	b.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	43da      	mvns	r2, r3
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4013      	ands	r3, r2
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d18d      	bne.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045a4:	e02d      	b.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f8ce 	bl	8004748 <I2C_IsAcknowledgeFailed>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e02d      	b.n	8004612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d021      	beq.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fe fc8b 	bl	8002ed8 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	d1ca      	bne.n	80045a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004626:	e02d      	b.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f88d 	bl	8004748 <I2C_IsAcknowledgeFailed>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e02d      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d021      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004640:	f7fe fc4a 	bl	8002ed8 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d116      	bne.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e007      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d1ca      	bne.n	8004628 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a8:	e042      	b.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d119      	bne.n	80046ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0210 	mvn.w	r2, #16
 80046c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e029      	b.n	8004740 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ec:	f7fe fbf4 	bl	8002ed8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d302      	bcc.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d116      	bne.n	8004730 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e007      	b.n	8004740 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d1b5      	bne.n	80046aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475e:	d11b      	bne.n	8004798 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004768:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e267      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d075      	beq.n	80048b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	4b88      	ldr	r3, [pc, #544]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d00c      	beq.n	80047ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d112      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b82      	ldr	r3, [pc, #520]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ea:	d10b      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	4b7e      	ldr	r3, [pc, #504]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d05b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d157      	bne.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e242      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0x74>
 800480e:	4b76      	ldr	r3, [pc, #472]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a75      	ldr	r2, [pc, #468]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0x98>
 8004826:	4b70      	ldr	r3, [pc, #448]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6f      	ldr	r2, [pc, #444]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b6d      	ldr	r3, [pc, #436]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6c      	ldr	r2, [pc, #432]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 8004840:	4b69      	ldr	r3, [pc, #420]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fe fb3a 	bl	8002ed8 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7fe fb36 	bl	8002ed8 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	; 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e207      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b5b      	ldr	r3, [pc, #364]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xc0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fe fb26 	bl	8002ed8 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe fb22 	bl	8002ed8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1f3      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	4b51      	ldr	r3, [pc, #324]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d063      	beq.n	8004986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	4b4a      	ldr	r3, [pc, #296]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b47      	ldr	r3, [pc, #284]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d11c      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b44      	ldr	r3, [pc, #272]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e1c7      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fa:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4937      	ldr	r1, [pc, #220]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	e03a      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <HAL_RCC_OscConfig+0x244>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fe fadb 	bl	8002ed8 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004926:	f7fe fad7 	bl	8002ed8 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1a8      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4925      	ldr	r1, [pc, #148]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495a:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_RCC_OscConfig+0x244>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fe faba 	bl	8002ed8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004968:	f7fe fab6 	bl	8002ed8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e187      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d036      	beq.n	8004a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_RCC_OscConfig+0x248>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fe fa9a 	bl	8002ed8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fe fa96 	bl	8002ed8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e167      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x200>
 80049c6:	e01b      	b.n	8004a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <HAL_RCC_OscConfig+0x248>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ce:	f7fe fa83 	bl	8002ed8 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	e00e      	b.n	80049f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d6:	f7fe fa7f 	bl	8002ed8 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d907      	bls.n	80049f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e150      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 80049e8:	40023800 	.word	0x40023800
 80049ec:	42470000 	.word	0x42470000
 80049f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	4b88      	ldr	r3, [pc, #544]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ea      	bne.n	80049d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8097 	beq.w	8004b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	4b7d      	ldr	r3, [pc, #500]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a7c      	ldr	r2, [pc, #496]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b7a      	ldr	r3, [pc, #488]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3e:	4b77      	ldr	r3, [pc, #476]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d118      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a4a:	4b74      	ldr	r3, [pc, #464]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a73      	ldr	r2, [pc, #460]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a56:	f7fe fa3f 	bl	8002ed8 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fe fa3b 	bl	8002ed8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e10c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2ea>
 8004a84:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	4a63      	ldr	r2, [pc, #396]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a90:	e01c      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x30c>
 8004a9a:	4b5f      	ldr	r3, [pc, #380]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a5e      	ldr	r2, [pc, #376]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0304 	orr.w	r3, r3, #4
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a5b      	ldr	r2, [pc, #364]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004ab4:	4b58      	ldr	r3, [pc, #352]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab8:	4a57      	ldr	r2, [pc, #348]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	; 0x70
 8004ac0:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac4:	4a54      	ldr	r2, [pc, #336]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0304 	bic.w	r3, r3, #4
 8004aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fe fa00 	bl	8002ed8 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fe f9fc 	bl	8002ed8 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0cb      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af2:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ee      	beq.n	8004adc <HAL_RCC_OscConfig+0x334>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b00:	f7fe f9ea 	bl	8002ed8 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fe f9e6 	bl	8002ed8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0b5      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ee      	bne.n	8004b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	4a38      	ldr	r2, [pc, #224]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80a1 	beq.w	8004c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b46:	4b34      	ldr	r3, [pc, #208]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d05c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d141      	bne.n	8004bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b31      	ldr	r3, [pc, #196]	; (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fe f9ba 	bl	8002ed8 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fe f9b6 	bl	8002ed8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e087      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	4b27      	ldr	r3, [pc, #156]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fe f98f 	bl	8002ed8 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fe f98b 	bl	8002ed8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e05c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x416>
 8004bdc:	e054      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fe f978 	bl	8002ed8 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fe f974 	bl	8002ed8 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e045      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x444>
 8004c0a:	e03d      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e038      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c24:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_RCC_OscConfig+0x4ec>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d028      	beq.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d121      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0cc      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b68      	ldr	r3, [pc, #416]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90c      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b65      	ldr	r3, [pc, #404]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d044      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d119      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d66:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e067      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4934      	ldr	r1, [pc, #208]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d88:	f7fe f8a6 	bl	8002ed8 <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7fe f8a2 	bl	8002ed8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 020c 	and.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1eb      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d20c      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f821 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	; (8004e58 <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	; (8004e5c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fc04 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800a444 	.word	0x0800a444
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000004 	.word	0x20000004

08004e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b090      	sub	sp, #64	; 0x40
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e70:	2300      	movs	r3, #0
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e74:	2300      	movs	r3, #0
 8004e76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7c:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	f200 80a1 	bhi.w	8004fd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x34>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e96:	e09b      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b53      	ldr	r3, [pc, #332]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004e9c:	e09b      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e9e:	4b53      	ldr	r3, [pc, #332]	; (8004fec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ea2:	e098      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b4f      	ldr	r3, [pc, #316]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eae:	4b4d      	ldr	r3, [pc, #308]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d028      	beq.n	8004f0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b4a      	ldr	r3, [pc, #296]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4b47      	ldr	r3, [pc, #284]	; (8004fec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ed0:	fb03 f201 	mul.w	r2, r3, r1
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	fb00 f303 	mul.w	r3, r0, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	4a43      	ldr	r2, [pc, #268]	; (8004fec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ede:	fba0 1202 	umull	r1, r2, r0, r2
 8004ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee4:	460a      	mov	r2, r1
 8004ee6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eea:	4413      	add	r3, r2
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	61fa      	str	r2, [r7, #28]
 8004ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004efa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004efe:	f7fb fe53 	bl	8000ba8 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4613      	mov	r3, r2
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f0a:	e053      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f0c:	4b35      	ldr	r3, [pc, #212]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	099b      	lsrs	r3, r3, #6
 8004f12:	2200      	movs	r2, #0
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	617a      	str	r2, [r7, #20]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f1e:	f04f 0b00 	mov.w	fp, #0
 8004f22:	4652      	mov	r2, sl
 8004f24:	465b      	mov	r3, fp
 8004f26:	f04f 0000 	mov.w	r0, #0
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	0159      	lsls	r1, r3, #5
 8004f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f34:	0150      	lsls	r0, r2, #5
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	ebb2 080a 	subs.w	r8, r2, sl
 8004f3e:	eb63 090b 	sbc.w	r9, r3, fp
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f56:	ebb2 0408 	subs.w	r4, r2, r8
 8004f5a:	eb63 0509 	sbc.w	r5, r3, r9
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	00eb      	lsls	r3, r5, #3
 8004f68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6c:	00e2      	lsls	r2, r4, #3
 8004f6e:	4614      	mov	r4, r2
 8004f70:	461d      	mov	r5, r3
 8004f72:	eb14 030a 	adds.w	r3, r4, sl
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	eb45 030b 	adc.w	r3, r5, fp
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	028b      	lsls	r3, r1, #10
 8004f8e:	4621      	mov	r1, r4
 8004f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f94:	4621      	mov	r1, r4
 8004f96:	028a      	lsls	r2, r1, #10
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	60fa      	str	r2, [r7, #12]
 8004fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa8:	f7fb fdfe 	bl	8000ba8 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fb4:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	0c1b      	lsrs	r3, r3, #16
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fce:	e002      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd0:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3740      	adds	r7, #64	; 0x40
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	00f42400 	.word	0x00f42400
 8004fec:	017d7840 	.word	0x017d7840

08004ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000000 	.word	0x20000000

08005008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800500c:	f7ff fff0 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0a9b      	lsrs	r3, r3, #10
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4903      	ldr	r1, [pc, #12]	; (800502c <HAL_RCC_GetPCLK1Freq+0x24>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	0800a454 	.word	0x0800a454

08005030 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	220f      	movs	r2, #15
 800503e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005040:	4b12      	ldr	r3, [pc, #72]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0203 	and.w	r2, r3, #3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <HAL_RCC_GetClockConfig+0x5c>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	08db      	lsrs	r3, r3, #3
 800506a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCC_GetClockConfig+0x60>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0207 	and.w	r2, r3, #7
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	40023c00 	.word	0x40023c00

08005094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e041      	b.n	800512a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f839 	bl	8005132 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f000 fb96 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d001      	beq.n	8005160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e044      	b.n	80051ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d013      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x6c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a1a      	ldr	r2, [pc, #104]	; (80051fc <HAL_TIM_Base_Start_IT+0xb4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a19      	ldr	r2, [pc, #100]	; (8005200 <HAL_TIM_Base_Start_IT+0xb8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x6c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_TIM_Base_Start_IT+0xbc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0x6c>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a16      	ldr	r2, [pc, #88]	; (8005208 <HAL_TIM_Base_Start_IT+0xc0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d111      	bne.n	80051d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b06      	cmp	r3, #6
 80051c4:	d010      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	e007      	b.n	80051e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40014000 	.word	0x40014000

0800520c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e041      	b.n	80052a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fd fcf0 	bl	8002c18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 fada 	bl	8005804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <HAL_TIM_PWM_Start+0x24>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	bf14      	ite	ne
 80052c8:	2301      	movne	r3, #1
 80052ca:	2300      	moveq	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e022      	b.n	8005316 <HAL_TIM_PWM_Start+0x6a>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d109      	bne.n	80052ea <HAL_TIM_PWM_Start+0x3e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	bf14      	ite	ne
 80052e2:	2301      	movne	r3, #1
 80052e4:	2300      	moveq	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	e015      	b.n	8005316 <HAL_TIM_PWM_Start+0x6a>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d109      	bne.n	8005304 <HAL_TIM_PWM_Start+0x58>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e008      	b.n	8005316 <HAL_TIM_PWM_Start+0x6a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e068      	b.n	80053f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0x82>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800532c:	e013      	b.n	8005356 <HAL_TIM_PWM_Start+0xaa>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0x92>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800533c:	e00b      	b.n	8005356 <HAL_TIM_PWM_Start+0xaa>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800534c:	e003      	b.n	8005356 <HAL_TIM_PWM_Start+0xaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fc5c 	bl	8005c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a23      	ldr	r2, [pc, #140]	; (80053f8 <HAL_TIM_PWM_Start+0x14c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d107      	bne.n	800537e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <HAL_TIM_PWM_Start+0x14c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_TIM_PWM_Start+0x10e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d013      	beq.n	80053ba <HAL_TIM_PWM_Start+0x10e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a19      	ldr	r2, [pc, #100]	; (80053fc <HAL_TIM_PWM_Start+0x150>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_TIM_PWM_Start+0x10e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a17      	ldr	r2, [pc, #92]	; (8005400 <HAL_TIM_PWM_Start+0x154>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIM_PWM_Start+0x10e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a16      	ldr	r2, [pc, #88]	; (8005404 <HAL_TIM_PWM_Start+0x158>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_TIM_PWM_Start+0x10e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <HAL_TIM_PWM_Start+0x15c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d111      	bne.n	80053de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d010      	beq.n	80053ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	e007      	b.n	80053ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40014000 	.word	0x40014000

0800540c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d122      	bne.n	8005468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	d11b      	bne.n	8005468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0202 	mvn.w	r2, #2
 8005438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9ba 	bl	80057c8 <HAL_TIM_IC_CaptureCallback>
 8005454:	e005      	b.n	8005462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f9ac 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f9bd 	bl	80057dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b04      	cmp	r3, #4
 8005474:	d122      	bne.n	80054bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b04      	cmp	r3, #4
 8005482:	d11b      	bne.n	80054bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0204 	mvn.w	r2, #4
 800548c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2202      	movs	r2, #2
 8005492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f990 	bl	80057c8 <HAL_TIM_IC_CaptureCallback>
 80054a8:	e005      	b.n	80054b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f982 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f993 	bl	80057dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d122      	bne.n	8005510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d11b      	bne.n	8005510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0208 	mvn.w	r2, #8
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f966 	bl	80057c8 <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f958 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f969 	bl	80057dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b10      	cmp	r3, #16
 800551c:	d122      	bne.n	8005564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	d11b      	bne.n	8005564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0210 	mvn.w	r2, #16
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2208      	movs	r2, #8
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f93c 	bl	80057c8 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f92e 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f93f 	bl	80057dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d10e      	bne.n	8005590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b01      	cmp	r3, #1
 800557e:	d107      	bne.n	8005590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0201 	mvn.w	r2, #1
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f908 	bl	80057a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	2b80      	cmp	r3, #128	; 0x80
 800559c:	d10e      	bne.n	80055bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a8:	2b80      	cmp	r3, #128	; 0x80
 80055aa:	d107      	bne.n	80055bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc20 	bl	8005dfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c6:	2b40      	cmp	r3, #64	; 0x40
 80055c8:	d10e      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d107      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f904 	bl	80057f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d10e      	bne.n	8005614 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b20      	cmp	r3, #32
 8005602:	d107      	bne.n	8005614 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0220 	mvn.w	r2, #32
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fbea 	bl	8005de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005636:	2302      	movs	r3, #2
 8005638:	e0ae      	b.n	8005798 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b0c      	cmp	r3, #12
 8005646:	f200 809f 	bhi.w	8005788 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800564a:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005685 	.word	0x08005685
 8005654:	08005789 	.word	0x08005789
 8005658:	08005789 	.word	0x08005789
 800565c:	08005789 	.word	0x08005789
 8005660:	080056c5 	.word	0x080056c5
 8005664:	08005789 	.word	0x08005789
 8005668:	08005789 	.word	0x08005789
 800566c:	08005789 	.word	0x08005789
 8005670:	08005707 	.word	0x08005707
 8005674:	08005789 	.word	0x08005789
 8005678:	08005789 	.word	0x08005789
 800567c:	08005789 	.word	0x08005789
 8005680:	08005747 	.word	0x08005747
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f93a 	bl	8005904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0208 	orr.w	r2, r2, #8
 800569e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	619a      	str	r2, [r3, #24]
      break;
 80056c2:	e064      	b.n	800578e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f980 	bl	80059d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	619a      	str	r2, [r3, #24]
      break;
 8005704:	e043      	b.n	800578e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 f9cb 	bl	8005aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f042 0208 	orr.w	r2, r2, #8
 8005720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0204 	bic.w	r2, r2, #4
 8005730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	61da      	str	r2, [r3, #28]
      break;
 8005744:	e023      	b.n	800578e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fa15 	bl	8005b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	021a      	lsls	r2, r3, #8
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	61da      	str	r2, [r3, #28]
      break;
 8005786:	e002      	b.n	800578e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005796:	7dfb      	ldrb	r3, [r7, #23]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <TIM_Base_SetConfig+0xe4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005822:	d00b      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a31      	ldr	r2, [pc, #196]	; (80058ec <TIM_Base_SetConfig+0xe8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a30      	ldr	r2, [pc, #192]	; (80058f0 <TIM_Base_SetConfig+0xec>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_Base_SetConfig+0x38>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a2f      	ldr	r2, [pc, #188]	; (80058f4 <TIM_Base_SetConfig+0xf0>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a25      	ldr	r2, [pc, #148]	; (80058e8 <TIM_Base_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01b      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d017      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a22      	ldr	r2, [pc, #136]	; (80058ec <TIM_Base_SetConfig+0xe8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <TIM_Base_SetConfig+0xec>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00f      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <TIM_Base_SetConfig+0xf0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00b      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <TIM_Base_SetConfig+0xf4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d007      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1e      	ldr	r2, [pc, #120]	; (80058fc <TIM_Base_SetConfig+0xf8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d003      	beq.n	800588e <TIM_Base_SetConfig+0x8a>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1d      	ldr	r2, [pc, #116]	; (8005900 <TIM_Base_SetConfig+0xfc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d108      	bne.n	80058a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005894:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a08      	ldr	r2, [pc, #32]	; (80058e8 <TIM_Base_SetConfig+0xe4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d103      	bne.n	80058d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	615a      	str	r2, [r3, #20]
}
 80058da:	bf00      	nop
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40014400 	.word	0x40014400
 8005900:	40014800 	.word	0x40014800

08005904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0302 	bic.w	r3, r3, #2
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <TIM_OC1_SetConfig+0xc8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10c      	bne.n	800597a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f023 0308 	bic.w	r3, r3, #8
 8005966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f023 0304 	bic.w	r3, r3, #4
 8005978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a13      	ldr	r2, [pc, #76]	; (80059cc <TIM_OC1_SetConfig+0xc8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d111      	bne.n	80059a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40010000 	.word	0x40010000

080059d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0210 	bic.w	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0320 	bic.w	r3, r3, #32
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a1e      	ldr	r2, [pc, #120]	; (8005aa4 <TIM_OC2_SetConfig+0xd4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10d      	bne.n	8005a4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <TIM_OC2_SetConfig+0xd4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d113      	bne.n	8005a7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	621a      	str	r2, [r3, #32]
}
 8005a96:	bf00      	nop
 8005a98:	371c      	adds	r7, #28
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010000 	.word	0x40010000

08005aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a1d      	ldr	r2, [pc, #116]	; (8005b78 <TIM_OC3_SetConfig+0xd0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d10d      	bne.n	8005b22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC3_SetConfig+0xd0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d113      	bne.n	8005b52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	621a      	str	r2, [r3, #32]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40010000 	.word	0x40010000

08005b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	031b      	lsls	r3, r3, #12
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <TIM_OC4_SetConfig+0x9c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000

08005c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	2201      	movs	r2, #1
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1a      	ldr	r2, [r3, #32]
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	401a      	ands	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6a1a      	ldr	r2, [r3, #32]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	fa01 f303 	lsl.w	r3, r1, r3
 8005c54:	431a      	orrs	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	621a      	str	r2, [r3, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e050      	b.n	8005d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ccc:	d013      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a16      	ldr	r2, [pc, #88]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d10c      	bne.n	8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40014000 	.word	0x40014000

08005d44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e03d      	b.n	8005ddc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b0ba      	sub	sp, #232	; 0xe8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10f      	bne.n	8005e76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_UART_IRQHandler+0x66>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fb65 	bl	800653e <UART_Receive_IT>
      return;
 8005e74:	e256      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80de 	beq.w	800603c <HAL_UART_IRQHandler+0x22c>
 8005e80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80d1 	beq.w	800603c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <HAL_UART_IRQHandler+0xae>
 8005ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f043 0201 	orr.w	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00b      	beq.n	8005ee2 <HAL_UART_IRQHandler+0xd2>
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f043 0202 	orr.w	r2, r3, #2
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_UART_IRQHandler+0xf6>
 8005eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f043 0204 	orr.w	r2, r3, #4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d011      	beq.n	8005f36 <HAL_UART_IRQHandler+0x126>
 8005f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d105      	bne.n	8005f2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0208 	orr.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 81ed 	beq.w	800631a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_UART_IRQHandler+0x14e>
 8005f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f50:	f003 0320 	and.w	r3, r3, #32
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 faf0 	bl	800653e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f68:	2b40      	cmp	r3, #64	; 0x40
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <HAL_UART_IRQHandler+0x17a>
 8005f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d04f      	beq.n	800602a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9f8 	bl	8006380 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d141      	bne.n	8006022 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fac:	e853 3f00 	ldrex	r3, [r3]
 8005fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005fb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3314      	adds	r3, #20
 8005fc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005fd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1d9      	bne.n	8005f9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d013      	beq.n	800601a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	4a7d      	ldr	r2, [pc, #500]	; (80061ec <HAL_UART_IRQHandler+0x3dc>)
 8005ff8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fd f8c8 	bl	8003194 <HAL_DMA_Abort_IT>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d016      	beq.n	8006038 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006014:	4610      	mov	r0, r2
 8006016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006018:	e00e      	b.n	8006038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f99a 	bl	8006354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006020:	e00a      	b.n	8006038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f996 	bl	8006354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	e006      	b.n	8006038 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f992 	bl	8006354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006036:	e170      	b.n	800631a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	bf00      	nop
    return;
 800603a:	e16e      	b.n	800631a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006040:	2b01      	cmp	r3, #1
 8006042:	f040 814a 	bne.w	80062da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 8143 	beq.w	80062da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 813c 	beq.w	80062da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006062:	2300      	movs	r3, #0
 8006064:	60bb      	str	r3, [r7, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	f040 80b4 	bne.w	80061f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006094:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 8140 	beq.w	800631e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060a6:	429a      	cmp	r2, r3
 80060a8:	f080 8139 	bcs.w	800631e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060be:	f000 8088 	beq.w	80061d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	330c      	adds	r3, #12
 80060c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80060d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1d9      	bne.n	80060c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3314      	adds	r3, #20
 8006114:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800611e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006120:	f023 0301 	bic.w	r3, r3, #1
 8006124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3314      	adds	r3, #20
 800612e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006132:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006136:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800613a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e1      	bne.n	800610e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3314      	adds	r3, #20
 8006150:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800615a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800616e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006170:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006174:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800617c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e3      	bne.n	800614a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	330c      	adds	r3, #12
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619a:	e853 3f00 	ldrex	r3, [r3]
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a2:	f023 0310 	bic.w	r3, r3, #16
 80061a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80061b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80061b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80061ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e3      	bne.n	8006190 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fc ff71 	bl	80030b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	b29b      	uxth	r3, r3
 80061e0:	4619      	mov	r1, r3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8c0 	bl	8006368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e8:	e099      	b.n	800631e <HAL_UART_IRQHandler+0x50e>
 80061ea:	bf00      	nop
 80061ec:	08006447 	.word	0x08006447
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 808b 	beq.w	8006322 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800620c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8086 	beq.w	8006322 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800622c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800623a:	647a      	str	r2, [r7, #68]	; 0x44
 800623c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e3      	bne.n	8006216 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	623b      	str	r3, [r7, #32]
   return(result);
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006272:	633a      	str	r2, [r7, #48]	; 0x30
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e3      	bne.n	800624e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0310 	bic.w	r3, r3, #16
 80062aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80062b8:	61fa      	str	r2, [r7, #28]
 80062ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	617b      	str	r3, [r7, #20]
   return(result);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e3      	bne.n	8006294 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f848 	bl	8006368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062d8:	e023      	b.n	8006322 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_UART_IRQHandler+0x4ea>
 80062e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8bb 	bl	800646e <UART_Transmit_IT>
    return;
 80062f8:	e014      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00e      	beq.n	8006324 <HAL_UART_IRQHandler+0x514>
 8006306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f8fb 	bl	800650e <UART_EndTransmit_IT>
    return;
 8006318:	e004      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
    return;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
      return;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <HAL_UART_IRQHandler+0x514>
      return;
 8006322:	bf00      	nop
  }
}
 8006324:	37e8      	adds	r7, #232	; 0xe8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop

0800632c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006380:	b480      	push	{r7}
 8006382:	b095      	sub	sp, #84	; 0x54
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	330c      	adds	r3, #12
 80063a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063a8:	643a      	str	r2, [r7, #64]	; 0x40
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e5      	bne.n	8006388 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e5      	bne.n	80063bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d119      	bne.n	800642c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	330c      	adds	r3, #12
 80063fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	60bb      	str	r3, [r7, #8]
   return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f023 0310 	bic.w	r3, r3, #16
 800640e:	647b      	str	r3, [r7, #68]	; 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	330c      	adds	r3, #12
 8006416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006418:	61ba      	str	r2, [r7, #24]
 800641a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	6979      	ldr	r1, [r7, #20]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	613b      	str	r3, [r7, #16]
   return(result);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e5      	bne.n	80063f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
}
 800643a:	bf00      	nop
 800643c:	3754      	adds	r7, #84	; 0x54
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff ff77 	bl	8006354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006466:	bf00      	nop
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b21      	cmp	r3, #33	; 0x21
 8006480:	d13e      	bne.n	8006500 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648a:	d114      	bne.n	80064b6 <UART_Transmit_IT+0x48>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d110      	bne.n	80064b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	1c9a      	adds	r2, r3, #2
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	621a      	str	r2, [r3, #32]
 80064b4:	e008      	b.n	80064c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	1c59      	adds	r1, r3, #1
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6211      	str	r1, [r2, #32]
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4619      	mov	r1, r3
 80064d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10f      	bne.n	80064fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006524:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff fefc 	bl	800632c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b08c      	sub	sp, #48	; 0x30
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b22      	cmp	r3, #34	; 0x22
 8006550:	f040 80ab 	bne.w	80066aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800655c:	d117      	bne.n	800658e <UART_Receive_IT+0x50>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d113      	bne.n	800658e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006566:	2300      	movs	r3, #0
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657c:	b29a      	uxth	r2, r3
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	1c9a      	adds	r2, r3, #2
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28
 800658c:	e026      	b.n	80065dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a0:	d007      	beq.n	80065b2 <UART_Receive_IT+0x74>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10a      	bne.n	80065c0 <UART_Receive_IT+0x82>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e008      	b.n	80065d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	3b01      	subs	r3, #1
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4619      	mov	r1, r3
 80065ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d15a      	bne.n	80066a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68da      	ldr	r2, [r3, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0220 	bic.w	r2, r2, #32
 80065fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800660e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	2b01      	cmp	r3, #1
 800662e:	d135      	bne.n	800669c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	330c      	adds	r3, #12
 800663c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	613b      	str	r3, [r7, #16]
   return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f023 0310 	bic.w	r3, r3, #16
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	330c      	adds	r3, #12
 8006654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006656:	623a      	str	r2, [r7, #32]
 8006658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	69f9      	ldr	r1, [r7, #28]
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	61bb      	str	r3, [r7, #24]
   return(result);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b10      	cmp	r3, #16
 8006676:	d10a      	bne.n	800668e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7ff fe67 	bl	8006368 <HAL_UARTEx_RxEventCallback>
 800669a:	e002      	b.n	80066a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff fe4f 	bl	8006340 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e002      	b.n	80066ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80066aa:	2302      	movs	r3, #2
  }
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3730      	adds	r7, #48	; 0x30
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <__NVIC_SetPriority>:
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	db0a      	blt.n	80066de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	490c      	ldr	r1, [pc, #48]	; (8006700 <__NVIC_SetPriority+0x4c>)
 80066ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	440b      	add	r3, r1
 80066d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066dc:	e00a      	b.n	80066f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	4908      	ldr	r1, [pc, #32]	; (8006704 <__NVIC_SetPriority+0x50>)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	3b04      	subs	r3, #4
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	440b      	add	r3, r1
 80066f2:	761a      	strb	r2, [r3, #24]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	e000e100 	.word	0xe000e100
 8006704:	e000ed00 	.word	0xe000ed00

08006708 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <SysTick_Handler+0x1c>)
 800670e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006710:	f001 fcfe 	bl	8008110 <xTaskGetSchedulerState>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d001      	beq.n	800671e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800671a:	f002 fae5 	bl	8008ce8 <xPortSysTickHandler>
  }
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	e000e010 	.word	0xe000e010

08006728 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800672c:	2100      	movs	r1, #0
 800672e:	f06f 0004 	mvn.w	r0, #4
 8006732:	f7ff ffbf 	bl	80066b4 <__NVIC_SetPriority>
#endif
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006742:	f3ef 8305 	mrs	r3, IPSR
 8006746:	603b      	str	r3, [r7, #0]
  return(result);
 8006748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800674e:	f06f 0305 	mvn.w	r3, #5
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	e00c      	b.n	8006770 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <osKernelInitialize+0x44>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d105      	bne.n	800676a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <osKernelInitialize+0x44>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006764:	2300      	movs	r3, #0
 8006766:	607b      	str	r3, [r7, #4]
 8006768:	e002      	b.n	8006770 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800676a:	f04f 33ff 	mov.w	r3, #4294967295
 800676e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006770:	687b      	ldr	r3, [r7, #4]
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	2000046c 	.word	0x2000046c

08006784 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800678a:	f3ef 8305 	mrs	r3, IPSR
 800678e:	603b      	str	r3, [r7, #0]
  return(result);
 8006790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006796:	f06f 0305 	mvn.w	r3, #5
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	e010      	b.n	80067c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800679e:	4b0b      	ldr	r3, [pc, #44]	; (80067cc <osKernelStart+0x48>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d109      	bne.n	80067ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067a6:	f7ff ffbf 	bl	8006728 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067aa:	4b08      	ldr	r3, [pc, #32]	; (80067cc <osKernelStart+0x48>)
 80067ac:	2202      	movs	r2, #2
 80067ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067b0:	f001 f866 	bl	8007880 <vTaskStartScheduler>
      stat = osOK;
 80067b4:	2300      	movs	r3, #0
 80067b6:	607b      	str	r3, [r7, #4]
 80067b8:	e002      	b.n	80067c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067ba:	f04f 33ff 	mov.w	r3, #4294967295
 80067be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067c0:	687b      	ldr	r3, [r7, #4]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000046c 	.word	0x2000046c

080067d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af04      	add	r7, sp, #16
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e0:	f3ef 8305 	mrs	r3, IPSR
 80067e4:	617b      	str	r3, [r7, #20]
  return(result);
 80067e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d17e      	bne.n	80068ea <osThreadNew+0x11a>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d07b      	beq.n	80068ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067f2:	2380      	movs	r3, #128	; 0x80
 80067f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067f6:	2318      	movs	r3, #24
 80067f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067fa:	2300      	movs	r3, #0
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006802:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d045      	beq.n	8006896 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <osThreadNew+0x48>
        name = attr->name;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <osThreadNew+0x6e>
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	2b38      	cmp	r3, #56	; 0x38
 8006830:	d805      	bhi.n	800683e <osThreadNew+0x6e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <osThreadNew+0x72>
        return (NULL);
 800683e:	2300      	movs	r3, #0
 8006840:	e054      	b.n	80068ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	089b      	lsrs	r3, r3, #2
 8006850:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <osThreadNew+0xa8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	2b5b      	cmp	r3, #91	; 0x5b
 8006860:	d90a      	bls.n	8006878 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <osThreadNew+0xa8>
        mem = 1;
 8006872:	2301      	movs	r3, #1
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	e010      	b.n	800689a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10c      	bne.n	800689a <osThreadNew+0xca>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d108      	bne.n	800689a <osThreadNew+0xca>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <osThreadNew+0xca>
          mem = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	e001      	b.n	800689a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d110      	bne.n	80068c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068a8:	9202      	str	r2, [sp, #8]
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 fe0c 	bl	80074d4 <xTaskCreateStatic>
 80068bc:	4603      	mov	r3, r0
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	e013      	b.n	80068ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d110      	bne.n	80068ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f107 0310 	add.w	r3, r7, #16
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fe57 	bl	800758e <xTaskCreate>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d001      	beq.n	80068ea <osThreadNew+0x11a>
            hTask = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068ea:	693b      	ldr	r3, [r7, #16]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	; 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fc:	f3ef 8305 	mrs	r3, IPSR
 8006900:	60bb      	str	r3, [r7, #8]
  return(result);
 8006902:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <osDelay+0x1c>
    stat = osErrorISR;
 8006908:	f06f 0305 	mvn.w	r3, #5
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e007      	b.n	8006920 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <osDelay+0x2c>
      vTaskDelay(ticks);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 ff7c 	bl	8007818 <vTaskDelay>
    }
  }

  return (stat);
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4a07      	ldr	r2, [pc, #28]	; (8006958 <vApplicationGetIdleTaskMemory+0x2c>)
 800693c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	4a06      	ldr	r2, [pc, #24]	; (800695c <vApplicationGetIdleTaskMemory+0x30>)
 8006942:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	601a      	str	r2, [r3, #0]
}
 800694a:	bf00      	nop
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000470 	.word	0x20000470
 800695c:	200004cc 	.word	0x200004cc

08006960 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4a07      	ldr	r2, [pc, #28]	; (800698c <vApplicationGetTimerTaskMemory+0x2c>)
 8006970:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4a06      	ldr	r2, [pc, #24]	; (8006990 <vApplicationGetTimerTaskMemory+0x30>)
 8006976:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800697e:	601a      	str	r2, [r3, #0]
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	200006cc 	.word	0x200006cc
 8006990:	20000728 	.word	0x20000728

08006994 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f103 0208 	add.w	r2, r3, #8
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f103 0208 	add.w	r2, r3, #8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f103 0208 	add.w	r2, r3, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
}
 8006a2a:	bf00      	nop
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4c:	d103      	bne.n	8006a56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e00c      	b.n	8006a70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e002      	b.n	8006a64 <vListInsert+0x2e>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d2f6      	bcs.n	8006a5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6892      	ldr	r2, [r2, #8]
 8006abe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6852      	ldr	r2, [r2, #4]
 8006ac8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d103      	bne.n	8006adc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	1e5a      	subs	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b26:	f002 f84d 	bl	8008bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	68f9      	ldr	r1, [r7, #12]
 8006b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	441a      	add	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	3b01      	subs	r3, #1
 8006b58:	68f9      	ldr	r1, [r7, #12]
 8006b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	441a      	add	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	22ff      	movs	r2, #255	; 0xff
 8006b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d114      	bne.n	8006ba6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01a      	beq.n	8006bba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3310      	adds	r3, #16
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 f903 	bl	8007d94 <xTaskRemoveFromEventList>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d012      	beq.n	8006bba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b94:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <xQueueGenericReset+0xcc>)
 8006b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	e009      	b.n	8006bba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3310      	adds	r3, #16
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fef2 	bl	8006994 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3324      	adds	r3, #36	; 0x24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff feed 	bl	8006994 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bba:	f002 f833 	bl	8008c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bbe:	2301      	movs	r3, #1
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <xQueueGenericCreateStatic+0x52>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <xQueueGenericCreateStatic+0x56>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueGenericCreateStatic+0x58>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10a      	bne.n	8006c3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	623b      	str	r3, [r7, #32]
}
 8006c3a:	bf00      	nop
 8006c3c:	e7fe      	b.n	8006c3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <xQueueGenericCreateStatic+0x7e>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <xQueueGenericCreateStatic+0x82>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e000      	b.n	8006c50 <xQueueGenericCreateStatic+0x84>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	61fb      	str	r3, [r7, #28]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c6a:	2350      	movs	r3, #80	; 0x50
 8006c6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b50      	cmp	r3, #80	; 0x50
 8006c72:	d00a      	beq.n	8006c8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c78:	f383 8811 	msr	BASEPRI, r3
 8006c7c:	f3bf 8f6f 	isb	sy
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	61bb      	str	r3, [r7, #24]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c8a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c9e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 f805 	bl	8006cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3730      	adds	r7, #48	; 0x30
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d103      	bne.n	8006cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	601a      	str	r2, [r3, #0]
 8006cd6:	e002      	b.n	8006cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cea:	2101      	movs	r1, #1
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f7ff ff05 	bl	8006afc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	; 0x38
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10a      	bne.n	8006d36 <xQueueGenericSend+0x32>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d103      	bne.n	8006d44 <xQueueGenericSend+0x40>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <xQueueGenericSend+0x44>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <xQueueGenericSend+0x46>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <xQueueGenericSend+0x60>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d103      	bne.n	8006d72 <xQueueGenericSend+0x6e>
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <xQueueGenericSend+0x72>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <xQueueGenericSend+0x74>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xQueueGenericSend+0x8e>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d92:	f001 f9bd 	bl	8008110 <xTaskGetSchedulerState>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xQueueGenericSend+0x9e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericSend+0xa2>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericSend+0xa4>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	61fb      	str	r3, [r7, #28]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc2:	f001 feff 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <xQueueGenericSend+0xd4>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d129      	bne.n	8006e2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dde:	f000 fa0b 	bl	80071f8 <prvCopyDataToQueue>
 8006de2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 ffcf 	bl	8007d94 <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <xQueueGenericSend+0x1f8>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	e00a      	b.n	8006e24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <xQueueGenericSend+0x1f8>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e24:	f001 fefe 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e063      	b.n	8006ef4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e32:	f001 fef7 	bl	8008c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e05c      	b.n	8006ef4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f809 	bl	8007e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e4e:	f001 fee9 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e52:	f000 fd7b 	bl	800794c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e56:	f001 feb5 	bl	8008bc4 <vPortEnterCritical>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d103      	bne.n	8006e70 <xQueueGenericSend+0x16c>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x182>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e86:	f001 fecd 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e8a:	1d3a      	adds	r2, r7, #4
 8006e8c:	f107 0314 	add.w	r3, r7, #20
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fff8 	bl	8007e88 <xTaskCheckForTimeOut>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d124      	bne.n	8006ee8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea0:	f000 faa2 	bl	80073e8 <prvIsQueueFull>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d018      	beq.n	8006edc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	3310      	adds	r3, #16
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 ff1e 	bl	8007cf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eba:	f000 fa2d 	bl	8007318 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ebe:	f000 fd53 	bl	8007968 <xTaskResumeAll>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f47f af7c 	bne.w	8006dc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <xQueueGenericSend+0x1f8>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	e772      	b.n	8006dc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ede:	f000 fa1b 	bl	8007318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee2:	f000 fd41 	bl	8007968 <xTaskResumeAll>
 8006ee6:	e76c      	b.n	8006dc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eea:	f000 fa15 	bl	8007318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eee:	f000 fd3b 	bl	8007968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3738      	adds	r7, #56	; 0x38
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	; 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d103      	bne.n	8006f3c <xQueueGenericSendFromISR+0x3c>
 8006f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <xQueueGenericSendFromISR+0x40>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <xQueueGenericSendFromISR+0x42>
 8006f40:	2300      	movs	r3, #0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d103      	bne.n	8006f6a <xQueueGenericSendFromISR+0x6a>
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <xQueueGenericSendFromISR+0x6e>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <xQueueGenericSendFromISR+0x70>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	623b      	str	r3, [r7, #32]
}
 8006f86:	bf00      	nop
 8006f88:	e7fe      	b.n	8006f88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f8a:	f001 fefd 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	61fa      	str	r2, [r7, #28]
 8006fa4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <xQueueGenericSendFromISR+0xbc>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d12f      	bne.n	800701c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fd2:	f000 f911 	bl	80071f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d112      	bne.n	8007006 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d016      	beq.n	8007016 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	3324      	adds	r3, #36	; 0x24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fed1 	bl	8007d94 <xTaskRemoveFromEventList>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00e      	beq.n	8007016 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e007      	b.n	8007016 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800700a:	3301      	adds	r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	b25a      	sxtb	r2, r3
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007016:	2301      	movs	r3, #1
 8007018:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800701a:	e001      	b.n	8007020 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800701c:	2300      	movs	r3, #0
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800702a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800702c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800702e:	4618      	mov	r0, r3
 8007030:	3740      	adds	r7, #64	; 0x40
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08c      	sub	sp, #48	; 0x30
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <xQueueReceive+0x30>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	623b      	str	r3, [r7, #32]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <xQueueReceive+0x3e>
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <xQueueReceive+0x42>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <xQueueReceive+0x44>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <xQueueReceive+0x5e>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	61fb      	str	r3, [r7, #28]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007096:	f001 f83b 	bl	8008110 <xTaskGetSchedulerState>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <xQueueReceive+0x6e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <xQueueReceive+0x72>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <xQueueReceive+0x74>
 80070aa:	2300      	movs	r3, #0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <xQueueReceive+0x8e>
	__asm volatile
 80070b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61bb      	str	r3, [r7, #24]
}
 80070c2:	bf00      	nop
 80070c4:	e7fe      	b.n	80070c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070c6:	f001 fd7d 	bl	8008bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01f      	beq.n	8007116 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070da:	f000 f8f7 	bl	80072cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	3310      	adds	r3, #16
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fe4e 	bl	8007d94 <xTaskRemoveFromEventList>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070fe:	4b3d      	ldr	r3, [pc, #244]	; (80071f4 <xQueueReceive+0x1bc>)
 8007100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800710e:	f001 fd89 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8007112:	2301      	movs	r3, #1
 8007114:	e069      	b.n	80071ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d103      	bne.n	8007124 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800711c:	f001 fd82 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007120:	2300      	movs	r3, #0
 8007122:	e062      	b.n	80071ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fe94 	bl	8007e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007138:	f001 fd74 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800713c:	f000 fc06 	bl	800794c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007140:	f001 fd40 	bl	8008bc4 <vPortEnterCritical>
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800714a:	b25b      	sxtb	r3, r3
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d103      	bne.n	800715a <xQueueReceive+0x122>
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007160:	b25b      	sxtb	r3, r3
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007166:	d103      	bne.n	8007170 <xQueueReceive+0x138>
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007170:	f001 fd58 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007174:	1d3a      	adds	r2, r7, #4
 8007176:	f107 0310 	add.w	r3, r7, #16
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fe83 	bl	8007e88 <xTaskCheckForTimeOut>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d123      	bne.n	80071d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800718a:	f000 f917 	bl	80073bc <prvIsQueueEmpty>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d017      	beq.n	80071c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4611      	mov	r1, r2
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fda9 	bl	8007cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80071a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a4:	f000 f8b8 	bl	8007318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80071a8:	f000 fbde 	bl	8007968 <xTaskResumeAll>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d189      	bne.n	80070c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80071b2:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <xQueueReceive+0x1bc>)
 80071b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	e780      	b.n	80070c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80071c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c6:	f000 f8a7 	bl	8007318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071ca:	f000 fbcd 	bl	8007968 <xTaskResumeAll>
 80071ce:	e77a      	b.n	80070c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071d2:	f000 f8a1 	bl	8007318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071d6:	f000 fbc7 	bl	8007968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071dc:	f000 f8ee 	bl	80073bc <prvIsQueueEmpty>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f43f af6f 	beq.w	80070c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3730      	adds	r7, #48	; 0x30
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	e000ed04 	.word	0xe000ed04

080071f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d14d      	bne.n	80072ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 ff92 	bl	800814c <xTaskPriorityDisinherit>
 8007228:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	e043      	b.n	80072ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d119      	bne.n	800726c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6858      	ldr	r0, [r3, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	461a      	mov	r2, r3
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	f002 ff44 	bl	800a0d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685a      	ldr	r2, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	441a      	add	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	d32b      	bcc.n	80072ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	605a      	str	r2, [r3, #4]
 800726a:	e026      	b.n	80072ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68d8      	ldr	r0, [r3, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	461a      	mov	r2, r3
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	f002 ff2a 	bl	800a0d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	425b      	negs	r3, r3
 8007286:	441a      	add	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68da      	ldr	r2, [r3, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d207      	bcs.n	80072a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	425b      	negs	r3, r3
 80072a2:	441a      	add	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d105      	bne.n	80072ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072c2:	697b      	ldr	r3, [r7, #20]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d018      	beq.n	8007310 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	441a      	add	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d303      	bcc.n	8007300 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68d9      	ldr	r1, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	461a      	mov	r2, r3
 800730a:	6838      	ldr	r0, [r7, #0]
 800730c:	f002 fee0 	bl	800a0d0 <memcpy>
	}
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007320:	f001 fc50 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800732a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800732c:	e011      	b.n	8007352 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d012      	beq.n	800735c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3324      	adds	r3, #36	; 0x24
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fd2a 	bl	8007d94 <xTaskRemoveFromEventList>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007346:	f000 fe01 	bl	8007f4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	3b01      	subs	r3, #1
 800734e:	b2db      	uxtb	r3, r3
 8007350:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dce9      	bgt.n	800732e <prvUnlockQueue+0x16>
 800735a:	e000      	b.n	800735e <prvUnlockQueue+0x46>
					break;
 800735c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	22ff      	movs	r2, #255	; 0xff
 8007362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007366:	f001 fc5d 	bl	8008c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800736a:	f001 fc2b 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007374:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007376:	e011      	b.n	800739c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d012      	beq.n	80073a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3310      	adds	r3, #16
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fd05 	bl	8007d94 <xTaskRemoveFromEventList>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007390:	f000 fddc 	bl	8007f4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	3b01      	subs	r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800739c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dce9      	bgt.n	8007378 <prvUnlockQueue+0x60>
 80073a4:	e000      	b.n	80073a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	22ff      	movs	r2, #255	; 0xff
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073b0:	f001 fc38 	bl	8008c24 <vPortExitCritical>
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c4:	f001 fbfe 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d102      	bne.n	80073d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e001      	b.n	80073da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073da:	f001 fc23 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073f0:	f001 fbe8 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d102      	bne.n	8007406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e001      	b.n	800740a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007406:	2300      	movs	r3, #0
 8007408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800740a:	f001 fc0b 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 800740e:	68fb      	ldr	r3, [r7, #12]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	e014      	b.n	8007452 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007428:	4a0f      	ldr	r2, [pc, #60]	; (8007468 <vQueueAddToRegistry+0x50>)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007434:	490c      	ldr	r1, [pc, #48]	; (8007468 <vQueueAddToRegistry+0x50>)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <vQueueAddToRegistry+0x50>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800744a:	e006      	b.n	800745a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b07      	cmp	r3, #7
 8007456:	d9e7      	bls.n	8007428 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	20000b28 	.word	0x20000b28

0800746c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800747c:	f001 fba2 	bl	8008bc4 <vPortEnterCritical>
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007486:	b25b      	sxtb	r3, r3
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d103      	bne.n	8007496 <vQueueWaitForMessageRestricted+0x2a>
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800749c:	b25b      	sxtb	r3, r3
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d103      	bne.n	80074ac <vQueueWaitForMessageRestricted+0x40>
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ac:	f001 fbba 	bl	8008c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	3324      	adds	r3, #36	; 0x24
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	68b9      	ldr	r1, [r7, #8]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fc3b 	bl	8007d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80074c6:	6978      	ldr	r0, [r7, #20]
 80074c8:	f7ff ff26 	bl	8007318 <prvUnlockQueue>
	}
 80074cc:	bf00      	nop
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08e      	sub	sp, #56	; 0x38
 80074d8:	af04      	add	r7, sp, #16
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	623b      	str	r3, [r7, #32]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10a      	bne.n	800751a <xTaskCreateStatic+0x46>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	61fb      	str	r3, [r7, #28]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800751a:	235c      	movs	r3, #92	; 0x5c
 800751c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b5c      	cmp	r3, #92	; 0x5c
 8007522:	d00a      	beq.n	800753a <xTaskCreateStatic+0x66>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	61bb      	str	r3, [r7, #24]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800753a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01e      	beq.n	8007580 <xTaskCreateStatic+0xac>
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01b      	beq.n	8007580 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007550:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	2202      	movs	r2, #2
 8007556:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800755a:	2300      	movs	r3, #0
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	9302      	str	r3, [sp, #8]
 8007562:	f107 0314 	add.w	r3, r7, #20
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f850 	bl	8007618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800757a:	f000 f8dd 	bl	8007738 <prvAddNewTaskToReadyList>
 800757e:	e001      	b.n	8007584 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007584:	697b      	ldr	r3, [r7, #20]
	}
 8007586:	4618      	mov	r0, r3
 8007588:	3728      	adds	r7, #40	; 0x28
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800758e:	b580      	push	{r7, lr}
 8007590:	b08c      	sub	sp, #48	; 0x30
 8007592:	af04      	add	r7, sp, #16
 8007594:	60f8      	str	r0, [r7, #12]
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 fc30 	bl	8008e08 <pvPortMalloc>
 80075a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075b0:	205c      	movs	r0, #92	; 0x5c
 80075b2:	f001 fc29 	bl	8008e08 <pvPortMalloc>
 80075b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
 80075c4:	e005      	b.n	80075d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f001 fcea 	bl	8008fa0 <vPortFree>
 80075cc:	e001      	b.n	80075d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075e0:	88fa      	ldrh	r2, [r7, #6]
 80075e2:	2300      	movs	r3, #0
 80075e4:	9303      	str	r3, [sp, #12]
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	9302      	str	r3, [sp, #8]
 80075ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 f80e 	bl	8007618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075fc:	69f8      	ldr	r0, [r7, #28]
 80075fe:	f000 f89b 	bl	8007738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007602:	2301      	movs	r3, #1
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	e002      	b.n	800760e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007608:	f04f 33ff 	mov.w	r3, #4294967295
 800760c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800760e:	69bb      	ldr	r3, [r7, #24]
	}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	461a      	mov	r2, r3
 8007630:	21a5      	movs	r1, #165	; 0xa5
 8007632:	f002 fd5b 	bl	800a0ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007640:	3b01      	subs	r3, #1
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	f023 0307 	bic.w	r3, r3, #7
 800764e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	f003 0307 	and.w	r3, r3, #7
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <prvInitialiseNewTask+0x58>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	617b      	str	r3, [r7, #20]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01f      	beq.n	80076b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e012      	b.n	80076a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	7819      	ldrb	r1, [r3, #0]
 8007684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	4413      	add	r3, r2
 800768a:	3334      	adds	r3, #52	; 0x34
 800768c:	460a      	mov	r2, r1
 800768e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	2b0f      	cmp	r3, #15
 80076a6:	d9e9      	bls.n	800767c <prvInitialiseNewTask+0x64>
 80076a8:	e000      	b.n	80076ac <prvInitialiseNewTask+0x94>
			{
				break;
 80076aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076b4:	e003      	b.n	80076be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	2b37      	cmp	r3, #55	; 0x37
 80076c2:	d901      	bls.n	80076c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076c4:	2337      	movs	r3, #55	; 0x37
 80076c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	2200      	movs	r2, #0
 80076d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff f978 	bl	80069d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	3318      	adds	r3, #24
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff f973 	bl	80069d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2200      	movs	r2, #0
 8007708:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	69b8      	ldr	r0, [r7, #24]
 8007718:	f001 f928 	bl	800896c <pxPortInitialiseStack>
 800771c:	4602      	mov	r2, r0
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800772c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800772e:	bf00      	nop
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007740:	f001 fa40 	bl	8008bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007744:	4b2d      	ldr	r3, [pc, #180]	; (80077fc <prvAddNewTaskToReadyList+0xc4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	4a2c      	ldr	r2, [pc, #176]	; (80077fc <prvAddNewTaskToReadyList+0xc4>)
 800774c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800774e:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d109      	bne.n	800776a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007756:	4a2a      	ldr	r2, [pc, #168]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800775c:	4b27      	ldr	r3, [pc, #156]	; (80077fc <prvAddNewTaskToReadyList+0xc4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d110      	bne.n	8007786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007764:	f000 fc16 	bl	8007f94 <prvInitialiseTaskLists>
 8007768:	e00d      	b.n	8007786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800776a:	4b26      	ldr	r3, [pc, #152]	; (8007804 <prvAddNewTaskToReadyList+0xcc>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007772:	4b23      	ldr	r3, [pc, #140]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	429a      	cmp	r2, r3
 800777e:	d802      	bhi.n	8007786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007780:	4a1f      	ldr	r2, [pc, #124]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007786:	4b20      	ldr	r3, [pc, #128]	; (8007808 <prvAddNewTaskToReadyList+0xd0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3301      	adds	r3, #1
 800778c:	4a1e      	ldr	r2, [pc, #120]	; (8007808 <prvAddNewTaskToReadyList+0xd0>)
 800778e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007790:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <prvAddNewTaskToReadyList+0xd0>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	4b1b      	ldr	r3, [pc, #108]	; (800780c <prvAddNewTaskToReadyList+0xd4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d903      	bls.n	80077ac <prvAddNewTaskToReadyList+0x74>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	4a18      	ldr	r2, [pc, #96]	; (800780c <prvAddNewTaskToReadyList+0xd4>)
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4a15      	ldr	r2, [pc, #84]	; (8007810 <prvAddNewTaskToReadyList+0xd8>)
 80077ba:	441a      	add	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f7ff f913 	bl	80069ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077c8:	f001 fa2c 	bl	8008c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <prvAddNewTaskToReadyList+0xcc>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00e      	beq.n	80077f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077d4:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <prvAddNewTaskToReadyList+0xc8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077de:	429a      	cmp	r2, r3
 80077e0:	d207      	bcs.n	80077f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077e2:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <prvAddNewTaskToReadyList+0xdc>)
 80077e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000103c 	.word	0x2000103c
 8007800:	20000b68 	.word	0x20000b68
 8007804:	20001048 	.word	0x20001048
 8007808:	20001058 	.word	0x20001058
 800780c:	20001044 	.word	0x20001044
 8007810:	20000b6c 	.word	0x20000b6c
 8007814:	e000ed04 	.word	0xe000ed04

08007818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d017      	beq.n	800785a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <vTaskDelay+0x60>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <vTaskDelay+0x30>
	__asm volatile
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	60bb      	str	r3, [r7, #8]
}
 8007844:	bf00      	nop
 8007846:	e7fe      	b.n	8007846 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007848:	f000 f880 	bl	800794c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fcea 	bl	8008228 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007854:	f000 f888 	bl	8007968 <xTaskResumeAll>
 8007858:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d107      	bne.n	8007870 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <vTaskDelay+0x64>)
 8007862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007870:	bf00      	nop
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20001064 	.word	0x20001064
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08a      	sub	sp, #40	; 0x28
 8007884:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800788e:	463a      	mov	r2, r7
 8007890:	1d39      	adds	r1, r7, #4
 8007892:	f107 0308 	add.w	r3, r7, #8
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff f848 	bl	800692c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	9202      	str	r2, [sp, #8]
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	2300      	movs	r3, #0
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2300      	movs	r3, #0
 80078ac:	460a      	mov	r2, r1
 80078ae:	4921      	ldr	r1, [pc, #132]	; (8007934 <vTaskStartScheduler+0xb4>)
 80078b0:	4821      	ldr	r0, [pc, #132]	; (8007938 <vTaskStartScheduler+0xb8>)
 80078b2:	f7ff fe0f 	bl	80074d4 <xTaskCreateStatic>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4a20      	ldr	r2, [pc, #128]	; (800793c <vTaskStartScheduler+0xbc>)
 80078ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078bc:	4b1f      	ldr	r3, [pc, #124]	; (800793c <vTaskStartScheduler+0xbc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078c4:	2301      	movs	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	e001      	b.n	80078ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d102      	bne.n	80078da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078d4:	f000 fcfc 	bl	80082d0 <xTimerCreateTimerTask>
 80078d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d116      	bne.n	800790e <vTaskStartScheduler+0x8e>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	613b      	str	r3, [r7, #16]
}
 80078f2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078f4:	4b12      	ldr	r3, [pc, #72]	; (8007940 <vTaskStartScheduler+0xc0>)
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295
 80078fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078fc:	4b11      	ldr	r3, [pc, #68]	; (8007944 <vTaskStartScheduler+0xc4>)
 80078fe:	2201      	movs	r2, #1
 8007900:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <vTaskStartScheduler+0xc8>)
 8007904:	2200      	movs	r2, #0
 8007906:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007908:	f001 f8ba 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800790c:	e00e      	b.n	800792c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d10a      	bne.n	800792c <vTaskStartScheduler+0xac>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60fb      	str	r3, [r7, #12]
}
 8007928:	bf00      	nop
 800792a:	e7fe      	b.n	800792a <vTaskStartScheduler+0xaa>
}
 800792c:	bf00      	nop
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	0800a3c0 	.word	0x0800a3c0
 8007938:	08007f65 	.word	0x08007f65
 800793c:	20001060 	.word	0x20001060
 8007940:	2000105c 	.word	0x2000105c
 8007944:	20001048 	.word	0x20001048
 8007948:	20001040 	.word	0x20001040

0800794c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <vTaskSuspendAll+0x18>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3301      	adds	r3, #1
 8007956:	4a03      	ldr	r2, [pc, #12]	; (8007964 <vTaskSuspendAll+0x18>)
 8007958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800795a:	bf00      	nop
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20001064 	.word	0x20001064

08007968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007976:	4b42      	ldr	r3, [pc, #264]	; (8007a80 <xTaskResumeAll+0x118>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <xTaskResumeAll+0x2c>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	603b      	str	r3, [r7, #0]
}
 8007990:	bf00      	nop
 8007992:	e7fe      	b.n	8007992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007994:	f001 f916 	bl	8008bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007998:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <xTaskResumeAll+0x118>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3b01      	subs	r3, #1
 800799e:	4a38      	ldr	r2, [pc, #224]	; (8007a80 <xTaskResumeAll+0x118>)
 80079a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a2:	4b37      	ldr	r3, [pc, #220]	; (8007a80 <xTaskResumeAll+0x118>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d162      	bne.n	8007a70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079aa:	4b36      	ldr	r3, [pc, #216]	; (8007a84 <xTaskResumeAll+0x11c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d05e      	beq.n	8007a70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b2:	e02f      	b.n	8007a14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b4:	4b34      	ldr	r3, [pc, #208]	; (8007a88 <xTaskResumeAll+0x120>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3318      	adds	r3, #24
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff f871 	bl	8006aa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3304      	adds	r3, #4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7ff f86c 	bl	8006aa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d4:	4b2d      	ldr	r3, [pc, #180]	; (8007a8c <xTaskResumeAll+0x124>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d903      	bls.n	80079e4 <xTaskResumeAll+0x7c>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	4a2a      	ldr	r2, [pc, #168]	; (8007a8c <xTaskResumeAll+0x124>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a27      	ldr	r2, [pc, #156]	; (8007a90 <xTaskResumeAll+0x128>)
 80079f2:	441a      	add	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe fff7 	bl	80069ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a04:	4b23      	ldr	r3, [pc, #140]	; (8007a94 <xTaskResumeAll+0x12c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d302      	bcc.n	8007a14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a0e:	4b22      	ldr	r3, [pc, #136]	; (8007a98 <xTaskResumeAll+0x130>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a14:	4b1c      	ldr	r3, [pc, #112]	; (8007a88 <xTaskResumeAll+0x120>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1cb      	bne.n	80079b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a22:	f000 fb55 	bl	80080d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a26:	4b1d      	ldr	r3, [pc, #116]	; (8007a9c <xTaskResumeAll+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d010      	beq.n	8007a54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a32:	f000 f847 	bl	8007ac4 <xTaskIncrementTick>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a3c:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <xTaskResumeAll+0x130>)
 8007a3e:	2201      	movs	r2, #1
 8007a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1f1      	bne.n	8007a32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <xTaskResumeAll+0x134>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a54:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <xTaskResumeAll+0x130>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d009      	beq.n	8007a70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <xTaskResumeAll+0x138>)
 8007a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a70:	f001 f8d8 	bl	8008c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007a74:	68bb      	ldr	r3, [r7, #8]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20001064 	.word	0x20001064
 8007a84:	2000103c 	.word	0x2000103c
 8007a88:	20000ffc 	.word	0x20000ffc
 8007a8c:	20001044 	.word	0x20001044
 8007a90:	20000b6c 	.word	0x20000b6c
 8007a94:	20000b68 	.word	0x20000b68
 8007a98:	20001050 	.word	0x20001050
 8007a9c:	2000104c 	.word	0x2000104c
 8007aa0:	e000ed04 	.word	0xe000ed04

08007aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <xTaskGetTickCount+0x1c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ab0:	687b      	ldr	r3, [r7, #4]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	20001040 	.word	0x20001040

08007ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aca:	2300      	movs	r3, #0
 8007acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ace:	4b4f      	ldr	r3, [pc, #316]	; (8007c0c <xTaskIncrementTick+0x148>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f040 808f 	bne.w	8007bf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ad8:	4b4d      	ldr	r3, [pc, #308]	; (8007c10 <xTaskIncrementTick+0x14c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3301      	adds	r3, #1
 8007ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ae0:	4a4b      	ldr	r2, [pc, #300]	; (8007c10 <xTaskIncrementTick+0x14c>)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d120      	bne.n	8007b2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007aec:	4b49      	ldr	r3, [pc, #292]	; (8007c14 <xTaskIncrementTick+0x150>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <xTaskIncrementTick+0x48>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	603b      	str	r3, [r7, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <xTaskIncrementTick+0x46>
 8007b0c:	4b41      	ldr	r3, [pc, #260]	; (8007c14 <xTaskIncrementTick+0x150>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <xTaskIncrementTick+0x154>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a3f      	ldr	r2, [pc, #252]	; (8007c14 <xTaskIncrementTick+0x150>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	4a3f      	ldr	r2, [pc, #252]	; (8007c18 <xTaskIncrementTick+0x154>)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	4b3e      	ldr	r3, [pc, #248]	; (8007c1c <xTaskIncrementTick+0x158>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	3301      	adds	r3, #1
 8007b26:	4a3d      	ldr	r2, [pc, #244]	; (8007c1c <xTaskIncrementTick+0x158>)
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	f000 fad1 	bl	80080d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b2e:	4b3c      	ldr	r3, [pc, #240]	; (8007c20 <xTaskIncrementTick+0x15c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d349      	bcc.n	8007bcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b38:	4b36      	ldr	r3, [pc, #216]	; (8007c14 <xTaskIncrementTick+0x150>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b42:	4b37      	ldr	r3, [pc, #220]	; (8007c20 <xTaskIncrementTick+0x15c>)
 8007b44:	f04f 32ff 	mov.w	r2, #4294967295
 8007b48:	601a      	str	r2, [r3, #0]
					break;
 8007b4a:	e03f      	b.n	8007bcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4c:	4b31      	ldr	r3, [pc, #196]	; (8007c14 <xTaskIncrementTick+0x150>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d203      	bcs.n	8007b6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b64:	4a2e      	ldr	r2, [pc, #184]	; (8007c20 <xTaskIncrementTick+0x15c>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b6a:	e02f      	b.n	8007bcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fe ff99 	bl	8006aa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	3318      	adds	r3, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe ff90 	bl	8006aa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <xTaskIncrementTick+0x160>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d903      	bls.n	8007b9c <xTaskIncrementTick+0xd8>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	4a22      	ldr	r2, [pc, #136]	; (8007c24 <xTaskIncrementTick+0x160>)
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	; (8007c28 <xTaskIncrementTick+0x164>)
 8007baa:	441a      	add	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f7fe ff1b 	bl	80069ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4b1b      	ldr	r3, [pc, #108]	; (8007c2c <xTaskIncrementTick+0x168>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d3b8      	bcc.n	8007b38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bca:	e7b5      	b.n	8007b38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bcc:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <xTaskIncrementTick+0x168>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	4915      	ldr	r1, [pc, #84]	; (8007c28 <xTaskIncrementTick+0x164>)
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d901      	bls.n	8007be8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <xTaskIncrementTick+0x16c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d007      	beq.n	8007c00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e004      	b.n	8007c00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <xTaskIncrementTick+0x170>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	4a0d      	ldr	r2, [pc, #52]	; (8007c34 <xTaskIncrementTick+0x170>)
 8007bfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c00:	697b      	ldr	r3, [r7, #20]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20001064 	.word	0x20001064
 8007c10:	20001040 	.word	0x20001040
 8007c14:	20000ff4 	.word	0x20000ff4
 8007c18:	20000ff8 	.word	0x20000ff8
 8007c1c:	20001054 	.word	0x20001054
 8007c20:	2000105c 	.word	0x2000105c
 8007c24:	20001044 	.word	0x20001044
 8007c28:	20000b6c 	.word	0x20000b6c
 8007c2c:	20000b68 	.word	0x20000b68
 8007c30:	20001050 	.word	0x20001050
 8007c34:	2000104c 	.word	0x2000104c

08007c38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c3e:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <vTaskSwitchContext+0xa8>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c46:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <vTaskSwitchContext+0xac>)
 8007c48:	2201      	movs	r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c4c:	e041      	b.n	8007cd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007c4e:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <vTaskSwitchContext+0xac>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <vTaskSwitchContext+0xb0>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	e010      	b.n	8007c7e <vTaskSwitchContext+0x46>
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <vTaskSwitchContext+0x40>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	607b      	str	r3, [r7, #4]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <vTaskSwitchContext+0x3e>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	491b      	ldr	r1, [pc, #108]	; (8007cec <vTaskSwitchContext+0xb4>)
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0e4      	beq.n	8007c5c <vTaskSwitchContext+0x24>
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4613      	mov	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4a13      	ldr	r2, [pc, #76]	; (8007cec <vTaskSwitchContext+0xb4>)
 8007c9e:	4413      	add	r3, r2
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	605a      	str	r2, [r3, #4]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d104      	bne.n	8007cc2 <vTaskSwitchContext+0x8a>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	605a      	str	r2, [r3, #4]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <vTaskSwitchContext+0xb8>)
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	4a06      	ldr	r2, [pc, #24]	; (8007ce8 <vTaskSwitchContext+0xb0>)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6013      	str	r3, [r2, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20001064 	.word	0x20001064
 8007ce4:	20001050 	.word	0x20001050
 8007ce8:	20001044 	.word	0x20001044
 8007cec:	20000b6c 	.word	0x20000b6c
 8007cf0:	20000b68 	.word	0x20000b68

08007cf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d1a:	4b07      	ldr	r3, [pc, #28]	; (8007d38 <vTaskPlaceOnEventList+0x44>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3318      	adds	r3, #24
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fe fe87 	bl	8006a36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d28:	2101      	movs	r1, #1
 8007d2a:	6838      	ldr	r0, [r7, #0]
 8007d2c:	f000 fa7c 	bl	8008228 <prvAddCurrentTaskToDelayedList>
}
 8007d30:	bf00      	nop
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	20000b68 	.word	0x20000b68

08007d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10a      	bne.n	8007d64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	617b      	str	r3, [r7, #20]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d64:	4b0a      	ldr	r3, [pc, #40]	; (8007d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3318      	adds	r3, #24
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7fe fe3e 	bl	80069ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	68b8      	ldr	r0, [r7, #8]
 8007d82:	f000 fa51 	bl	8008228 <prvAddCurrentTaskToDelayedList>
	}
 8007d86:	bf00      	nop
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000b68 	.word	0x20000b68

08007d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	60fb      	str	r3, [r7, #12]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3318      	adds	r3, #24
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fe6f 	bl	8006aa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <xTaskRemoveFromEventList+0xb0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11d      	bne.n	8007e0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fe66 	bl	8006aa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <xTaskRemoveFromEventList+0xb4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d903      	bls.n	8007df0 <xTaskRemoveFromEventList+0x5c>
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4a16      	ldr	r2, [pc, #88]	; (8007e48 <xTaskRemoveFromEventList+0xb4>)
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4613      	mov	r3, r2
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4a13      	ldr	r2, [pc, #76]	; (8007e4c <xTaskRemoveFromEventList+0xb8>)
 8007dfe:	441a      	add	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4619      	mov	r1, r3
 8007e06:	4610      	mov	r0, r2
 8007e08:	f7fe fdf1 	bl	80069ee <vListInsertEnd>
 8007e0c:	e005      	b.n	8007e1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	3318      	adds	r3, #24
 8007e12:	4619      	mov	r1, r3
 8007e14:	480e      	ldr	r0, [pc, #56]	; (8007e50 <xTaskRemoveFromEventList+0xbc>)
 8007e16:	f7fe fdea 	bl	80069ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1e:	4b0d      	ldr	r3, [pc, #52]	; (8007e54 <xTaskRemoveFromEventList+0xc0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d905      	bls.n	8007e34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <xTaskRemoveFromEventList+0xc4>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	601a      	str	r2, [r3, #0]
 8007e32:	e001      	b.n	8007e38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e38:	697b      	ldr	r3, [r7, #20]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20001064 	.word	0x20001064
 8007e48:	20001044 	.word	0x20001044
 8007e4c:	20000b6c 	.word	0x20000b6c
 8007e50:	20000ffc 	.word	0x20000ffc
 8007e54:	20000b68 	.word	0x20000b68
 8007e58:	20001050 	.word	0x20001050

08007e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e64:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <vTaskInternalSetTimeOutState+0x24>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e6c:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <vTaskInternalSetTimeOutState+0x28>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	605a      	str	r2, [r3, #4]
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	20001054 	.word	0x20001054
 8007e84:	20001040 	.word	0x20001040

08007e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	613b      	str	r3, [r7, #16]
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10a      	bne.n	8007eca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	60fb      	str	r3, [r7, #12]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007eca:	f000 fe7b 	bl	8008bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ece:	4b1d      	ldr	r3, [pc, #116]	; (8007f44 <xTaskCheckForTimeOut+0xbc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d102      	bne.n	8007eee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	61fb      	str	r3, [r7, #28]
 8007eec:	e023      	b.n	8007f36 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b15      	ldr	r3, [pc, #84]	; (8007f48 <xTaskCheckForTimeOut+0xc0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d007      	beq.n	8007f0a <xTaskCheckForTimeOut+0x82>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d302      	bcc.n	8007f0a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	e015      	b.n	8007f36 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d20b      	bcs.n	8007f2c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	1ad2      	subs	r2, r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ff9b 	bl	8007e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	e004      	b.n	8007f36 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f36:	f000 fe75 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20001040 	.word	0x20001040
 8007f48:	20001054 	.word	0x20001054

08007f4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f50:	4b03      	ldr	r3, [pc, #12]	; (8007f60 <vTaskMissedYield+0x14>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	601a      	str	r2, [r3, #0]
}
 8007f56:	bf00      	nop
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	20001050 	.word	0x20001050

08007f64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f6c:	f000 f852 	bl	8008014 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f70:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <prvIdleTask+0x28>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d9f9      	bls.n	8007f6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f78:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <prvIdleTask+0x2c>)
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f88:	e7f0      	b.n	8007f6c <prvIdleTask+0x8>
 8007f8a:	bf00      	nop
 8007f8c:	20000b6c 	.word	0x20000b6c
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	607b      	str	r3, [r7, #4]
 8007f9e:	e00c      	b.n	8007fba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <prvInitialiseTaskLists+0x60>)
 8007fac:	4413      	add	r3, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fe fcf0 	bl	8006994 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b37      	cmp	r3, #55	; 0x37
 8007fbe:	d9ef      	bls.n	8007fa0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fc0:	480d      	ldr	r0, [pc, #52]	; (8007ff8 <prvInitialiseTaskLists+0x64>)
 8007fc2:	f7fe fce7 	bl	8006994 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fc6:	480d      	ldr	r0, [pc, #52]	; (8007ffc <prvInitialiseTaskLists+0x68>)
 8007fc8:	f7fe fce4 	bl	8006994 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fcc:	480c      	ldr	r0, [pc, #48]	; (8008000 <prvInitialiseTaskLists+0x6c>)
 8007fce:	f7fe fce1 	bl	8006994 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fd2:	480c      	ldr	r0, [pc, #48]	; (8008004 <prvInitialiseTaskLists+0x70>)
 8007fd4:	f7fe fcde 	bl	8006994 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fd8:	480b      	ldr	r0, [pc, #44]	; (8008008 <prvInitialiseTaskLists+0x74>)
 8007fda:	f7fe fcdb 	bl	8006994 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <prvInitialiseTaskLists+0x78>)
 8007fe0:	4a05      	ldr	r2, [pc, #20]	; (8007ff8 <prvInitialiseTaskLists+0x64>)
 8007fe2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fe4:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <prvInitialiseTaskLists+0x7c>)
 8007fe6:	4a05      	ldr	r2, [pc, #20]	; (8007ffc <prvInitialiseTaskLists+0x68>)
 8007fe8:	601a      	str	r2, [r3, #0]
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000b6c 	.word	0x20000b6c
 8007ff8:	20000fcc 	.word	0x20000fcc
 8007ffc:	20000fe0 	.word	0x20000fe0
 8008000:	20000ffc 	.word	0x20000ffc
 8008004:	20001010 	.word	0x20001010
 8008008:	20001028 	.word	0x20001028
 800800c:	20000ff4 	.word	0x20000ff4
 8008010:	20000ff8 	.word	0x20000ff8

08008014 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800801a:	e019      	b.n	8008050 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800801c:	f000 fdd2 	bl	8008bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008020:	4b10      	ldr	r3, [pc, #64]	; (8008064 <prvCheckTasksWaitingTermination+0x50>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fd3b 	bl	8006aa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008032:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <prvCheckTasksWaitingTermination+0x54>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3b01      	subs	r3, #1
 8008038:	4a0b      	ldr	r2, [pc, #44]	; (8008068 <prvCheckTasksWaitingTermination+0x54>)
 800803a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800803c:	4b0b      	ldr	r3, [pc, #44]	; (800806c <prvCheckTasksWaitingTermination+0x58>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <prvCheckTasksWaitingTermination+0x58>)
 8008044:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008046:	f000 fded 	bl	8008c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f810 	bl	8008070 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <prvCheckTasksWaitingTermination+0x58>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e1      	bne.n	800801c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20001010 	.word	0x20001010
 8008068:	2000103c 	.word	0x2000103c
 800806c:	20001024 	.word	0x20001024

08008070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800807e:	2b00      	cmp	r3, #0
 8008080:	d108      	bne.n	8008094 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4618      	mov	r0, r3
 8008088:	f000 ff8a 	bl	8008fa0 <vPortFree>
				vPortFree( pxTCB );
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 ff87 	bl	8008fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008092:	e018      	b.n	80080c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800809a:	2b01      	cmp	r3, #1
 800809c:	d103      	bne.n	80080a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 ff7e 	bl	8008fa0 <vPortFree>
	}
 80080a4:	e00f      	b.n	80080c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d00a      	beq.n	80080c6 <prvDeleteTCB+0x56>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <prvDeleteTCB+0x54>
	}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080e2:	f04f 32ff 	mov.w	r2, #4294967295
 80080e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080e8:	e008      	b.n	80080fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a04      	ldr	r2, [pc, #16]	; (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080fa:	6013      	str	r3, [r2, #0]
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	20000ff4 	.word	0x20000ff4
 800810c:	2000105c 	.word	0x2000105c

08008110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <xTaskGetSchedulerState+0x34>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800811e:	2301      	movs	r3, #1
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e008      	b.n	8008136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008124:	4b08      	ldr	r3, [pc, #32]	; (8008148 <xTaskGetSchedulerState+0x38>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800812c:	2302      	movs	r3, #2
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e001      	b.n	8008136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008136:	687b      	ldr	r3, [r7, #4]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20001048 	.word	0x20001048
 8008148:	20001064 	.word	0x20001064

0800814c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d056      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008162:	4b2e      	ldr	r3, [pc, #184]	; (800821c <xTaskPriorityDisinherit+0xd0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00a      	beq.n	8008182 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	e7fe      	b.n	8008180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10a      	bne.n	80081a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	60bb      	str	r3, [r7, #8]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d02c      	beq.n	8008210 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d128      	bne.n	8008210 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fc70 	bl	8006aa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e0:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d903      	bls.n	80081f0 <xTaskPriorityDisinherit+0xa4>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <xTaskPriorityDisinherit+0xd4>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a09      	ldr	r2, [pc, #36]	; (8008224 <xTaskPriorityDisinherit+0xd8>)
 80081fe:	441a      	add	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fbf1 	bl	80069ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008210:	697b      	ldr	r3, [r7, #20]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000b68 	.word	0x20000b68
 8008220:	20001044 	.word	0x20001044
 8008224:	20000b6c 	.word	0x20000b6c

08008228 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008232:	4b21      	ldr	r3, [pc, #132]	; (80082b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3304      	adds	r3, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fc32 	bl	8006aa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824a:	d10a      	bne.n	8008262 <prvAddCurrentTaskToDelayedList+0x3a>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008252:	4b1a      	ldr	r3, [pc, #104]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4819      	ldr	r0, [pc, #100]	; (80082c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800825c:	f7fe fbc7 	bl	80069ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008260:	e026      	b.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800826a:	4b14      	ldr	r3, [pc, #80]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	429a      	cmp	r2, r3
 8008278:	d209      	bcs.n	800828e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	4b0f      	ldr	r3, [pc, #60]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3304      	adds	r3, #4
 8008284:	4619      	mov	r1, r3
 8008286:	4610      	mov	r0, r2
 8008288:	f7fe fbd5 	bl	8006a36 <vListInsert>
}
 800828c:	e010      	b.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b0a      	ldr	r3, [pc, #40]	; (80082bc <prvAddCurrentTaskToDelayedList+0x94>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7fe fbcb 	bl	8006a36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d202      	bcs.n	80082b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082aa:	4a08      	ldr	r2, [pc, #32]	; (80082cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6013      	str	r3, [r2, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20001040 	.word	0x20001040
 80082bc:	20000b68 	.word	0x20000b68
 80082c0:	20001028 	.word	0x20001028
 80082c4:	20000ff8 	.word	0x20000ff8
 80082c8:	20000ff4 	.word	0x20000ff4
 80082cc:	2000105c 	.word	0x2000105c

080082d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082da:	f000 fb07 	bl	80088ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082de:	4b1c      	ldr	r3, [pc, #112]	; (8008350 <xTimerCreateTimerTask+0x80>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d021      	beq.n	800832a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082ee:	1d3a      	adds	r2, r7, #4
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	f107 030c 	add.w	r3, r7, #12
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fb31 	bl	8006960 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	9202      	str	r2, [sp, #8]
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	2302      	movs	r3, #2
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	2300      	movs	r3, #0
 800830e:	460a      	mov	r2, r1
 8008310:	4910      	ldr	r1, [pc, #64]	; (8008354 <xTimerCreateTimerTask+0x84>)
 8008312:	4811      	ldr	r0, [pc, #68]	; (8008358 <xTimerCreateTimerTask+0x88>)
 8008314:	f7ff f8de 	bl	80074d4 <xTaskCreateStatic>
 8008318:	4603      	mov	r3, r0
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <xTimerCreateTimerTask+0x8c>)
 800831c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <xTimerCreateTimerTask+0x8c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008326:	2301      	movs	r3, #1
 8008328:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	613b      	str	r3, [r7, #16]
}
 8008342:	bf00      	nop
 8008344:	e7fe      	b.n	8008344 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008346:	697b      	ldr	r3, [r7, #20]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20001098 	.word	0x20001098
 8008354:	0800a3c8 	.word	0x0800a3c8
 8008358:	08008495 	.word	0x08008495
 800835c:	2000109c 	.word	0x2000109c

08008360 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800836e:	2300      	movs	r3, #0
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	623b      	str	r3, [r7, #32]
}
 800838a:	bf00      	nop
 800838c:	e7fe      	b.n	800838c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800838e:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <xTimerGenericCommand+0x98>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02a      	beq.n	80083ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b05      	cmp	r3, #5
 80083a6:	dc18      	bgt.n	80083da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083a8:	f7ff feb2 	bl	8008110 <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d109      	bne.n	80083c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	f107 0110 	add.w	r1, r7, #16
 80083ba:	2300      	movs	r3, #0
 80083bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083be:	f7fe fca1 	bl	8006d04 <xQueueGenericSend>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
 80083c4:	e012      	b.n	80083ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083c6:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f107 0110 	add.w	r1, r7, #16
 80083ce:	2300      	movs	r3, #0
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7fe fc97 	bl	8006d04 <xQueueGenericSend>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24
 80083d8:	e008      	b.n	80083ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <xTimerGenericCommand+0x98>)
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f107 0110 	add.w	r1, r7, #16
 80083e2:	2300      	movs	r3, #0
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	f7fe fd8b 	bl	8006f00 <xQueueGenericSendFromISR>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3728      	adds	r7, #40	; 0x28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20001098 	.word	0x20001098

080083fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b088      	sub	sp, #32
 8008400:	af02      	add	r7, sp, #8
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008406:	4b22      	ldr	r3, [pc, #136]	; (8008490 <prvProcessExpiredTimer+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3304      	adds	r3, #4
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe fb47 	bl	8006aa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d022      	beq.n	800846e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	699a      	ldr	r2, [r3, #24]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	18d1      	adds	r1, r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	6978      	ldr	r0, [r7, #20]
 8008436:	f000 f8d1 	bl	80085dc <prvInsertTimerInActiveList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d01f      	beq.n	8008480 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	2300      	movs	r3, #0
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	2100      	movs	r1, #0
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	f7ff ff88 	bl	8008360 <xTimerGenericCommand>
 8008450:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d113      	bne.n	8008480 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	60fb      	str	r3, [r7, #12]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	6978      	ldr	r0, [r7, #20]
 8008486:	4798      	blx	r3
}
 8008488:	bf00      	nop
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20001090 	.word	0x20001090

08008494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f857 	bl	8008554 <prvGetNextExpireTime>
 80084a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4619      	mov	r1, r3
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f803 	bl	80084b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084b2:	f000 f8d5 	bl	8008660 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084b6:	e7f1      	b.n	800849c <prvTimerTask+0x8>

080084b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084c2:	f7ff fa43 	bl	800794c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084c6:	f107 0308 	add.w	r3, r7, #8
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f866 	bl	800859c <prvSampleTimeNow>
 80084d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d130      	bne.n	800853a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <prvProcessTimerOrBlockTask+0x3c>
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d806      	bhi.n	80084f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084e6:	f7ff fa3f 	bl	8007968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff ff85 	bl	80083fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084f2:	e024      	b.n	800853e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <prvProcessTimerOrBlockTask+0x90>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <prvProcessTimerOrBlockTask+0x50>
 8008504:	2301      	movs	r3, #1
 8008506:	e000      	b.n	800850a <prvProcessTimerOrBlockTask+0x52>
 8008508:	2300      	movs	r3, #0
 800850a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <prvProcessTimerOrBlockTask+0x94>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4619      	mov	r1, r3
 800851a:	f7fe ffa7 	bl	800746c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800851e:	f7ff fa23 	bl	8007968 <xTaskResumeAll>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10a      	bne.n	800853e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <prvProcessTimerOrBlockTask+0x98>)
 800852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852e:	601a      	str	r2, [r3, #0]
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	f3bf 8f6f 	isb	sy
}
 8008538:	e001      	b.n	800853e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800853a:	f7ff fa15 	bl	8007968 <xTaskResumeAll>
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20001094 	.word	0x20001094
 800854c:	20001098 	.word	0x20001098
 8008550:	e000ed04 	.word	0xe000ed04

08008554 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <prvGetNextExpireTime+0x44>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <prvGetNextExpireTime+0x16>
 8008566:	2201      	movs	r2, #1
 8008568:	e000      	b.n	800856c <prvGetNextExpireTime+0x18>
 800856a:	2200      	movs	r2, #0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d105      	bne.n	8008584 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <prvGetNextExpireTime+0x44>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e001      	b.n	8008588 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008588:	68fb      	ldr	r3, [r7, #12]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20001090 	.word	0x20001090

0800859c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085a4:	f7ff fa7e 	bl	8007aa4 <xTaskGetTickCount>
 80085a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <prvSampleTimeNow+0x3c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d205      	bcs.n	80085c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085b4:	f000 f936 	bl	8008824 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e002      	b.n	80085c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085c6:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <prvSampleTimeNow+0x3c>)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085cc:	68fb      	ldr	r3, [r7, #12]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	200010a0 	.word	0x200010a0

080085dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085ea:	2300      	movs	r3, #0
 80085ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d812      	bhi.n	8008628 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	429a      	cmp	r2, r3
 800860e:	d302      	bcc.n	8008616 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
 8008614:	e01b      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008616:	4b10      	ldr	r3, [pc, #64]	; (8008658 <prvInsertTimerInActiveList+0x7c>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	3304      	adds	r3, #4
 800861e:	4619      	mov	r1, r3
 8008620:	4610      	mov	r0, r2
 8008622:	f7fe fa08 	bl	8006a36 <vListInsert>
 8008626:	e012      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d206      	bcs.n	800863e <prvInsertTimerInActiveList+0x62>
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d302      	bcc.n	800863e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e007      	b.n	800864e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800863e:	4b07      	ldr	r3, [pc, #28]	; (800865c <prvInsertTimerInActiveList+0x80>)
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe f9f4 	bl	8006a36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800864e:	697b      	ldr	r3, [r7, #20]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20001094 	.word	0x20001094
 800865c:	20001090 	.word	0x20001090

08008660 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08e      	sub	sp, #56	; 0x38
 8008664:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008666:	e0ca      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	da18      	bge.n	80086a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800866e:	1d3b      	adds	r3, r7, #4
 8008670:	3304      	adds	r3, #4
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	61fb      	str	r3, [r7, #28]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008696:	6850      	ldr	r0, [r2, #4]
 8008698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800869a:	6892      	ldr	r2, [r2, #8]
 800869c:	4611      	mov	r1, r2
 800869e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f2c0 80aa 	blt.w	80087fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	3304      	adds	r3, #4
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f9f5 	bl	8006aa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086be:	463b      	mov	r3, r7
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff ff6b 	bl	800859c <prvSampleTimeNow>
 80086c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	f200 8097 	bhi.w	80087fe <prvProcessReceivedCommands+0x19e>
 80086d0:	a201      	add	r2, pc, #4	; (adr r2, 80086d8 <prvProcessReceivedCommands+0x78>)
 80086d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d6:	bf00      	nop
 80086d8:	08008701 	.word	0x08008701
 80086dc:	08008701 	.word	0x08008701
 80086e0:	08008701 	.word	0x08008701
 80086e4:	08008775 	.word	0x08008775
 80086e8:	08008789 	.word	0x08008789
 80086ec:	080087d3 	.word	0x080087d3
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008701 	.word	0x08008701
 80086f8:	08008775 	.word	0x08008775
 80086fc:	08008789 	.word	0x08008789
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	18d1      	adds	r1, r2, r3
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008720:	f7ff ff5c 	bl	80085dc <prvInsertTimerInActiveList>
 8008724:	4603      	mov	r3, r0
 8008726:	2b00      	cmp	r3, #0
 8008728:	d069      	beq.n	80087fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008730:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05e      	beq.n	80087fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	441a      	add	r2, r3
 8008748:	2300      	movs	r3, #0
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	2300      	movs	r3, #0
 800874e:	2100      	movs	r1, #0
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f7ff fe05 	bl	8008360 <xTimerGenericCommand>
 8008756:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d14f      	bne.n	80087fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	61bb      	str	r3, [r7, #24]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800877a:	f023 0301 	bic.w	r3, r3, #1
 800877e:	b2da      	uxtb	r2, r3
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008786:	e03a      	b.n	80087fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	617b      	str	r3, [r7, #20]
}
 80087ba:	bf00      	nop
 80087bc:	e7fe      	b.n	80087bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	18d1      	adds	r1, r2, r3
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087cc:	f7ff ff06 	bl	80085dc <prvInsertTimerInActiveList>
					break;
 80087d0:	e015      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d8:	f003 0302 	and.w	r3, r3, #2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d103      	bne.n	80087e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087e2:	f000 fbdd 	bl	8008fa0 <vPortFree>
 80087e6:	e00a      	b.n	80087fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ee:	f023 0301 	bic.w	r3, r3, #1
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087fa:	e000      	b.n	80087fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <prvProcessReceivedCommands+0x1c0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	1d39      	adds	r1, r7, #4
 8008804:	2200      	movs	r2, #0
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fc16 	bl	8007038 <xQueueReceive>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	f47f af2a 	bne.w	8008668 <prvProcessReceivedCommands+0x8>
	}
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	3730      	adds	r7, #48	; 0x30
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20001098 	.word	0x20001098

08008824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800882a:	e048      	b.n	80088be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800882c:	4b2d      	ldr	r3, [pc, #180]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008836:	4b2b      	ldr	r3, [pc, #172]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3304      	adds	r3, #4
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe f92f 	bl	8006aa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d02e      	beq.n	80088be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	4413      	add	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	429a      	cmp	r2, r3
 8008870:	d90e      	bls.n	8008890 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800887e:	4b19      	ldr	r3, [pc, #100]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3304      	adds	r3, #4
 8008886:	4619      	mov	r1, r3
 8008888:	4610      	mov	r0, r2
 800888a:	f7fe f8d4 	bl	8006a36 <vListInsert>
 800888e:	e016      	b.n	80088be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008890:	2300      	movs	r3, #0
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	2300      	movs	r3, #0
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	2100      	movs	r1, #0
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f7ff fd60 	bl	8008360 <xTimerGenericCommand>
 80088a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	603b      	str	r3, [r7, #0]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1b1      	bne.n	800882c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ce:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <prvSwitchTimerLists+0xc4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <prvSwitchTimerLists+0xc0>)
 80088d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088d6:	4a04      	ldr	r2, [pc, #16]	; (80088e8 <prvSwitchTimerLists+0xc4>)
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	6013      	str	r3, [r2, #0]
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	20001090 	.word	0x20001090
 80088e8:	20001094 	.word	0x20001094

080088ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088f2:	f000 f967 	bl	8008bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088f6:	4b15      	ldr	r3, [pc, #84]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d120      	bne.n	8008940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088fe:	4814      	ldr	r0, [pc, #80]	; (8008950 <prvCheckForValidListAndQueue+0x64>)
 8008900:	f7fe f848 	bl	8006994 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008904:	4813      	ldr	r0, [pc, #76]	; (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008906:	f7fe f845 	bl	8006994 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800890a:	4b13      	ldr	r3, [pc, #76]	; (8008958 <prvCheckForValidListAndQueue+0x6c>)
 800890c:	4a10      	ldr	r2, [pc, #64]	; (8008950 <prvCheckForValidListAndQueue+0x64>)
 800890e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008910:	4b12      	ldr	r3, [pc, #72]	; (800895c <prvCheckForValidListAndQueue+0x70>)
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008916:	2300      	movs	r3, #0
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4b11      	ldr	r3, [pc, #68]	; (8008960 <prvCheckForValidListAndQueue+0x74>)
 800891c:	4a11      	ldr	r2, [pc, #68]	; (8008964 <prvCheckForValidListAndQueue+0x78>)
 800891e:	2110      	movs	r1, #16
 8008920:	200a      	movs	r0, #10
 8008922:	f7fe f953 	bl	8006bcc <xQueueGenericCreateStatic>
 8008926:	4603      	mov	r3, r0
 8008928:	4a08      	ldr	r2, [pc, #32]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 800892a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800892c:	4b07      	ldr	r3, [pc, #28]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008934:	4b05      	ldr	r3, [pc, #20]	; (800894c <prvCheckForValidListAndQueue+0x60>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	490b      	ldr	r1, [pc, #44]	; (8008968 <prvCheckForValidListAndQueue+0x7c>)
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fd6c 	bl	8007418 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008940:	f000 f970 	bl	8008c24 <vPortExitCritical>
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20001098 	.word	0x20001098
 8008950:	20001068 	.word	0x20001068
 8008954:	2000107c 	.word	0x2000107c
 8008958:	20001090 	.word	0x20001090
 800895c:	20001094 	.word	0x20001094
 8008960:	20001144 	.word	0x20001144
 8008964:	200010a4 	.word	0x200010a4
 8008968:	0800a3d0 	.word	0x0800a3d0

0800896c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b04      	subs	r3, #4
 800897c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <pxPortInitialiseStack+0x64>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b14      	subs	r3, #20
 80089a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3b04      	subs	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f06f 0202 	mvn.w	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3b20      	subs	r3, #32
 80089c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <prvTaskExitError+0x54>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d00a      	beq.n	80089fe <prvTaskExitError+0x2a>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	e7fe      	b.n	80089fc <prvTaskExitError+0x28>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	60bb      	str	r3, [r7, #8]
}
 8008a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a12:	bf00      	nop
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0fc      	beq.n	8008a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	20000008 	.word	0x20000008
 8008a2c:	00000000 	.word	0x00000000

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	20000b68 	.word	0x20000b68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	; (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <xPortStartScheduler+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xPortStartScheduler+0x128>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xPortStartScheduler+0x12c>)
 8008ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xPortStartScheduler+0x130>)
 8008aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af4:	e009      	b.n	8008b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d0ef      	beq.n	8008af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1c3 0307 	rsb	r3, r3, #7
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00a      	beq.n	8008b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b56:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b6e:	f000 f8dd 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <xPortStartScheduler+0x13c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b78:	f000 f8fc 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b88:	f7ff ff66 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8c:	f7ff f854 	bl	8007c38 <vTaskSwitchContext>
	prvTaskExitError();
 8008b90:	f7ff ff20 	bl	80089d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000ed00 	.word	0xe000ed00
 8008ba4:	410fc271 	.word	0x410fc271
 8008ba8:	410fc270 	.word	0x410fc270
 8008bac:	e000e400 	.word	0xe000e400
 8008bb0:	20001194 	.word	0x20001194
 8008bb4:	20001198 	.word	0x20001198
 8008bb8:	e000ed20 	.word	0xe000ed20
 8008bbc:	20000008 	.word	0x20000008
 8008bc0:	e000ef34 	.word	0xe000ef34

08008bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a0d      	ldr	r2, [pc, #52]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <vPortEnterCritical+0x58>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortEnterCritical+0x5c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortEnterCritical+0x4a>
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	20000008 	.word	0x20000008
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <vPortExitCritical+0x50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <vPortExitCritical+0x24>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <vPortExitCritical+0x50>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortExitCritical+0x50>)
 8008c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <vPortExitCritical+0x42>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f383 8811 	msr	BASEPRI, r3
}
 8008c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000008 	.word	0x20000008
	...

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7fe ffc2 	bl	8007c38 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	20000b68 	.word	0x20000b68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fedf 	bl	8007ac4 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	20000000 	.word	0x20000000
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d914      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <vPortValidateInterruptPriority+0x70>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20a      	bcs.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d90a      	bls.n	8008dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	603b      	str	r3, [r7, #0]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortValidateInterruptPriority+0x60>
	}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e3f0 	.word	0xe000e3f0
 8008dfc:	20001194 	.word	0x20001194
 8008e00:	e000ed0c 	.word	0xe000ed0c
 8008e04:	20001198 	.word	0x20001198

08008e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e14:	f7fe fd9a 	bl	800794c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <pvPortMalloc+0x180>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e20:	f000 f920 	bl	8009064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <pvPortMalloc+0x184>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8093 	bne.w	8008f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01d      	beq.n	8008e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e38:	2208      	movs	r2, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0x6c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06e      	beq.n	8008f58 <pvPortMalloc+0x150>
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <pvPortMalloc+0x188>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d869      	bhi.n	8008f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e84:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8e:	e004      	b.n	8008e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <pvPortMalloc+0xa4>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d050      	beq.n	8008f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d91f      	bls.n	8008f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <pvPortMalloc+0xf8>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	613b      	str	r3, [r7, #16]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f12:	69b8      	ldr	r0, [r7, #24]
 8008f14:	f000 f908 	bl	8009128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <pvPortMalloc+0x188>)
 8008f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <pvPortMalloc+0x188>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <pvPortMalloc+0x190>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d203      	bcs.n	8008f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <pvPortMalloc+0x188>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x190>)
 8008f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x184>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <pvPortMalloc+0x194>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <pvPortMalloc+0x194>)
 8008f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f58:	f7fe fd06 	bl	8007968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <pvPortMalloc+0x174>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <pvPortMalloc+0x172>
	return pvReturn;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20004da4 	.word	0x20004da4
 8008f8c:	20004db8 	.word	0x20004db8
 8008f90:	20004da8 	.word	0x20004da8
 8008f94:	20004d9c 	.word	0x20004d9c
 8008f98:	20004dac 	.word	0x20004dac
 8008f9c:	20004db0 	.word	0x20004db0

08008fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d04d      	beq.n	800904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <vPortFree+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <vPortFree+0x44>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <vPortFree+0x62>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <vPortFree+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01e      	beq.n	800904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortFree+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe fc90 	bl	800794c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortFree+0xbc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortFree+0xbc>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f874 	bl	8009128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <vPortFree+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vPortFree+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800904a:	f7fe fc8d 	bl	8007968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20004db8 	.word	0x20004db8
 800905c:	20004da8 	.word	0x20004da8
 8009060:	20004db4 	.word	0x20004db4

08009064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800906a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <prvHeapInit+0xac>)
 8009072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00c      	beq.n	8009098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <prvHeapInit+0xac>)
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <prvHeapInit+0xb0>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <prvHeapInit+0xb0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090b0:	2208      	movs	r2, #8
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <prvHeapInit+0xb4>)
 80090c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvHeapInit+0xb4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvHeapInit+0xb4>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <prvHeapInit+0xb8>)
 80090f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <prvHeapInit+0xbc>)
 80090fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <prvHeapInit+0xc0>)
 80090fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	2000119c 	.word	0x2000119c
 8009114:	20004d9c 	.word	0x20004d9c
 8009118:	20004da4 	.word	0x20004da4
 800911c:	20004dac 	.word	0x20004dac
 8009120:	20004da8 	.word	0x20004da8
 8009124:	20004db8 	.word	0x20004db8

08009128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvInsertBlockIntoFreeList+0xac>)
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e002      	b.n	800913c <prvInsertBlockIntoFreeList+0x14>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8f7      	bhi.n	8009136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d108      	bne.n	800916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d118      	bne.n	80091b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d00d      	beq.n	80091a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e008      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20004d9c 	.word	0x20004d9c
 80091d8:	20004da4 	.word	0x20004da4

080091dc <_ZdlPvj>:
 80091dc:	f000 b811 	b.w	8009202 <_ZdlPv>

080091e0 <_Znwj>:
 80091e0:	2801      	cmp	r0, #1
 80091e2:	bf38      	it	cc
 80091e4:	2001      	movcc	r0, #1
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
 80091ea:	4620      	mov	r0, r4
 80091ec:	f000 ff60 	bl	800a0b0 <malloc>
 80091f0:	b930      	cbnz	r0, 8009200 <_Znwj+0x20>
 80091f2:	f000 f809 	bl	8009208 <_ZSt15get_new_handlerv>
 80091f6:	b908      	cbnz	r0, 80091fc <_Znwj+0x1c>
 80091f8:	f000 ff28 	bl	800a04c <abort>
 80091fc:	4780      	blx	r0
 80091fe:	e7f4      	b.n	80091ea <_Znwj+0xa>
 8009200:	bd10      	pop	{r4, pc}

08009202 <_ZdlPv>:
 8009202:	f000 bf5d 	b.w	800a0c0 <free>
	...

08009208 <_ZSt15get_new_handlerv>:
 8009208:	4b02      	ldr	r3, [pc, #8]	; (8009214 <_ZSt15get_new_handlerv+0xc>)
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	f3bf 8f5b 	dmb	ish
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20004dbc 	.word	0x20004dbc

08009218 <pow>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	ed2d 8b02 	vpush	{d8}
 800921e:	eeb0 8a40 	vmov.f32	s16, s0
 8009222:	eef0 8a60 	vmov.f32	s17, s1
 8009226:	ec55 4b11 	vmov	r4, r5, d1
 800922a:	f000 f865 	bl	80092f8 <__ieee754_pow>
 800922e:	4622      	mov	r2, r4
 8009230:	462b      	mov	r3, r5
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	ec57 6b10 	vmov	r6, r7, d0
 800923a:	f7f7 fc27 	bl	8000a8c <__aeabi_dcmpun>
 800923e:	2800      	cmp	r0, #0
 8009240:	d13b      	bne.n	80092ba <pow+0xa2>
 8009242:	ec51 0b18 	vmov	r0, r1, d8
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	f7f7 fbed 	bl	8000a28 <__aeabi_dcmpeq>
 800924e:	b1b8      	cbz	r0, 8009280 <pow+0x68>
 8009250:	2200      	movs	r2, #0
 8009252:	2300      	movs	r3, #0
 8009254:	4620      	mov	r0, r4
 8009256:	4629      	mov	r1, r5
 8009258:	f7f7 fbe6 	bl	8000a28 <__aeabi_dcmpeq>
 800925c:	2800      	cmp	r0, #0
 800925e:	d146      	bne.n	80092ee <pow+0xd6>
 8009260:	ec45 4b10 	vmov	d0, r4, r5
 8009264:	f000 fe61 	bl	8009f2a <finite>
 8009268:	b338      	cbz	r0, 80092ba <pow+0xa2>
 800926a:	2200      	movs	r2, #0
 800926c:	2300      	movs	r3, #0
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 fbe3 	bl	8000a3c <__aeabi_dcmplt>
 8009276:	b300      	cbz	r0, 80092ba <pow+0xa2>
 8009278:	f000 fef0 	bl	800a05c <__errno>
 800927c:	2322      	movs	r3, #34	; 0x22
 800927e:	e01b      	b.n	80092b8 <pow+0xa0>
 8009280:	ec47 6b10 	vmov	d0, r6, r7
 8009284:	f000 fe51 	bl	8009f2a <finite>
 8009288:	b9e0      	cbnz	r0, 80092c4 <pow+0xac>
 800928a:	eeb0 0a48 	vmov.f32	s0, s16
 800928e:	eef0 0a68 	vmov.f32	s1, s17
 8009292:	f000 fe4a 	bl	8009f2a <finite>
 8009296:	b1a8      	cbz	r0, 80092c4 <pow+0xac>
 8009298:	ec45 4b10 	vmov	d0, r4, r5
 800929c:	f000 fe45 	bl	8009f2a <finite>
 80092a0:	b180      	cbz	r0, 80092c4 <pow+0xac>
 80092a2:	4632      	mov	r2, r6
 80092a4:	463b      	mov	r3, r7
 80092a6:	4630      	mov	r0, r6
 80092a8:	4639      	mov	r1, r7
 80092aa:	f7f7 fbef 	bl	8000a8c <__aeabi_dcmpun>
 80092ae:	2800      	cmp	r0, #0
 80092b0:	d0e2      	beq.n	8009278 <pow+0x60>
 80092b2:	f000 fed3 	bl	800a05c <__errno>
 80092b6:	2321      	movs	r3, #33	; 0x21
 80092b8:	6003      	str	r3, [r0, #0]
 80092ba:	ecbd 8b02 	vpop	{d8}
 80092be:	ec47 6b10 	vmov	d0, r6, r7
 80092c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f7 fbac 	bl	8000a28 <__aeabi_dcmpeq>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d0f2      	beq.n	80092ba <pow+0xa2>
 80092d4:	eeb0 0a48 	vmov.f32	s0, s16
 80092d8:	eef0 0a68 	vmov.f32	s1, s17
 80092dc:	f000 fe25 	bl	8009f2a <finite>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d0ea      	beq.n	80092ba <pow+0xa2>
 80092e4:	ec45 4b10 	vmov	d0, r4, r5
 80092e8:	f000 fe1f 	bl	8009f2a <finite>
 80092ec:	e7c3      	b.n	8009276 <pow+0x5e>
 80092ee:	4f01      	ldr	r7, [pc, #4]	; (80092f4 <pow+0xdc>)
 80092f0:	2600      	movs	r6, #0
 80092f2:	e7e2      	b.n	80092ba <pow+0xa2>
 80092f4:	3ff00000 	.word	0x3ff00000

080092f8 <__ieee754_pow>:
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fc:	ed2d 8b06 	vpush	{d8-d10}
 8009300:	b089      	sub	sp, #36	; 0x24
 8009302:	ed8d 1b00 	vstr	d1, [sp]
 8009306:	e9dd 2900 	ldrd	r2, r9, [sp]
 800930a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800930e:	ea58 0102 	orrs.w	r1, r8, r2
 8009312:	ec57 6b10 	vmov	r6, r7, d0
 8009316:	d115      	bne.n	8009344 <__ieee754_pow+0x4c>
 8009318:	19b3      	adds	r3, r6, r6
 800931a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800931e:	4152      	adcs	r2, r2
 8009320:	4299      	cmp	r1, r3
 8009322:	4b89      	ldr	r3, [pc, #548]	; (8009548 <__ieee754_pow+0x250>)
 8009324:	4193      	sbcs	r3, r2
 8009326:	f080 84d2 	bcs.w	8009cce <__ieee754_pow+0x9d6>
 800932a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800932e:	4630      	mov	r0, r6
 8009330:	4639      	mov	r1, r7
 8009332:	f7f6 ff5b 	bl	80001ec <__adddf3>
 8009336:	ec41 0b10 	vmov	d0, r0, r1
 800933a:	b009      	add	sp, #36	; 0x24
 800933c:	ecbd 8b06 	vpop	{d8-d10}
 8009340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	4b81      	ldr	r3, [pc, #516]	; (800954c <__ieee754_pow+0x254>)
 8009346:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800934a:	429c      	cmp	r4, r3
 800934c:	ee10 aa10 	vmov	sl, s0
 8009350:	463d      	mov	r5, r7
 8009352:	dc06      	bgt.n	8009362 <__ieee754_pow+0x6a>
 8009354:	d101      	bne.n	800935a <__ieee754_pow+0x62>
 8009356:	2e00      	cmp	r6, #0
 8009358:	d1e7      	bne.n	800932a <__ieee754_pow+0x32>
 800935a:	4598      	cmp	r8, r3
 800935c:	dc01      	bgt.n	8009362 <__ieee754_pow+0x6a>
 800935e:	d10f      	bne.n	8009380 <__ieee754_pow+0x88>
 8009360:	b172      	cbz	r2, 8009380 <__ieee754_pow+0x88>
 8009362:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009366:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800936a:	ea55 050a 	orrs.w	r5, r5, sl
 800936e:	d1dc      	bne.n	800932a <__ieee754_pow+0x32>
 8009370:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009374:	18db      	adds	r3, r3, r3
 8009376:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800937a:	4152      	adcs	r2, r2
 800937c:	429d      	cmp	r5, r3
 800937e:	e7d0      	b.n	8009322 <__ieee754_pow+0x2a>
 8009380:	2d00      	cmp	r5, #0
 8009382:	da3b      	bge.n	80093fc <__ieee754_pow+0x104>
 8009384:	4b72      	ldr	r3, [pc, #456]	; (8009550 <__ieee754_pow+0x258>)
 8009386:	4598      	cmp	r8, r3
 8009388:	dc51      	bgt.n	800942e <__ieee754_pow+0x136>
 800938a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800938e:	4598      	cmp	r8, r3
 8009390:	f340 84ac 	ble.w	8009cec <__ieee754_pow+0x9f4>
 8009394:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009398:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800939c:	2b14      	cmp	r3, #20
 800939e:	dd0f      	ble.n	80093c0 <__ieee754_pow+0xc8>
 80093a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80093a4:	fa22 f103 	lsr.w	r1, r2, r3
 80093a8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ac:	4293      	cmp	r3, r2
 80093ae:	f040 849d 	bne.w	8009cec <__ieee754_pow+0x9f4>
 80093b2:	f001 0101 	and.w	r1, r1, #1
 80093b6:	f1c1 0302 	rsb	r3, r1, #2
 80093ba:	9304      	str	r3, [sp, #16]
 80093bc:	b182      	cbz	r2, 80093e0 <__ieee754_pow+0xe8>
 80093be:	e05f      	b.n	8009480 <__ieee754_pow+0x188>
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	d15b      	bne.n	800947c <__ieee754_pow+0x184>
 80093c4:	f1c3 0314 	rsb	r3, r3, #20
 80093c8:	fa48 f103 	asr.w	r1, r8, r3
 80093cc:	fa01 f303 	lsl.w	r3, r1, r3
 80093d0:	4543      	cmp	r3, r8
 80093d2:	f040 8488 	bne.w	8009ce6 <__ieee754_pow+0x9ee>
 80093d6:	f001 0101 	and.w	r1, r1, #1
 80093da:	f1c1 0302 	rsb	r3, r1, #2
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	4b5c      	ldr	r3, [pc, #368]	; (8009554 <__ieee754_pow+0x25c>)
 80093e2:	4598      	cmp	r8, r3
 80093e4:	d132      	bne.n	800944c <__ieee754_pow+0x154>
 80093e6:	f1b9 0f00 	cmp.w	r9, #0
 80093ea:	f280 8478 	bge.w	8009cde <__ieee754_pow+0x9e6>
 80093ee:	4959      	ldr	r1, [pc, #356]	; (8009554 <__ieee754_pow+0x25c>)
 80093f0:	4632      	mov	r2, r6
 80093f2:	463b      	mov	r3, r7
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f7 f9d9 	bl	80007ac <__aeabi_ddiv>
 80093fa:	e79c      	b.n	8009336 <__ieee754_pow+0x3e>
 80093fc:	2300      	movs	r3, #0
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	2a00      	cmp	r2, #0
 8009402:	d13d      	bne.n	8009480 <__ieee754_pow+0x188>
 8009404:	4b51      	ldr	r3, [pc, #324]	; (800954c <__ieee754_pow+0x254>)
 8009406:	4598      	cmp	r8, r3
 8009408:	d1ea      	bne.n	80093e0 <__ieee754_pow+0xe8>
 800940a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800940e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009412:	ea53 030a 	orrs.w	r3, r3, sl
 8009416:	f000 845a 	beq.w	8009cce <__ieee754_pow+0x9d6>
 800941a:	4b4f      	ldr	r3, [pc, #316]	; (8009558 <__ieee754_pow+0x260>)
 800941c:	429c      	cmp	r4, r3
 800941e:	dd08      	ble.n	8009432 <__ieee754_pow+0x13a>
 8009420:	f1b9 0f00 	cmp.w	r9, #0
 8009424:	f2c0 8457 	blt.w	8009cd6 <__ieee754_pow+0x9de>
 8009428:	e9dd 0100 	ldrd	r0, r1, [sp]
 800942c:	e783      	b.n	8009336 <__ieee754_pow+0x3e>
 800942e:	2302      	movs	r3, #2
 8009430:	e7e5      	b.n	80093fe <__ieee754_pow+0x106>
 8009432:	f1b9 0f00 	cmp.w	r9, #0
 8009436:	f04f 0000 	mov.w	r0, #0
 800943a:	f04f 0100 	mov.w	r1, #0
 800943e:	f6bf af7a 	bge.w	8009336 <__ieee754_pow+0x3e>
 8009442:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009446:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800944a:	e774      	b.n	8009336 <__ieee754_pow+0x3e>
 800944c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009450:	d106      	bne.n	8009460 <__ieee754_pow+0x168>
 8009452:	4632      	mov	r2, r6
 8009454:	463b      	mov	r3, r7
 8009456:	4630      	mov	r0, r6
 8009458:	4639      	mov	r1, r7
 800945a:	f7f7 f87d 	bl	8000558 <__aeabi_dmul>
 800945e:	e76a      	b.n	8009336 <__ieee754_pow+0x3e>
 8009460:	4b3e      	ldr	r3, [pc, #248]	; (800955c <__ieee754_pow+0x264>)
 8009462:	4599      	cmp	r9, r3
 8009464:	d10c      	bne.n	8009480 <__ieee754_pow+0x188>
 8009466:	2d00      	cmp	r5, #0
 8009468:	db0a      	blt.n	8009480 <__ieee754_pow+0x188>
 800946a:	ec47 6b10 	vmov	d0, r6, r7
 800946e:	b009      	add	sp, #36	; 0x24
 8009470:	ecbd 8b06 	vpop	{d8-d10}
 8009474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009478:	f000 bc6c 	b.w	8009d54 <__ieee754_sqrt>
 800947c:	2300      	movs	r3, #0
 800947e:	9304      	str	r3, [sp, #16]
 8009480:	ec47 6b10 	vmov	d0, r6, r7
 8009484:	f000 fd48 	bl	8009f18 <fabs>
 8009488:	ec51 0b10 	vmov	r0, r1, d0
 800948c:	f1ba 0f00 	cmp.w	sl, #0
 8009490:	d129      	bne.n	80094e6 <__ieee754_pow+0x1ee>
 8009492:	b124      	cbz	r4, 800949e <__ieee754_pow+0x1a6>
 8009494:	4b2f      	ldr	r3, [pc, #188]	; (8009554 <__ieee754_pow+0x25c>)
 8009496:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800949a:	429a      	cmp	r2, r3
 800949c:	d123      	bne.n	80094e6 <__ieee754_pow+0x1ee>
 800949e:	f1b9 0f00 	cmp.w	r9, #0
 80094a2:	da05      	bge.n	80094b0 <__ieee754_pow+0x1b8>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	2000      	movs	r0, #0
 80094aa:	492a      	ldr	r1, [pc, #168]	; (8009554 <__ieee754_pow+0x25c>)
 80094ac:	f7f7 f97e 	bl	80007ac <__aeabi_ddiv>
 80094b0:	2d00      	cmp	r5, #0
 80094b2:	f6bf af40 	bge.w	8009336 <__ieee754_pow+0x3e>
 80094b6:	9b04      	ldr	r3, [sp, #16]
 80094b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094c0:	4323      	orrs	r3, r4
 80094c2:	d108      	bne.n	80094d6 <__ieee754_pow+0x1de>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4610      	mov	r0, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	f7f6 fe8c 	bl	80001e8 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	e78f      	b.n	80093f6 <__ieee754_pow+0xfe>
 80094d6:	9b04      	ldr	r3, [sp, #16]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	f47f af2c 	bne.w	8009336 <__ieee754_pow+0x3e>
 80094de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094e2:	4619      	mov	r1, r3
 80094e4:	e727      	b.n	8009336 <__ieee754_pow+0x3e>
 80094e6:	0feb      	lsrs	r3, r5, #31
 80094e8:	3b01      	subs	r3, #1
 80094ea:	9306      	str	r3, [sp, #24]
 80094ec:	9a06      	ldr	r2, [sp, #24]
 80094ee:	9b04      	ldr	r3, [sp, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	d102      	bne.n	80094fa <__ieee754_pow+0x202>
 80094f4:	4632      	mov	r2, r6
 80094f6:	463b      	mov	r3, r7
 80094f8:	e7e6      	b.n	80094c8 <__ieee754_pow+0x1d0>
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <__ieee754_pow+0x268>)
 80094fc:	4598      	cmp	r8, r3
 80094fe:	f340 80fb 	ble.w	80096f8 <__ieee754_pow+0x400>
 8009502:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009506:	4598      	cmp	r8, r3
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <__ieee754_pow+0x260>)
 800950a:	dd0c      	ble.n	8009526 <__ieee754_pow+0x22e>
 800950c:	429c      	cmp	r4, r3
 800950e:	dc0f      	bgt.n	8009530 <__ieee754_pow+0x238>
 8009510:	f1b9 0f00 	cmp.w	r9, #0
 8009514:	da0f      	bge.n	8009536 <__ieee754_pow+0x23e>
 8009516:	2000      	movs	r0, #0
 8009518:	b009      	add	sp, #36	; 0x24
 800951a:	ecbd 8b06 	vpop	{d8-d10}
 800951e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009522:	f000 bcf0 	b.w	8009f06 <__math_oflow>
 8009526:	429c      	cmp	r4, r3
 8009528:	dbf2      	blt.n	8009510 <__ieee754_pow+0x218>
 800952a:	4b0a      	ldr	r3, [pc, #40]	; (8009554 <__ieee754_pow+0x25c>)
 800952c:	429c      	cmp	r4, r3
 800952e:	dd19      	ble.n	8009564 <__ieee754_pow+0x26c>
 8009530:	f1b9 0f00 	cmp.w	r9, #0
 8009534:	dcef      	bgt.n	8009516 <__ieee754_pow+0x21e>
 8009536:	2000      	movs	r0, #0
 8009538:	b009      	add	sp, #36	; 0x24
 800953a:	ecbd 8b06 	vpop	{d8-d10}
 800953e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009542:	f000 bcd7 	b.w	8009ef4 <__math_uflow>
 8009546:	bf00      	nop
 8009548:	fff00000 	.word	0xfff00000
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	433fffff 	.word	0x433fffff
 8009554:	3ff00000 	.word	0x3ff00000
 8009558:	3fefffff 	.word	0x3fefffff
 800955c:	3fe00000 	.word	0x3fe00000
 8009560:	41e00000 	.word	0x41e00000
 8009564:	4b60      	ldr	r3, [pc, #384]	; (80096e8 <__ieee754_pow+0x3f0>)
 8009566:	2200      	movs	r2, #0
 8009568:	f7f6 fe3e 	bl	80001e8 <__aeabi_dsub>
 800956c:	a354      	add	r3, pc, #336	; (adr r3, 80096c0 <__ieee754_pow+0x3c8>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	4604      	mov	r4, r0
 8009574:	460d      	mov	r5, r1
 8009576:	f7f6 ffef 	bl	8000558 <__aeabi_dmul>
 800957a:	a353      	add	r3, pc, #332	; (adr r3, 80096c8 <__ieee754_pow+0x3d0>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f7f6 ffe6 	bl	8000558 <__aeabi_dmul>
 800958c:	4b57      	ldr	r3, [pc, #348]	; (80096ec <__ieee754_pow+0x3f4>)
 800958e:	4682      	mov	sl, r0
 8009590:	468b      	mov	fp, r1
 8009592:	2200      	movs	r2, #0
 8009594:	4620      	mov	r0, r4
 8009596:	4629      	mov	r1, r5
 8009598:	f7f6 ffde 	bl	8000558 <__aeabi_dmul>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	a14b      	add	r1, pc, #300	; (adr r1, 80096d0 <__ieee754_pow+0x3d8>)
 80095a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a6:	f7f6 fe1f 	bl	80001e8 <__aeabi_dsub>
 80095aa:	4622      	mov	r2, r4
 80095ac:	462b      	mov	r3, r5
 80095ae:	f7f6 ffd3 	bl	8000558 <__aeabi_dmul>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	2000      	movs	r0, #0
 80095b8:	494d      	ldr	r1, [pc, #308]	; (80096f0 <__ieee754_pow+0x3f8>)
 80095ba:	f7f6 fe15 	bl	80001e8 <__aeabi_dsub>
 80095be:	4622      	mov	r2, r4
 80095c0:	4680      	mov	r8, r0
 80095c2:	4689      	mov	r9, r1
 80095c4:	462b      	mov	r3, r5
 80095c6:	4620      	mov	r0, r4
 80095c8:	4629      	mov	r1, r5
 80095ca:	f7f6 ffc5 	bl	8000558 <__aeabi_dmul>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4640      	mov	r0, r8
 80095d4:	4649      	mov	r1, r9
 80095d6:	f7f6 ffbf 	bl	8000558 <__aeabi_dmul>
 80095da:	a33f      	add	r3, pc, #252	; (adr r3, 80096d8 <__ieee754_pow+0x3e0>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f6 ffba 	bl	8000558 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4650      	mov	r0, sl
 80095ea:	4659      	mov	r1, fp
 80095ec:	f7f6 fdfc 	bl	80001e8 <__aeabi_dsub>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4680      	mov	r8, r0
 80095f6:	4689      	mov	r9, r1
 80095f8:	4630      	mov	r0, r6
 80095fa:	4639      	mov	r1, r7
 80095fc:	f7f6 fdf6 	bl	80001ec <__adddf3>
 8009600:	2000      	movs	r0, #0
 8009602:	4632      	mov	r2, r6
 8009604:	463b      	mov	r3, r7
 8009606:	4604      	mov	r4, r0
 8009608:	460d      	mov	r5, r1
 800960a:	f7f6 fded 	bl	80001e8 <__aeabi_dsub>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 fde7 	bl	80001e8 <__aeabi_dsub>
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	9a06      	ldr	r2, [sp, #24]
 800961e:	3b01      	subs	r3, #1
 8009620:	4313      	orrs	r3, r2
 8009622:	4682      	mov	sl, r0
 8009624:	468b      	mov	fp, r1
 8009626:	f040 81e7 	bne.w	80099f8 <__ieee754_pow+0x700>
 800962a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80096e0 <__ieee754_pow+0x3e8>
 800962e:	eeb0 8a47 	vmov.f32	s16, s14
 8009632:	eef0 8a67 	vmov.f32	s17, s15
 8009636:	e9dd 6700 	ldrd	r6, r7, [sp]
 800963a:	2600      	movs	r6, #0
 800963c:	4632      	mov	r2, r6
 800963e:	463b      	mov	r3, r7
 8009640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009644:	f7f6 fdd0 	bl	80001e8 <__aeabi_dsub>
 8009648:	4622      	mov	r2, r4
 800964a:	462b      	mov	r3, r5
 800964c:	f7f6 ff84 	bl	8000558 <__aeabi_dmul>
 8009650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009654:	4680      	mov	r8, r0
 8009656:	4689      	mov	r9, r1
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	f7f6 ff7c 	bl	8000558 <__aeabi_dmul>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4640      	mov	r0, r8
 8009666:	4649      	mov	r1, r9
 8009668:	f7f6 fdc0 	bl	80001ec <__adddf3>
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	4680      	mov	r8, r0
 8009672:	4689      	mov	r9, r1
 8009674:	4620      	mov	r0, r4
 8009676:	4629      	mov	r1, r5
 8009678:	f7f6 ff6e 	bl	8000558 <__aeabi_dmul>
 800967c:	460b      	mov	r3, r1
 800967e:	4604      	mov	r4, r0
 8009680:	460d      	mov	r5, r1
 8009682:	4602      	mov	r2, r0
 8009684:	4649      	mov	r1, r9
 8009686:	4640      	mov	r0, r8
 8009688:	f7f6 fdb0 	bl	80001ec <__adddf3>
 800968c:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <__ieee754_pow+0x3fc>)
 800968e:	4299      	cmp	r1, r3
 8009690:	ec45 4b19 	vmov	d9, r4, r5
 8009694:	4606      	mov	r6, r0
 8009696:	460f      	mov	r7, r1
 8009698:	468b      	mov	fp, r1
 800969a:	f340 82f1 	ble.w	8009c80 <__ieee754_pow+0x988>
 800969e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80096a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80096a6:	4303      	orrs	r3, r0
 80096a8:	f000 81e4 	beq.w	8009a74 <__ieee754_pow+0x77c>
 80096ac:	ec51 0b18 	vmov	r0, r1, d8
 80096b0:	2200      	movs	r2, #0
 80096b2:	2300      	movs	r3, #0
 80096b4:	f7f7 f9c2 	bl	8000a3c <__aeabi_dcmplt>
 80096b8:	3800      	subs	r0, #0
 80096ba:	bf18      	it	ne
 80096bc:	2001      	movne	r0, #1
 80096be:	e72b      	b.n	8009518 <__ieee754_pow+0x220>
 80096c0:	60000000 	.word	0x60000000
 80096c4:	3ff71547 	.word	0x3ff71547
 80096c8:	f85ddf44 	.word	0xf85ddf44
 80096cc:	3e54ae0b 	.word	0x3e54ae0b
 80096d0:	55555555 	.word	0x55555555
 80096d4:	3fd55555 	.word	0x3fd55555
 80096d8:	652b82fe 	.word	0x652b82fe
 80096dc:	3ff71547 	.word	0x3ff71547
 80096e0:	00000000 	.word	0x00000000
 80096e4:	bff00000 	.word	0xbff00000
 80096e8:	3ff00000 	.word	0x3ff00000
 80096ec:	3fd00000 	.word	0x3fd00000
 80096f0:	3fe00000 	.word	0x3fe00000
 80096f4:	408fffff 	.word	0x408fffff
 80096f8:	4bd5      	ldr	r3, [pc, #852]	; (8009a50 <__ieee754_pow+0x758>)
 80096fa:	402b      	ands	r3, r5
 80096fc:	2200      	movs	r2, #0
 80096fe:	b92b      	cbnz	r3, 800970c <__ieee754_pow+0x414>
 8009700:	4bd4      	ldr	r3, [pc, #848]	; (8009a54 <__ieee754_pow+0x75c>)
 8009702:	f7f6 ff29 	bl	8000558 <__aeabi_dmul>
 8009706:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800970a:	460c      	mov	r4, r1
 800970c:	1523      	asrs	r3, r4, #20
 800970e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009712:	4413      	add	r3, r2
 8009714:	9305      	str	r3, [sp, #20]
 8009716:	4bd0      	ldr	r3, [pc, #832]	; (8009a58 <__ieee754_pow+0x760>)
 8009718:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800971c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009720:	429c      	cmp	r4, r3
 8009722:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009726:	dd08      	ble.n	800973a <__ieee754_pow+0x442>
 8009728:	4bcc      	ldr	r3, [pc, #816]	; (8009a5c <__ieee754_pow+0x764>)
 800972a:	429c      	cmp	r4, r3
 800972c:	f340 8162 	ble.w	80099f4 <__ieee754_pow+0x6fc>
 8009730:	9b05      	ldr	r3, [sp, #20]
 8009732:	3301      	adds	r3, #1
 8009734:	9305      	str	r3, [sp, #20]
 8009736:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800973a:	2400      	movs	r4, #0
 800973c:	00e3      	lsls	r3, r4, #3
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	4bc7      	ldr	r3, [pc, #796]	; (8009a60 <__ieee754_pow+0x768>)
 8009742:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009746:	ed93 7b00 	vldr	d7, [r3]
 800974a:	4629      	mov	r1, r5
 800974c:	ec53 2b17 	vmov	r2, r3, d7
 8009750:	eeb0 9a47 	vmov.f32	s18, s14
 8009754:	eef0 9a67 	vmov.f32	s19, s15
 8009758:	4682      	mov	sl, r0
 800975a:	f7f6 fd45 	bl	80001e8 <__aeabi_dsub>
 800975e:	4652      	mov	r2, sl
 8009760:	4606      	mov	r6, r0
 8009762:	460f      	mov	r7, r1
 8009764:	462b      	mov	r3, r5
 8009766:	ec51 0b19 	vmov	r0, r1, d9
 800976a:	f7f6 fd3f 	bl	80001ec <__adddf3>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	2000      	movs	r0, #0
 8009774:	49bb      	ldr	r1, [pc, #748]	; (8009a64 <__ieee754_pow+0x76c>)
 8009776:	f7f7 f819 	bl	80007ac <__aeabi_ddiv>
 800977a:	ec41 0b1a 	vmov	d10, r0, r1
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4630      	mov	r0, r6
 8009784:	4639      	mov	r1, r7
 8009786:	f7f6 fee7 	bl	8000558 <__aeabi_dmul>
 800978a:	2300      	movs	r3, #0
 800978c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009790:	9302      	str	r3, [sp, #8]
 8009792:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009796:	46ab      	mov	fp, r5
 8009798:	106d      	asrs	r5, r5, #1
 800979a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800979e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80097a2:	ec41 0b18 	vmov	d8, r0, r1
 80097a6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80097aa:	2200      	movs	r2, #0
 80097ac:	4640      	mov	r0, r8
 80097ae:	4649      	mov	r1, r9
 80097b0:	4614      	mov	r4, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	f7f6 fed0 	bl	8000558 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	f7f6 fd12 	bl	80001e8 <__aeabi_dsub>
 80097c4:	ec53 2b19 	vmov	r2, r3, d9
 80097c8:	4606      	mov	r6, r0
 80097ca:	460f      	mov	r7, r1
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f7f6 fd0a 	bl	80001e8 <__aeabi_dsub>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4650      	mov	r0, sl
 80097da:	4659      	mov	r1, fp
 80097dc:	f7f6 fd04 	bl	80001e8 <__aeabi_dsub>
 80097e0:	4642      	mov	r2, r8
 80097e2:	464b      	mov	r3, r9
 80097e4:	f7f6 feb8 	bl	8000558 <__aeabi_dmul>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f6 fcfa 	bl	80001e8 <__aeabi_dsub>
 80097f4:	ec53 2b1a 	vmov	r2, r3, d10
 80097f8:	f7f6 feae 	bl	8000558 <__aeabi_dmul>
 80097fc:	ec53 2b18 	vmov	r2, r3, d8
 8009800:	ec41 0b19 	vmov	d9, r0, r1
 8009804:	ec51 0b18 	vmov	r0, r1, d8
 8009808:	f7f6 fea6 	bl	8000558 <__aeabi_dmul>
 800980c:	a37c      	add	r3, pc, #496	; (adr r3, 8009a00 <__ieee754_pow+0x708>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	4604      	mov	r4, r0
 8009814:	460d      	mov	r5, r1
 8009816:	f7f6 fe9f 	bl	8000558 <__aeabi_dmul>
 800981a:	a37b      	add	r3, pc, #492	; (adr r3, 8009a08 <__ieee754_pow+0x710>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 fce4 	bl	80001ec <__adddf3>
 8009824:	4622      	mov	r2, r4
 8009826:	462b      	mov	r3, r5
 8009828:	f7f6 fe96 	bl	8000558 <__aeabi_dmul>
 800982c:	a378      	add	r3, pc, #480	; (adr r3, 8009a10 <__ieee754_pow+0x718>)
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	f7f6 fcdb 	bl	80001ec <__adddf3>
 8009836:	4622      	mov	r2, r4
 8009838:	462b      	mov	r3, r5
 800983a:	f7f6 fe8d 	bl	8000558 <__aeabi_dmul>
 800983e:	a376      	add	r3, pc, #472	; (adr r3, 8009a18 <__ieee754_pow+0x720>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fcd2 	bl	80001ec <__adddf3>
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	f7f6 fe84 	bl	8000558 <__aeabi_dmul>
 8009850:	a373      	add	r3, pc, #460	; (adr r3, 8009a20 <__ieee754_pow+0x728>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f7f6 fcc9 	bl	80001ec <__adddf3>
 800985a:	4622      	mov	r2, r4
 800985c:	462b      	mov	r3, r5
 800985e:	f7f6 fe7b 	bl	8000558 <__aeabi_dmul>
 8009862:	a371      	add	r3, pc, #452	; (adr r3, 8009a28 <__ieee754_pow+0x730>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f7f6 fcc0 	bl	80001ec <__adddf3>
 800986c:	4622      	mov	r2, r4
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	462b      	mov	r3, r5
 8009874:	4620      	mov	r0, r4
 8009876:	4629      	mov	r1, r5
 8009878:	f7f6 fe6e 	bl	8000558 <__aeabi_dmul>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f6 fe68 	bl	8000558 <__aeabi_dmul>
 8009888:	4642      	mov	r2, r8
 800988a:	4604      	mov	r4, r0
 800988c:	460d      	mov	r5, r1
 800988e:	464b      	mov	r3, r9
 8009890:	ec51 0b18 	vmov	r0, r1, d8
 8009894:	f7f6 fcaa 	bl	80001ec <__adddf3>
 8009898:	ec53 2b19 	vmov	r2, r3, d9
 800989c:	f7f6 fe5c 	bl	8000558 <__aeabi_dmul>
 80098a0:	4622      	mov	r2, r4
 80098a2:	462b      	mov	r3, r5
 80098a4:	f7f6 fca2 	bl	80001ec <__adddf3>
 80098a8:	4642      	mov	r2, r8
 80098aa:	4682      	mov	sl, r0
 80098ac:	468b      	mov	fp, r1
 80098ae:	464b      	mov	r3, r9
 80098b0:	4640      	mov	r0, r8
 80098b2:	4649      	mov	r1, r9
 80098b4:	f7f6 fe50 	bl	8000558 <__aeabi_dmul>
 80098b8:	4b6b      	ldr	r3, [pc, #428]	; (8009a68 <__ieee754_pow+0x770>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	f7f6 fc94 	bl	80001ec <__adddf3>
 80098c4:	4652      	mov	r2, sl
 80098c6:	465b      	mov	r3, fp
 80098c8:	f7f6 fc90 	bl	80001ec <__adddf3>
 80098cc:	2000      	movs	r0, #0
 80098ce:	4604      	mov	r4, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f6 fe3d 	bl	8000558 <__aeabi_dmul>
 80098de:	4b62      	ldr	r3, [pc, #392]	; (8009a68 <__ieee754_pow+0x770>)
 80098e0:	4680      	mov	r8, r0
 80098e2:	4689      	mov	r9, r1
 80098e4:	2200      	movs	r2, #0
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f6 fc7d 	bl	80001e8 <__aeabi_dsub>
 80098ee:	4632      	mov	r2, r6
 80098f0:	463b      	mov	r3, r7
 80098f2:	f7f6 fc79 	bl	80001e8 <__aeabi_dsub>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4650      	mov	r0, sl
 80098fc:	4659      	mov	r1, fp
 80098fe:	f7f6 fc73 	bl	80001e8 <__aeabi_dsub>
 8009902:	ec53 2b18 	vmov	r2, r3, d8
 8009906:	f7f6 fe27 	bl	8000558 <__aeabi_dmul>
 800990a:	4622      	mov	r2, r4
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	462b      	mov	r3, r5
 8009912:	ec51 0b19 	vmov	r0, r1, d9
 8009916:	f7f6 fe1f 	bl	8000558 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fc63 	bl	80001ec <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4640      	mov	r0, r8
 8009930:	4649      	mov	r1, r9
 8009932:	f7f6 fc5b 	bl	80001ec <__adddf3>
 8009936:	a33e      	add	r3, pc, #248	; (adr r3, 8009a30 <__ieee754_pow+0x738>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	2000      	movs	r0, #0
 800993e:	4604      	mov	r4, r0
 8009940:	460d      	mov	r5, r1
 8009942:	f7f6 fe09 	bl	8000558 <__aeabi_dmul>
 8009946:	4642      	mov	r2, r8
 8009948:	ec41 0b18 	vmov	d8, r0, r1
 800994c:	464b      	mov	r3, r9
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f7f6 fc49 	bl	80001e8 <__aeabi_dsub>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 fc43 	bl	80001e8 <__aeabi_dsub>
 8009962:	a335      	add	r3, pc, #212	; (adr r3, 8009a38 <__ieee754_pow+0x740>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fdf6 	bl	8000558 <__aeabi_dmul>
 800996c:	a334      	add	r3, pc, #208	; (adr r3, 8009a40 <__ieee754_pow+0x748>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	4606      	mov	r6, r0
 8009974:	460f      	mov	r7, r1
 8009976:	4620      	mov	r0, r4
 8009978:	4629      	mov	r1, r5
 800997a:	f7f6 fded 	bl	8000558 <__aeabi_dmul>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4630      	mov	r0, r6
 8009984:	4639      	mov	r1, r7
 8009986:	f7f6 fc31 	bl	80001ec <__adddf3>
 800998a:	9a07      	ldr	r2, [sp, #28]
 800998c:	4b37      	ldr	r3, [pc, #220]	; (8009a6c <__ieee754_pow+0x774>)
 800998e:	4413      	add	r3, r2
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fc2a 	bl	80001ec <__adddf3>
 8009998:	4682      	mov	sl, r0
 800999a:	9805      	ldr	r0, [sp, #20]
 800999c:	468b      	mov	fp, r1
 800999e:	f7f6 fd71 	bl	8000484 <__aeabi_i2d>
 80099a2:	9a07      	ldr	r2, [sp, #28]
 80099a4:	4b32      	ldr	r3, [pc, #200]	; (8009a70 <__ieee754_pow+0x778>)
 80099a6:	4413      	add	r3, r2
 80099a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099ac:	4606      	mov	r6, r0
 80099ae:	460f      	mov	r7, r1
 80099b0:	4652      	mov	r2, sl
 80099b2:	465b      	mov	r3, fp
 80099b4:	ec51 0b18 	vmov	r0, r1, d8
 80099b8:	f7f6 fc18 	bl	80001ec <__adddf3>
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	f7f6 fc14 	bl	80001ec <__adddf3>
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	f7f6 fc10 	bl	80001ec <__adddf3>
 80099cc:	2000      	movs	r0, #0
 80099ce:	4632      	mov	r2, r6
 80099d0:	463b      	mov	r3, r7
 80099d2:	4604      	mov	r4, r0
 80099d4:	460d      	mov	r5, r1
 80099d6:	f7f6 fc07 	bl	80001e8 <__aeabi_dsub>
 80099da:	4642      	mov	r2, r8
 80099dc:	464b      	mov	r3, r9
 80099de:	f7f6 fc03 	bl	80001e8 <__aeabi_dsub>
 80099e2:	ec53 2b18 	vmov	r2, r3, d8
 80099e6:	f7f6 fbff 	bl	80001e8 <__aeabi_dsub>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4650      	mov	r0, sl
 80099f0:	4659      	mov	r1, fp
 80099f2:	e610      	b.n	8009616 <__ieee754_pow+0x31e>
 80099f4:	2401      	movs	r4, #1
 80099f6:	e6a1      	b.n	800973c <__ieee754_pow+0x444>
 80099f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009a48 <__ieee754_pow+0x750>
 80099fc:	e617      	b.n	800962e <__ieee754_pow+0x336>
 80099fe:	bf00      	nop
 8009a00:	4a454eef 	.word	0x4a454eef
 8009a04:	3fca7e28 	.word	0x3fca7e28
 8009a08:	93c9db65 	.word	0x93c9db65
 8009a0c:	3fcd864a 	.word	0x3fcd864a
 8009a10:	a91d4101 	.word	0xa91d4101
 8009a14:	3fd17460 	.word	0x3fd17460
 8009a18:	518f264d 	.word	0x518f264d
 8009a1c:	3fd55555 	.word	0x3fd55555
 8009a20:	db6fabff 	.word	0xdb6fabff
 8009a24:	3fdb6db6 	.word	0x3fdb6db6
 8009a28:	33333303 	.word	0x33333303
 8009a2c:	3fe33333 	.word	0x3fe33333
 8009a30:	e0000000 	.word	0xe0000000
 8009a34:	3feec709 	.word	0x3feec709
 8009a38:	dc3a03fd 	.word	0xdc3a03fd
 8009a3c:	3feec709 	.word	0x3feec709
 8009a40:	145b01f5 	.word	0x145b01f5
 8009a44:	be3e2fe0 	.word	0xbe3e2fe0
 8009a48:	00000000 	.word	0x00000000
 8009a4c:	3ff00000 	.word	0x3ff00000
 8009a50:	7ff00000 	.word	0x7ff00000
 8009a54:	43400000 	.word	0x43400000
 8009a58:	0003988e 	.word	0x0003988e
 8009a5c:	000bb679 	.word	0x000bb679
 8009a60:	0800a460 	.word	0x0800a460
 8009a64:	3ff00000 	.word	0x3ff00000
 8009a68:	40080000 	.word	0x40080000
 8009a6c:	0800a480 	.word	0x0800a480
 8009a70:	0800a470 	.word	0x0800a470
 8009a74:	a3b5      	add	r3, pc, #724	; (adr r3, 8009d4c <__ieee754_pow+0xa54>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	4640      	mov	r0, r8
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	f7f6 fbb5 	bl	80001ec <__adddf3>
 8009a82:	4622      	mov	r2, r4
 8009a84:	ec41 0b1a 	vmov	d10, r0, r1
 8009a88:	462b      	mov	r3, r5
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	f7f6 fbab 	bl	80001e8 <__aeabi_dsub>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	ec51 0b1a 	vmov	r0, r1, d10
 8009a9a:	f7f6 ffed 	bl	8000a78 <__aeabi_dcmpgt>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f47f ae04 	bne.w	80096ac <__ieee754_pow+0x3b4>
 8009aa4:	4aa4      	ldr	r2, [pc, #656]	; (8009d38 <__ieee754_pow+0xa40>)
 8009aa6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	f340 8108 	ble.w	8009cc0 <__ieee754_pow+0x9c8>
 8009ab0:	151b      	asrs	r3, r3, #20
 8009ab2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009ab6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009aba:	fa4a f303 	asr.w	r3, sl, r3
 8009abe:	445b      	add	r3, fp
 8009ac0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009ac4:	4e9d      	ldr	r6, [pc, #628]	; (8009d3c <__ieee754_pow+0xa44>)
 8009ac6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009aca:	4116      	asrs	r6, r2
 8009acc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	ea23 0106 	bic.w	r1, r3, r6
 8009ad6:	f1c2 0214 	rsb	r2, r2, #20
 8009ada:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009ade:	fa4a fa02 	asr.w	sl, sl, r2
 8009ae2:	f1bb 0f00 	cmp.w	fp, #0
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4620      	mov	r0, r4
 8009aec:	4629      	mov	r1, r5
 8009aee:	bfb8      	it	lt
 8009af0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009af4:	f7f6 fb78 	bl	80001e8 <__aeabi_dsub>
 8009af8:	ec41 0b19 	vmov	d9, r0, r1
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	ec51 0b19 	vmov	r0, r1, d9
 8009b04:	f7f6 fb72 	bl	80001ec <__adddf3>
 8009b08:	a37b      	add	r3, pc, #492	; (adr r3, 8009cf8 <__ieee754_pow+0xa00>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	2000      	movs	r0, #0
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	f7f6 fd20 	bl	8000558 <__aeabi_dmul>
 8009b18:	ec53 2b19 	vmov	r2, r3, d9
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460f      	mov	r7, r1
 8009b20:	4620      	mov	r0, r4
 8009b22:	4629      	mov	r1, r5
 8009b24:	f7f6 fb60 	bl	80001e8 <__aeabi_dsub>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	4649      	mov	r1, r9
 8009b30:	f7f6 fb5a 	bl	80001e8 <__aeabi_dsub>
 8009b34:	a372      	add	r3, pc, #456	; (adr r3, 8009d00 <__ieee754_pow+0xa08>)
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f7f6 fd0d 	bl	8000558 <__aeabi_dmul>
 8009b3e:	a372      	add	r3, pc, #456	; (adr r3, 8009d08 <__ieee754_pow+0xa10>)
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	4680      	mov	r8, r0
 8009b46:	4689      	mov	r9, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fd04 	bl	8000558 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4640      	mov	r0, r8
 8009b56:	4649      	mov	r1, r9
 8009b58:	f7f6 fb48 	bl	80001ec <__adddf3>
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	460d      	mov	r5, r1
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4630      	mov	r0, r6
 8009b66:	4639      	mov	r1, r7
 8009b68:	f7f6 fb40 	bl	80001ec <__adddf3>
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	463b      	mov	r3, r7
 8009b70:	4680      	mov	r8, r0
 8009b72:	4689      	mov	r9, r1
 8009b74:	f7f6 fb38 	bl	80001e8 <__aeabi_dsub>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 fb32 	bl	80001e8 <__aeabi_dsub>
 8009b84:	4642      	mov	r2, r8
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	4649      	mov	r1, r9
 8009b90:	f7f6 fce2 	bl	8000558 <__aeabi_dmul>
 8009b94:	a35e      	add	r3, pc, #376	; (adr r3, 8009d10 <__ieee754_pow+0xa18>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	f7f6 fcdb 	bl	8000558 <__aeabi_dmul>
 8009ba2:	a35d      	add	r3, pc, #372	; (adr r3, 8009d18 <__ieee754_pow+0xa20>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f7f6 fb1e 	bl	80001e8 <__aeabi_dsub>
 8009bac:	4622      	mov	r2, r4
 8009bae:	462b      	mov	r3, r5
 8009bb0:	f7f6 fcd2 	bl	8000558 <__aeabi_dmul>
 8009bb4:	a35a      	add	r3, pc, #360	; (adr r3, 8009d20 <__ieee754_pow+0xa28>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	f7f6 fb17 	bl	80001ec <__adddf3>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	f7f6 fcc9 	bl	8000558 <__aeabi_dmul>
 8009bc6:	a358      	add	r3, pc, #352	; (adr r3, 8009d28 <__ieee754_pow+0xa30>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	f7f6 fb0c 	bl	80001e8 <__aeabi_dsub>
 8009bd0:	4622      	mov	r2, r4
 8009bd2:	462b      	mov	r3, r5
 8009bd4:	f7f6 fcc0 	bl	8000558 <__aeabi_dmul>
 8009bd8:	a355      	add	r3, pc, #340	; (adr r3, 8009d30 <__ieee754_pow+0xa38>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 fb05 	bl	80001ec <__adddf3>
 8009be2:	4622      	mov	r2, r4
 8009be4:	462b      	mov	r3, r5
 8009be6:	f7f6 fcb7 	bl	8000558 <__aeabi_dmul>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	f7f6 faf9 	bl	80001e8 <__aeabi_dsub>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4649      	mov	r1, r9
 8009c02:	f7f6 fca9 	bl	8000558 <__aeabi_dmul>
 8009c06:	2200      	movs	r2, #0
 8009c08:	ec41 0b19 	vmov	d9, r0, r1
 8009c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c10:	4620      	mov	r0, r4
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7f6 fae8 	bl	80001e8 <__aeabi_dsub>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	ec51 0b19 	vmov	r0, r1, d9
 8009c20:	f7f6 fdc4 	bl	80007ac <__aeabi_ddiv>
 8009c24:	4632      	mov	r2, r6
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	463b      	mov	r3, r7
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7f6 fc92 	bl	8000558 <__aeabi_dmul>
 8009c34:	4632      	mov	r2, r6
 8009c36:	463b      	mov	r3, r7
 8009c38:	f7f6 fad8 	bl	80001ec <__adddf3>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fad0 	bl	80001e8 <__aeabi_dsub>
 8009c48:	4642      	mov	r2, r8
 8009c4a:	464b      	mov	r3, r9
 8009c4c:	f7f6 facc 	bl	80001e8 <__aeabi_dsub>
 8009c50:	460b      	mov	r3, r1
 8009c52:	4602      	mov	r2, r0
 8009c54:	493a      	ldr	r1, [pc, #232]	; (8009d40 <__ieee754_pow+0xa48>)
 8009c56:	2000      	movs	r0, #0
 8009c58:	f7f6 fac6 	bl	80001e8 <__aeabi_dsub>
 8009c5c:	ec41 0b10 	vmov	d0, r0, r1
 8009c60:	ee10 3a90 	vmov	r3, s1
 8009c64:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c6c:	da2b      	bge.n	8009cc6 <__ieee754_pow+0x9ce>
 8009c6e:	4650      	mov	r0, sl
 8009c70:	f000 f966 	bl	8009f40 <scalbn>
 8009c74:	ec51 0b10 	vmov	r0, r1, d0
 8009c78:	ec53 2b18 	vmov	r2, r3, d8
 8009c7c:	f7ff bbed 	b.w	800945a <__ieee754_pow+0x162>
 8009c80:	4b30      	ldr	r3, [pc, #192]	; (8009d44 <__ieee754_pow+0xa4c>)
 8009c82:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c86:	429e      	cmp	r6, r3
 8009c88:	f77f af0c 	ble.w	8009aa4 <__ieee754_pow+0x7ac>
 8009c8c:	4b2e      	ldr	r3, [pc, #184]	; (8009d48 <__ieee754_pow+0xa50>)
 8009c8e:	440b      	add	r3, r1
 8009c90:	4303      	orrs	r3, r0
 8009c92:	d009      	beq.n	8009ca8 <__ieee754_pow+0x9b0>
 8009c94:	ec51 0b18 	vmov	r0, r1, d8
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f7f6 fece 	bl	8000a3c <__aeabi_dcmplt>
 8009ca0:	3800      	subs	r0, #0
 8009ca2:	bf18      	it	ne
 8009ca4:	2001      	movne	r0, #1
 8009ca6:	e447      	b.n	8009538 <__ieee754_pow+0x240>
 8009ca8:	4622      	mov	r2, r4
 8009caa:	462b      	mov	r3, r5
 8009cac:	f7f6 fa9c 	bl	80001e8 <__aeabi_dsub>
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f7f6 fed6 	bl	8000a64 <__aeabi_dcmpge>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	f43f aef3 	beq.w	8009aa4 <__ieee754_pow+0x7ac>
 8009cbe:	e7e9      	b.n	8009c94 <__ieee754_pow+0x99c>
 8009cc0:	f04f 0a00 	mov.w	sl, #0
 8009cc4:	e71a      	b.n	8009afc <__ieee754_pow+0x804>
 8009cc6:	ec51 0b10 	vmov	r0, r1, d0
 8009cca:	4619      	mov	r1, r3
 8009ccc:	e7d4      	b.n	8009c78 <__ieee754_pow+0x980>
 8009cce:	491c      	ldr	r1, [pc, #112]	; (8009d40 <__ieee754_pow+0xa48>)
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	f7ff bb30 	b.w	8009336 <__ieee754_pow+0x3e>
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	f7ff bb2c 	b.w	8009336 <__ieee754_pow+0x3e>
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7ff bb28 	b.w	8009336 <__ieee754_pow+0x3e>
 8009ce6:	9204      	str	r2, [sp, #16]
 8009ce8:	f7ff bb7a 	b.w	80093e0 <__ieee754_pow+0xe8>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f7ff bb64 	b.w	80093ba <__ieee754_pow+0xc2>
 8009cf2:	bf00      	nop
 8009cf4:	f3af 8000 	nop.w
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	3fe62e43 	.word	0x3fe62e43
 8009d00:	fefa39ef 	.word	0xfefa39ef
 8009d04:	3fe62e42 	.word	0x3fe62e42
 8009d08:	0ca86c39 	.word	0x0ca86c39
 8009d0c:	be205c61 	.word	0xbe205c61
 8009d10:	72bea4d0 	.word	0x72bea4d0
 8009d14:	3e663769 	.word	0x3e663769
 8009d18:	c5d26bf1 	.word	0xc5d26bf1
 8009d1c:	3ebbbd41 	.word	0x3ebbbd41
 8009d20:	af25de2c 	.word	0xaf25de2c
 8009d24:	3f11566a 	.word	0x3f11566a
 8009d28:	16bebd93 	.word	0x16bebd93
 8009d2c:	3f66c16c 	.word	0x3f66c16c
 8009d30:	5555553e 	.word	0x5555553e
 8009d34:	3fc55555 	.word	0x3fc55555
 8009d38:	3fe00000 	.word	0x3fe00000
 8009d3c:	000fffff 	.word	0x000fffff
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	4090cbff 	.word	0x4090cbff
 8009d48:	3f6f3400 	.word	0x3f6f3400
 8009d4c:	652b82fe 	.word	0x652b82fe
 8009d50:	3c971547 	.word	0x3c971547

08009d54 <__ieee754_sqrt>:
 8009d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d58:	ec55 4b10 	vmov	r4, r5, d0
 8009d5c:	4e55      	ldr	r6, [pc, #340]	; (8009eb4 <__ieee754_sqrt+0x160>)
 8009d5e:	43ae      	bics	r6, r5
 8009d60:	ee10 0a10 	vmov	r0, s0
 8009d64:	ee10 3a10 	vmov	r3, s0
 8009d68:	462a      	mov	r2, r5
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	d110      	bne.n	8009d90 <__ieee754_sqrt+0x3c>
 8009d6e:	ee10 2a10 	vmov	r2, s0
 8009d72:	462b      	mov	r3, r5
 8009d74:	f7f6 fbf0 	bl	8000558 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fa34 	bl	80001ec <__adddf3>
 8009d84:	4604      	mov	r4, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	ec45 4b10 	vmov	d0, r4, r5
 8009d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	dc10      	bgt.n	8009db6 <__ieee754_sqrt+0x62>
 8009d94:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d98:	4330      	orrs	r0, r6
 8009d9a:	d0f5      	beq.n	8009d88 <__ieee754_sqrt+0x34>
 8009d9c:	b15d      	cbz	r5, 8009db6 <__ieee754_sqrt+0x62>
 8009d9e:	ee10 2a10 	vmov	r2, s0
 8009da2:	462b      	mov	r3, r5
 8009da4:	ee10 0a10 	vmov	r0, s0
 8009da8:	f7f6 fa1e 	bl	80001e8 <__aeabi_dsub>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	f7f6 fcfc 	bl	80007ac <__aeabi_ddiv>
 8009db4:	e7e6      	b.n	8009d84 <__ieee754_sqrt+0x30>
 8009db6:	1512      	asrs	r2, r2, #20
 8009db8:	d074      	beq.n	8009ea4 <__ieee754_sqrt+0x150>
 8009dba:	07d4      	lsls	r4, r2, #31
 8009dbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009dc0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009dc8:	bf5e      	ittt	pl
 8009dca:	0fda      	lsrpl	r2, r3, #31
 8009dcc:	005b      	lslpl	r3, r3, #1
 8009dce:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009dd2:	2400      	movs	r4, #0
 8009dd4:	0fda      	lsrs	r2, r3, #31
 8009dd6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009dda:	107f      	asrs	r7, r7, #1
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	2516      	movs	r5, #22
 8009de0:	4620      	mov	r0, r4
 8009de2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009de6:	1886      	adds	r6, r0, r2
 8009de8:	428e      	cmp	r6, r1
 8009dea:	bfde      	ittt	le
 8009dec:	1b89      	suble	r1, r1, r6
 8009dee:	18b0      	addle	r0, r6, r2
 8009df0:	18a4      	addle	r4, r4, r2
 8009df2:	0049      	lsls	r1, r1, #1
 8009df4:	3d01      	subs	r5, #1
 8009df6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009dfa:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009dfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e02:	d1f0      	bne.n	8009de6 <__ieee754_sqrt+0x92>
 8009e04:	462a      	mov	r2, r5
 8009e06:	f04f 0e20 	mov.w	lr, #32
 8009e0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e0e:	4281      	cmp	r1, r0
 8009e10:	eb06 0c05 	add.w	ip, r6, r5
 8009e14:	dc02      	bgt.n	8009e1c <__ieee754_sqrt+0xc8>
 8009e16:	d113      	bne.n	8009e40 <__ieee754_sqrt+0xec>
 8009e18:	459c      	cmp	ip, r3
 8009e1a:	d811      	bhi.n	8009e40 <__ieee754_sqrt+0xec>
 8009e1c:	f1bc 0f00 	cmp.w	ip, #0
 8009e20:	eb0c 0506 	add.w	r5, ip, r6
 8009e24:	da43      	bge.n	8009eae <__ieee754_sqrt+0x15a>
 8009e26:	2d00      	cmp	r5, #0
 8009e28:	db41      	blt.n	8009eae <__ieee754_sqrt+0x15a>
 8009e2a:	f100 0801 	add.w	r8, r0, #1
 8009e2e:	1a09      	subs	r1, r1, r0
 8009e30:	459c      	cmp	ip, r3
 8009e32:	bf88      	it	hi
 8009e34:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009e38:	eba3 030c 	sub.w	r3, r3, ip
 8009e3c:	4432      	add	r2, r6
 8009e3e:	4640      	mov	r0, r8
 8009e40:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009e44:	f1be 0e01 	subs.w	lr, lr, #1
 8009e48:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009e4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e54:	d1db      	bne.n	8009e0e <__ieee754_sqrt+0xba>
 8009e56:	430b      	orrs	r3, r1
 8009e58:	d006      	beq.n	8009e68 <__ieee754_sqrt+0x114>
 8009e5a:	1c50      	adds	r0, r2, #1
 8009e5c:	bf13      	iteet	ne
 8009e5e:	3201      	addne	r2, #1
 8009e60:	3401      	addeq	r4, #1
 8009e62:	4672      	moveq	r2, lr
 8009e64:	f022 0201 	bicne.w	r2, r2, #1
 8009e68:	1063      	asrs	r3, r4, #1
 8009e6a:	0852      	lsrs	r2, r2, #1
 8009e6c:	07e1      	lsls	r1, r4, #31
 8009e6e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009e72:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009e76:	bf48      	it	mi
 8009e78:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009e7c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009e80:	4614      	mov	r4, r2
 8009e82:	e781      	b.n	8009d88 <__ieee754_sqrt+0x34>
 8009e84:	0ad9      	lsrs	r1, r3, #11
 8009e86:	3815      	subs	r0, #21
 8009e88:	055b      	lsls	r3, r3, #21
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	d0fa      	beq.n	8009e84 <__ieee754_sqrt+0x130>
 8009e8e:	02cd      	lsls	r5, r1, #11
 8009e90:	d50a      	bpl.n	8009ea8 <__ieee754_sqrt+0x154>
 8009e92:	f1c2 0420 	rsb	r4, r2, #32
 8009e96:	fa23 f404 	lsr.w	r4, r3, r4
 8009e9a:	1e55      	subs	r5, r2, #1
 8009e9c:	4093      	lsls	r3, r2
 8009e9e:	4321      	orrs	r1, r4
 8009ea0:	1b42      	subs	r2, r0, r5
 8009ea2:	e78a      	b.n	8009dba <__ieee754_sqrt+0x66>
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	e7f0      	b.n	8009e8a <__ieee754_sqrt+0x136>
 8009ea8:	0049      	lsls	r1, r1, #1
 8009eaa:	3201      	adds	r2, #1
 8009eac:	e7ef      	b.n	8009e8e <__ieee754_sqrt+0x13a>
 8009eae:	4680      	mov	r8, r0
 8009eb0:	e7bd      	b.n	8009e2e <__ieee754_sqrt+0xda>
 8009eb2:	bf00      	nop
 8009eb4:	7ff00000 	.word	0x7ff00000

08009eb8 <with_errno>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4604      	mov	r4, r0
 8009ebc:	460d      	mov	r5, r1
 8009ebe:	4616      	mov	r6, r2
 8009ec0:	f000 f8cc 	bl	800a05c <__errno>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	6006      	str	r6, [r0, #0]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bd70      	pop	{r4, r5, r6, pc}

08009ecc <xflow>:
 8009ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ece:	4614      	mov	r4, r2
 8009ed0:	461d      	mov	r5, r3
 8009ed2:	b108      	cbz	r0, 8009ed8 <xflow+0xc>
 8009ed4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009ed8:	e9cd 2300 	strd	r2, r3, [sp]
 8009edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	f7f6 fb38 	bl	8000558 <__aeabi_dmul>
 8009ee8:	2222      	movs	r2, #34	; 0x22
 8009eea:	b003      	add	sp, #12
 8009eec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ef0:	f7ff bfe2 	b.w	8009eb8 <with_errno>

08009ef4 <__math_uflow>:
 8009ef4:	b508      	push	{r3, lr}
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009efc:	f7ff ffe6 	bl	8009ecc <xflow>
 8009f00:	ec41 0b10 	vmov	d0, r0, r1
 8009f04:	bd08      	pop	{r3, pc}

08009f06 <__math_oflow>:
 8009f06:	b508      	push	{r3, lr}
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009f0e:	f7ff ffdd 	bl	8009ecc <xflow>
 8009f12:	ec41 0b10 	vmov	d0, r0, r1
 8009f16:	bd08      	pop	{r3, pc}

08009f18 <fabs>:
 8009f18:	ec51 0b10 	vmov	r0, r1, d0
 8009f1c:	ee10 2a10 	vmov	r2, s0
 8009f20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f24:	ec43 2b10 	vmov	d0, r2, r3
 8009f28:	4770      	bx	lr

08009f2a <finite>:
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	ed8d 0b00 	vstr	d0, [sp]
 8009f30:	9801      	ldr	r0, [sp, #4]
 8009f32:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009f36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f3a:	0fc0      	lsrs	r0, r0, #31
 8009f3c:	b002      	add	sp, #8
 8009f3e:	4770      	bx	lr

08009f40 <scalbn>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	ec55 4b10 	vmov	r4, r5, d0
 8009f46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	b99a      	cbnz	r2, 8009f78 <scalbn+0x38>
 8009f50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f54:	4323      	orrs	r3, r4
 8009f56:	d036      	beq.n	8009fc6 <scalbn+0x86>
 8009f58:	4b39      	ldr	r3, [pc, #228]	; (800a040 <scalbn+0x100>)
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	ee10 0a10 	vmov	r0, s0
 8009f60:	2200      	movs	r2, #0
 8009f62:	f7f6 faf9 	bl	8000558 <__aeabi_dmul>
 8009f66:	4b37      	ldr	r3, [pc, #220]	; (800a044 <scalbn+0x104>)
 8009f68:	429e      	cmp	r6, r3
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	460d      	mov	r5, r1
 8009f6e:	da10      	bge.n	8009f92 <scalbn+0x52>
 8009f70:	a32b      	add	r3, pc, #172	; (adr r3, 800a020 <scalbn+0xe0>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	e03a      	b.n	8009fee <scalbn+0xae>
 8009f78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f7c:	428a      	cmp	r2, r1
 8009f7e:	d10c      	bne.n	8009f9a <scalbn+0x5a>
 8009f80:	ee10 2a10 	vmov	r2, s0
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 f930 	bl	80001ec <__adddf3>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	460d      	mov	r5, r1
 8009f90:	e019      	b.n	8009fc6 <scalbn+0x86>
 8009f92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f96:	460b      	mov	r3, r1
 8009f98:	3a36      	subs	r2, #54	; 0x36
 8009f9a:	4432      	add	r2, r6
 8009f9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009fa0:	428a      	cmp	r2, r1
 8009fa2:	dd08      	ble.n	8009fb6 <scalbn+0x76>
 8009fa4:	2d00      	cmp	r5, #0
 8009fa6:	a120      	add	r1, pc, #128	; (adr r1, 800a028 <scalbn+0xe8>)
 8009fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fac:	da1c      	bge.n	8009fe8 <scalbn+0xa8>
 8009fae:	a120      	add	r1, pc, #128	; (adr r1, 800a030 <scalbn+0xf0>)
 8009fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fb4:	e018      	b.n	8009fe8 <scalbn+0xa8>
 8009fb6:	2a00      	cmp	r2, #0
 8009fb8:	dd08      	ble.n	8009fcc <scalbn+0x8c>
 8009fba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fc6:	ec45 4b10 	vmov	d0, r4, r5
 8009fca:	bd70      	pop	{r4, r5, r6, pc}
 8009fcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009fd0:	da19      	bge.n	800a006 <scalbn+0xc6>
 8009fd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009fd6:	429e      	cmp	r6, r3
 8009fd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009fdc:	dd0a      	ble.n	8009ff4 <scalbn+0xb4>
 8009fde:	a112      	add	r1, pc, #72	; (adr r1, 800a028 <scalbn+0xe8>)
 8009fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e2      	bne.n	8009fae <scalbn+0x6e>
 8009fe8:	a30f      	add	r3, pc, #60	; (adr r3, 800a028 <scalbn+0xe8>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f7f6 fab3 	bl	8000558 <__aeabi_dmul>
 8009ff2:	e7cb      	b.n	8009f8c <scalbn+0x4c>
 8009ff4:	a10a      	add	r1, pc, #40	; (adr r1, 800a020 <scalbn+0xe0>)
 8009ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0b8      	beq.n	8009f70 <scalbn+0x30>
 8009ffe:	a10e      	add	r1, pc, #56	; (adr r1, 800a038 <scalbn+0xf8>)
 800a000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a004:	e7b4      	b.n	8009f70 <scalbn+0x30>
 800a006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a00a:	3236      	adds	r2, #54	; 0x36
 800a00c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a010:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a014:	4620      	mov	r0, r4
 800a016:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <scalbn+0x108>)
 800a018:	2200      	movs	r2, #0
 800a01a:	e7e8      	b.n	8009fee <scalbn+0xae>
 800a01c:	f3af 8000 	nop.w
 800a020:	c2f8f359 	.word	0xc2f8f359
 800a024:	01a56e1f 	.word	0x01a56e1f
 800a028:	8800759c 	.word	0x8800759c
 800a02c:	7e37e43c 	.word	0x7e37e43c
 800a030:	8800759c 	.word	0x8800759c
 800a034:	fe37e43c 	.word	0xfe37e43c
 800a038:	c2f8f359 	.word	0xc2f8f359
 800a03c:	81a56e1f 	.word	0x81a56e1f
 800a040:	43500000 	.word	0x43500000
 800a044:	ffff3cb0 	.word	0xffff3cb0
 800a048:	3c900000 	.word	0x3c900000

0800a04c <abort>:
 800a04c:	b508      	push	{r3, lr}
 800a04e:	2006      	movs	r0, #6
 800a050:	f000 f96c 	bl	800a32c <raise>
 800a054:	2001      	movs	r0, #1
 800a056:	f7f8 fbd5 	bl	8002804 <_exit>
	...

0800a05c <__errno>:
 800a05c:	4b01      	ldr	r3, [pc, #4]	; (800a064 <__errno+0x8>)
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	2000000c 	.word	0x2000000c

0800a068 <__libc_init_array>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	4d0d      	ldr	r5, [pc, #52]	; (800a0a0 <__libc_init_array+0x38>)
 800a06c:	4c0d      	ldr	r4, [pc, #52]	; (800a0a4 <__libc_init_array+0x3c>)
 800a06e:	1b64      	subs	r4, r4, r5
 800a070:	10a4      	asrs	r4, r4, #2
 800a072:	2600      	movs	r6, #0
 800a074:	42a6      	cmp	r6, r4
 800a076:	d109      	bne.n	800a08c <__libc_init_array+0x24>
 800a078:	4d0b      	ldr	r5, [pc, #44]	; (800a0a8 <__libc_init_array+0x40>)
 800a07a:	4c0c      	ldr	r4, [pc, #48]	; (800a0ac <__libc_init_array+0x44>)
 800a07c:	f000 f980 	bl	800a380 <_init>
 800a080:	1b64      	subs	r4, r4, r5
 800a082:	10a4      	asrs	r4, r4, #2
 800a084:	2600      	movs	r6, #0
 800a086:	42a6      	cmp	r6, r4
 800a088:	d105      	bne.n	800a096 <__libc_init_array+0x2e>
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a090:	4798      	blx	r3
 800a092:	3601      	adds	r6, #1
 800a094:	e7ee      	b.n	800a074 <__libc_init_array+0xc>
 800a096:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09a:	4798      	blx	r3
 800a09c:	3601      	adds	r6, #1
 800a09e:	e7f2      	b.n	800a086 <__libc_init_array+0x1e>
 800a0a0:	0800a498 	.word	0x0800a498
 800a0a4:	0800a498 	.word	0x0800a498
 800a0a8:	0800a498 	.word	0x0800a498
 800a0ac:	0800a4a0 	.word	0x0800a4a0

0800a0b0 <malloc>:
 800a0b0:	4b02      	ldr	r3, [pc, #8]	; (800a0bc <malloc+0xc>)
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	f000 b88d 	b.w	800a1d4 <_malloc_r>
 800a0ba:	bf00      	nop
 800a0bc:	2000000c 	.word	0x2000000c

0800a0c0 <free>:
 800a0c0:	4b02      	ldr	r3, [pc, #8]	; (800a0cc <free+0xc>)
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f000 b819 	b.w	800a0fc <_free_r>
 800a0ca:	bf00      	nop
 800a0cc:	2000000c 	.word	0x2000000c

0800a0d0 <memcpy>:
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4291      	cmp	r1, r2
 800a0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0d8:	d100      	bne.n	800a0dc <memcpy+0xc>
 800a0da:	4770      	bx	lr
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e6:	4291      	cmp	r1, r2
 800a0e8:	d1f9      	bne.n	800a0de <memcpy+0xe>
 800a0ea:	bd10      	pop	{r4, pc}

0800a0ec <memset>:
 800a0ec:	4402      	add	r2, r0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d100      	bne.n	800a0f6 <memset+0xa>
 800a0f4:	4770      	bx	lr
 800a0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fa:	e7f9      	b.n	800a0f0 <memset+0x4>

0800a0fc <_free_r>:
 800a0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0fe:	2900      	cmp	r1, #0
 800a100:	d044      	beq.n	800a18c <_free_r+0x90>
 800a102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a106:	9001      	str	r0, [sp, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f1a1 0404 	sub.w	r4, r1, #4
 800a10e:	bfb8      	it	lt
 800a110:	18e4      	addlt	r4, r4, r3
 800a112:	f000 f927 	bl	800a364 <__malloc_lock>
 800a116:	4a1e      	ldr	r2, [pc, #120]	; (800a190 <_free_r+0x94>)
 800a118:	9801      	ldr	r0, [sp, #4]
 800a11a:	6813      	ldr	r3, [r2, #0]
 800a11c:	b933      	cbnz	r3, 800a12c <_free_r+0x30>
 800a11e:	6063      	str	r3, [r4, #4]
 800a120:	6014      	str	r4, [r2, #0]
 800a122:	b003      	add	sp, #12
 800a124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a128:	f000 b922 	b.w	800a370 <__malloc_unlock>
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	d908      	bls.n	800a142 <_free_r+0x46>
 800a130:	6825      	ldr	r5, [r4, #0]
 800a132:	1961      	adds	r1, r4, r5
 800a134:	428b      	cmp	r3, r1
 800a136:	bf01      	itttt	eq
 800a138:	6819      	ldreq	r1, [r3, #0]
 800a13a:	685b      	ldreq	r3, [r3, #4]
 800a13c:	1949      	addeq	r1, r1, r5
 800a13e:	6021      	streq	r1, [r4, #0]
 800a140:	e7ed      	b.n	800a11e <_free_r+0x22>
 800a142:	461a      	mov	r2, r3
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	b10b      	cbz	r3, 800a14c <_free_r+0x50>
 800a148:	42a3      	cmp	r3, r4
 800a14a:	d9fa      	bls.n	800a142 <_free_r+0x46>
 800a14c:	6811      	ldr	r1, [r2, #0]
 800a14e:	1855      	adds	r5, r2, r1
 800a150:	42a5      	cmp	r5, r4
 800a152:	d10b      	bne.n	800a16c <_free_r+0x70>
 800a154:	6824      	ldr	r4, [r4, #0]
 800a156:	4421      	add	r1, r4
 800a158:	1854      	adds	r4, r2, r1
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	d1e0      	bne.n	800a122 <_free_r+0x26>
 800a160:	681c      	ldr	r4, [r3, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	6053      	str	r3, [r2, #4]
 800a166:	4421      	add	r1, r4
 800a168:	6011      	str	r1, [r2, #0]
 800a16a:	e7da      	b.n	800a122 <_free_r+0x26>
 800a16c:	d902      	bls.n	800a174 <_free_r+0x78>
 800a16e:	230c      	movs	r3, #12
 800a170:	6003      	str	r3, [r0, #0]
 800a172:	e7d6      	b.n	800a122 <_free_r+0x26>
 800a174:	6825      	ldr	r5, [r4, #0]
 800a176:	1961      	adds	r1, r4, r5
 800a178:	428b      	cmp	r3, r1
 800a17a:	bf04      	itt	eq
 800a17c:	6819      	ldreq	r1, [r3, #0]
 800a17e:	685b      	ldreq	r3, [r3, #4]
 800a180:	6063      	str	r3, [r4, #4]
 800a182:	bf04      	itt	eq
 800a184:	1949      	addeq	r1, r1, r5
 800a186:	6021      	streq	r1, [r4, #0]
 800a188:	6054      	str	r4, [r2, #4]
 800a18a:	e7ca      	b.n	800a122 <_free_r+0x26>
 800a18c:	b003      	add	sp, #12
 800a18e:	bd30      	pop	{r4, r5, pc}
 800a190:	20004dc0 	.word	0x20004dc0

0800a194 <sbrk_aligned>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4e0e      	ldr	r6, [pc, #56]	; (800a1d0 <sbrk_aligned+0x3c>)
 800a198:	460c      	mov	r4, r1
 800a19a:	6831      	ldr	r1, [r6, #0]
 800a19c:	4605      	mov	r5, r0
 800a19e:	b911      	cbnz	r1, 800a1a6 <sbrk_aligned+0x12>
 800a1a0:	f000 f88c 	bl	800a2bc <_sbrk_r>
 800a1a4:	6030      	str	r0, [r6, #0]
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 f887 	bl	800a2bc <_sbrk_r>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d00a      	beq.n	800a1c8 <sbrk_aligned+0x34>
 800a1b2:	1cc4      	adds	r4, r0, #3
 800a1b4:	f024 0403 	bic.w	r4, r4, #3
 800a1b8:	42a0      	cmp	r0, r4
 800a1ba:	d007      	beq.n	800a1cc <sbrk_aligned+0x38>
 800a1bc:	1a21      	subs	r1, r4, r0
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f000 f87c 	bl	800a2bc <_sbrk_r>
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d101      	bne.n	800a1cc <sbrk_aligned+0x38>
 800a1c8:	f04f 34ff 	mov.w	r4, #4294967295
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	20004dc4 	.word	0x20004dc4

0800a1d4 <_malloc_r>:
 800a1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d8:	1ccd      	adds	r5, r1, #3
 800a1da:	f025 0503 	bic.w	r5, r5, #3
 800a1de:	3508      	adds	r5, #8
 800a1e0:	2d0c      	cmp	r5, #12
 800a1e2:	bf38      	it	cc
 800a1e4:	250c      	movcc	r5, #12
 800a1e6:	2d00      	cmp	r5, #0
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	db01      	blt.n	800a1f0 <_malloc_r+0x1c>
 800a1ec:	42a9      	cmp	r1, r5
 800a1ee:	d905      	bls.n	800a1fc <_malloc_r+0x28>
 800a1f0:	230c      	movs	r3, #12
 800a1f2:	603b      	str	r3, [r7, #0]
 800a1f4:	2600      	movs	r6, #0
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	4e2e      	ldr	r6, [pc, #184]	; (800a2b8 <_malloc_r+0xe4>)
 800a1fe:	f000 f8b1 	bl	800a364 <__malloc_lock>
 800a202:	6833      	ldr	r3, [r6, #0]
 800a204:	461c      	mov	r4, r3
 800a206:	bb34      	cbnz	r4, 800a256 <_malloc_r+0x82>
 800a208:	4629      	mov	r1, r5
 800a20a:	4638      	mov	r0, r7
 800a20c:	f7ff ffc2 	bl	800a194 <sbrk_aligned>
 800a210:	1c43      	adds	r3, r0, #1
 800a212:	4604      	mov	r4, r0
 800a214:	d14d      	bne.n	800a2b2 <_malloc_r+0xde>
 800a216:	6834      	ldr	r4, [r6, #0]
 800a218:	4626      	mov	r6, r4
 800a21a:	2e00      	cmp	r6, #0
 800a21c:	d140      	bne.n	800a2a0 <_malloc_r+0xcc>
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	4631      	mov	r1, r6
 800a222:	4638      	mov	r0, r7
 800a224:	eb04 0803 	add.w	r8, r4, r3
 800a228:	f000 f848 	bl	800a2bc <_sbrk_r>
 800a22c:	4580      	cmp	r8, r0
 800a22e:	d13a      	bne.n	800a2a6 <_malloc_r+0xd2>
 800a230:	6821      	ldr	r1, [r4, #0]
 800a232:	3503      	adds	r5, #3
 800a234:	1a6d      	subs	r5, r5, r1
 800a236:	f025 0503 	bic.w	r5, r5, #3
 800a23a:	3508      	adds	r5, #8
 800a23c:	2d0c      	cmp	r5, #12
 800a23e:	bf38      	it	cc
 800a240:	250c      	movcc	r5, #12
 800a242:	4629      	mov	r1, r5
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff ffa5 	bl	800a194 <sbrk_aligned>
 800a24a:	3001      	adds	r0, #1
 800a24c:	d02b      	beq.n	800a2a6 <_malloc_r+0xd2>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	442b      	add	r3, r5
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	e00e      	b.n	800a274 <_malloc_r+0xa0>
 800a256:	6822      	ldr	r2, [r4, #0]
 800a258:	1b52      	subs	r2, r2, r5
 800a25a:	d41e      	bmi.n	800a29a <_malloc_r+0xc6>
 800a25c:	2a0b      	cmp	r2, #11
 800a25e:	d916      	bls.n	800a28e <_malloc_r+0xba>
 800a260:	1961      	adds	r1, r4, r5
 800a262:	42a3      	cmp	r3, r4
 800a264:	6025      	str	r5, [r4, #0]
 800a266:	bf18      	it	ne
 800a268:	6059      	strne	r1, [r3, #4]
 800a26a:	6863      	ldr	r3, [r4, #4]
 800a26c:	bf08      	it	eq
 800a26e:	6031      	streq	r1, [r6, #0]
 800a270:	5162      	str	r2, [r4, r5]
 800a272:	604b      	str	r3, [r1, #4]
 800a274:	4638      	mov	r0, r7
 800a276:	f104 060b 	add.w	r6, r4, #11
 800a27a:	f000 f879 	bl	800a370 <__malloc_unlock>
 800a27e:	f026 0607 	bic.w	r6, r6, #7
 800a282:	1d23      	adds	r3, r4, #4
 800a284:	1af2      	subs	r2, r6, r3
 800a286:	d0b6      	beq.n	800a1f6 <_malloc_r+0x22>
 800a288:	1b9b      	subs	r3, r3, r6
 800a28a:	50a3      	str	r3, [r4, r2]
 800a28c:	e7b3      	b.n	800a1f6 <_malloc_r+0x22>
 800a28e:	6862      	ldr	r2, [r4, #4]
 800a290:	42a3      	cmp	r3, r4
 800a292:	bf0c      	ite	eq
 800a294:	6032      	streq	r2, [r6, #0]
 800a296:	605a      	strne	r2, [r3, #4]
 800a298:	e7ec      	b.n	800a274 <_malloc_r+0xa0>
 800a29a:	4623      	mov	r3, r4
 800a29c:	6864      	ldr	r4, [r4, #4]
 800a29e:	e7b2      	b.n	800a206 <_malloc_r+0x32>
 800a2a0:	4634      	mov	r4, r6
 800a2a2:	6876      	ldr	r6, [r6, #4]
 800a2a4:	e7b9      	b.n	800a21a <_malloc_r+0x46>
 800a2a6:	230c      	movs	r3, #12
 800a2a8:	603b      	str	r3, [r7, #0]
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	f000 f860 	bl	800a370 <__malloc_unlock>
 800a2b0:	e7a1      	b.n	800a1f6 <_malloc_r+0x22>
 800a2b2:	6025      	str	r5, [r4, #0]
 800a2b4:	e7de      	b.n	800a274 <_malloc_r+0xa0>
 800a2b6:	bf00      	nop
 800a2b8:	20004dc0 	.word	0x20004dc0

0800a2bc <_sbrk_r>:
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4d06      	ldr	r5, [pc, #24]	; (800a2d8 <_sbrk_r+0x1c>)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	4608      	mov	r0, r1
 800a2c6:	602b      	str	r3, [r5, #0]
 800a2c8:	f7f8 faa6 	bl	8002818 <_sbrk>
 800a2cc:	1c43      	adds	r3, r0, #1
 800a2ce:	d102      	bne.n	800a2d6 <_sbrk_r+0x1a>
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	b103      	cbz	r3, 800a2d6 <_sbrk_r+0x1a>
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	20004dc8 	.word	0x20004dc8

0800a2dc <_raise_r>:
 800a2dc:	291f      	cmp	r1, #31
 800a2de:	b538      	push	{r3, r4, r5, lr}
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	d904      	bls.n	800a2f0 <_raise_r+0x14>
 800a2e6:	2316      	movs	r3, #22
 800a2e8:	6003      	str	r3, [r0, #0]
 800a2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2f2:	b112      	cbz	r2, 800a2fa <_raise_r+0x1e>
 800a2f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2f8:	b94b      	cbnz	r3, 800a30e <_raise_r+0x32>
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 f830 	bl	800a360 <_getpid_r>
 800a300:	462a      	mov	r2, r5
 800a302:	4601      	mov	r1, r0
 800a304:	4620      	mov	r0, r4
 800a306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a30a:	f000 b817 	b.w	800a33c <_kill_r>
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d00a      	beq.n	800a328 <_raise_r+0x4c>
 800a312:	1c59      	adds	r1, r3, #1
 800a314:	d103      	bne.n	800a31e <_raise_r+0x42>
 800a316:	2316      	movs	r3, #22
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	2001      	movs	r0, #1
 800a31c:	e7e7      	b.n	800a2ee <_raise_r+0x12>
 800a31e:	2400      	movs	r4, #0
 800a320:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a324:	4628      	mov	r0, r5
 800a326:	4798      	blx	r3
 800a328:	2000      	movs	r0, #0
 800a32a:	e7e0      	b.n	800a2ee <_raise_r+0x12>

0800a32c <raise>:
 800a32c:	4b02      	ldr	r3, [pc, #8]	; (800a338 <raise+0xc>)
 800a32e:	4601      	mov	r1, r0
 800a330:	6818      	ldr	r0, [r3, #0]
 800a332:	f7ff bfd3 	b.w	800a2dc <_raise_r>
 800a336:	bf00      	nop
 800a338:	2000000c 	.word	0x2000000c

0800a33c <_kill_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	4d07      	ldr	r5, [pc, #28]	; (800a35c <_kill_r+0x20>)
 800a340:	2300      	movs	r3, #0
 800a342:	4604      	mov	r4, r0
 800a344:	4608      	mov	r0, r1
 800a346:	4611      	mov	r1, r2
 800a348:	602b      	str	r3, [r5, #0]
 800a34a:	f7f8 fa4b 	bl	80027e4 <_kill>
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	d102      	bne.n	800a358 <_kill_r+0x1c>
 800a352:	682b      	ldr	r3, [r5, #0]
 800a354:	b103      	cbz	r3, 800a358 <_kill_r+0x1c>
 800a356:	6023      	str	r3, [r4, #0]
 800a358:	bd38      	pop	{r3, r4, r5, pc}
 800a35a:	bf00      	nop
 800a35c:	20004dc8 	.word	0x20004dc8

0800a360 <_getpid_r>:
 800a360:	f7f8 ba38 	b.w	80027d4 <_getpid>

0800a364 <__malloc_lock>:
 800a364:	4801      	ldr	r0, [pc, #4]	; (800a36c <__malloc_lock+0x8>)
 800a366:	f000 b809 	b.w	800a37c <__retarget_lock_acquire_recursive>
 800a36a:	bf00      	nop
 800a36c:	20004dcc 	.word	0x20004dcc

0800a370 <__malloc_unlock>:
 800a370:	4801      	ldr	r0, [pc, #4]	; (800a378 <__malloc_unlock+0x8>)
 800a372:	f000 b804 	b.w	800a37e <__retarget_lock_release_recursive>
 800a376:	bf00      	nop
 800a378:	20004dcc 	.word	0x20004dcc

0800a37c <__retarget_lock_acquire_recursive>:
 800a37c:	4770      	bx	lr

0800a37e <__retarget_lock_release_recursive>:
 800a37e:	4770      	bx	lr

0800a380 <_init>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr

0800a38c <_fini>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	bf00      	nop
 800a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a392:	bc08      	pop	{r3}
 800a394:	469e      	mov	lr, r3
 800a396:	4770      	bx	lr

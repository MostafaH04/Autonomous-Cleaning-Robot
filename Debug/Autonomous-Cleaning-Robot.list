
Autonomous-Cleaning-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007678  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007810  08007810  00017810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007868  08007868  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007870  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000078  080078e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080078e8  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e37  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd4  00000000  00000000  00032f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d03  00000000  00000000  00036b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017cc4  00000000  00000000  0003788b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153d4  00000000  00000000  0004f54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000917f4  00000000  00000000  00064923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ba4  00000000  00000000  000f6118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000facbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080077f8 	.word	0x080077f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080077f8 	.word	0x080077f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 b970 	b.w	8000e98 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	460f      	mov	r7, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14a      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4694      	mov	ip, r2
 8000be4:	d965      	bls.n	8000cb2 <__udivmoddi4+0xe2>
 8000be6:	fab2 f382 	clz	r3, r2
 8000bea:	b143      	cbz	r3, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf0:	f1c3 0220 	rsb	r2, r3, #32
 8000bf4:	409f      	lsls	r7, r3
 8000bf6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfa:	4317      	orrs	r7, r2
 8000bfc:	409c      	lsls	r4, r3
 8000bfe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c02:	fa1f f58c 	uxth.w	r5, ip
 8000c06:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0a:	0c22      	lsrs	r2, r4, #16
 8000c0c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c14:	fb01 f005 	mul.w	r0, r1, r5
 8000c18:	4290      	cmp	r0, r2
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x62>
 8000c1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c20:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c24:	f080 811c 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f240 8119 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c2e:	3902      	subs	r1, #2
 8000c30:	4462      	add	r2, ip
 8000c32:	1a12      	subs	r2, r2, r0
 8000c34:	b2a4      	uxth	r4, r4
 8000c36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c42:	fb00 f505 	mul.w	r5, r0, r5
 8000c46:	42a5      	cmp	r5, r4
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x90>
 8000c4a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c52:	f080 8107 	bcs.w	8000e64 <__udivmoddi4+0x294>
 8000c56:	42a5      	cmp	r5, r4
 8000c58:	f240 8104 	bls.w	8000e64 <__udivmoddi4+0x294>
 8000c5c:	4464      	add	r4, ip
 8000c5e:	3802      	subs	r0, #2
 8000c60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c64:	1b64      	subs	r4, r4, r5
 8000c66:	2100      	movs	r1, #0
 8000c68:	b11e      	cbz	r6, 8000c72 <__udivmoddi4+0xa2>
 8000c6a:	40dc      	lsrs	r4, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0xbc>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80ed 	beq.w	8000e5a <__udivmoddi4+0x28a>
 8000c80:	2100      	movs	r1, #0
 8000c82:	e9c6 0500 	strd	r0, r5, [r6]
 8000c86:	4608      	mov	r0, r1
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	fab3 f183 	clz	r1, r3
 8000c90:	2900      	cmp	r1, #0
 8000c92:	d149      	bne.n	8000d28 <__udivmoddi4+0x158>
 8000c94:	42ab      	cmp	r3, r5
 8000c96:	d302      	bcc.n	8000c9e <__udivmoddi4+0xce>
 8000c98:	4282      	cmp	r2, r0
 8000c9a:	f200 80f8 	bhi.w	8000e8e <__udivmoddi4+0x2be>
 8000c9e:	1a84      	subs	r4, r0, r2
 8000ca0:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4617      	mov	r7, r2
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d0e2      	beq.n	8000c72 <__udivmoddi4+0xa2>
 8000cac:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb0:	e7df      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000cb2:	b902      	cbnz	r2, 8000cb6 <__udivmoddi4+0xe6>
 8000cb4:	deff      	udf	#255	; 0xff
 8000cb6:	fab2 f382 	clz	r3, r2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc0:	1a8a      	subs	r2, r1, r2
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2101      	movs	r1, #1
 8000ccc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cda:	fb0e f005 	mul.w	r0, lr, r5
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4290      	cmp	r0, r2
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2b8>
 8000cf2:	4645      	mov	r5, r8
 8000cf4:	1a12      	subs	r2, r2, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cfc:	fb07 2210 	mls	r2, r7, r0, r2
 8000d00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x14e>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x14c>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2c2>
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d26:	e79f      	b.n	8000c68 <__udivmoddi4+0x98>
 8000d28:	f1c1 0720 	rsb	r7, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d3e:	40fd      	lsrs	r5, r7
 8000d40:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d44:	4323      	orrs	r3, r4
 8000d46:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d52:	0c1c      	lsrs	r4, r3, #16
 8000d54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d58:	fb08 f50e 	mul.w	r5, r8, lr
 8000d5c:	42a5      	cmp	r5, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	fa00 f001 	lsl.w	r0, r0, r1
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1c 0404 	adds.w	r4, ip, r4
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2b4>
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2b4>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4464      	add	r4, ip
 8000d80:	1b64      	subs	r4, r4, r5
 8000d82:	b29d      	uxth	r5, r3
 8000d84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d88:	fb09 4413 	mls	r4, r9, r3, r4
 8000d8c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d90:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d94:	45a6      	cmp	lr, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2ac>
 8000da2:	45a6      	cmp	lr, r4
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2ac>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dae:	fba3 9502 	umull	r9, r5, r3, r2
 8000db2:	eba4 040e 	sub.w	r4, r4, lr
 8000db6:	42ac      	cmp	r4, r5
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46ae      	mov	lr, r5
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x29c>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x298>
 8000dc0:	b156      	cbz	r6, 8000dd8 <__udivmoddi4+0x208>
 8000dc2:	ebb0 0208 	subs.w	r2, r0, r8
 8000dc6:	eb64 040e 	sbc.w	r4, r4, lr
 8000dca:	fa04 f707 	lsl.w	r7, r4, r7
 8000dce:	40ca      	lsrs	r2, r1
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	4317      	orrs	r7, r2
 8000dd4:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	f1c3 0120 	rsb	r1, r3, #32
 8000de4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dec:	fa25 f101 	lsr.w	r1, r5, r1
 8000df0:	409d      	lsls	r5, r3
 8000df2:	432a      	orrs	r2, r5
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e00:	fb07 1510 	mls	r5, r7, r0, r1
 8000e04:	0c11      	lsrs	r1, r2, #16
 8000e06:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e0e:	428d      	cmp	r5, r1
 8000e10:	fa04 f403 	lsl.w	r4, r4, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x258>
 8000e16:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e20:	428d      	cmp	r5, r1
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4461      	add	r1, ip
 8000e28:	1b49      	subs	r1, r1, r5
 8000e2a:	b292      	uxth	r2, r2
 8000e2c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e30:	fb07 1115 	mls	r1, r7, r5, r1
 8000e34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e38:	fb05 f10e 	mul.w	r1, r5, lr
 8000e3c:	4291      	cmp	r1, r2
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x282>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4a:	4291      	cmp	r1, r2
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	3d02      	subs	r5, #2
 8000e50:	4462      	add	r2, ip
 8000e52:	1a52      	subs	r2, r2, r1
 8000e54:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0xfc>
 8000e5a:	4631      	mov	r1, r6
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e708      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000e60:	4639      	mov	r1, r7
 8000e62:	e6e6      	b.n	8000c32 <__udivmoddi4+0x62>
 8000e64:	4610      	mov	r0, r2
 8000e66:	e6fb      	b.n	8000c60 <__udivmoddi4+0x90>
 8000e68:	4548      	cmp	r0, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e74:	3b01      	subs	r3, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e78:	4645      	mov	r5, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x282>
 8000e7c:	462b      	mov	r3, r5
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x258>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e88:	3d02      	subs	r5, #2
 8000e8a:	4462      	add	r2, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e70a      	b.n	8000ca8 <__udivmoddi4+0xd8>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x14e>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <Init_comms>:


// TODO: Make this thread safe

void Init_comms(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 3; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e014      	b.n	8000ed4 <Init_comms+0x38>
	{
		comms.incoming_data.twist.linear[i] = 0;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <Init_comms+0x5c>)
 8000eae:	3306      	adds	r3, #6
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
		comms.incoming_data.twist.angular[i] = 0;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <Init_comms+0x5c>)
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	330c      	adds	r3, #12
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++)
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d9e7      	bls.n	8000eaa <Init_comms+0xe>
	}
	comms.uart = huart;
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <Init_comms+0x5c>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(comms.uart, rx_data_buffer, RX_DATA_BUFFER_SIZE);
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <Init_comms+0x5c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a05      	ldr	r2, [pc, #20]	; (8000efc <Init_comms+0x60>)
 8000ee6:	6811      	ldr	r1, [r2, #0]
 8000ee8:	2219      	movs	r2, #25
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 ffd3 	bl	8005e96 <HAL_UART_Receive_DMA>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	20000000 	.word	0x20000000

08000f00 <parse_command>:

void parse_command(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b08b      	sub	sp, #44	; 0x2c
 8000f04:	af00      	add	r7, sp, #0
	float* linear  = comms.incoming_data.twist.linear;
 8000f06:	4b40      	ldr	r3, [pc, #256]	; (8001008 <parse_command+0x108>)
 8000f08:	623b      	str	r3, [r7, #32]
	float* angular = comms.incoming_data.twist.angular;
 8000f0a:	4b40      	ldr	r3, [pc, #256]	; (800100c <parse_command+0x10c>)
 8000f0c:	61fb      	str	r3, [r7, #28]

	unsigned char* buffer = comms.incoming_data.in_data;
 8000f0e:	4b40      	ldr	r3, [pc, #256]	; (8001010 <parse_command+0x110>)
 8000f10:	61bb      	str	r3, [r7, #24]
	unsigned char buffer_temp[RX_DATA_BUFFER_SIZE-1];

	bool found_start = false;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t start = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for (uint8_t i = 0; i < RX_DATA_BUFFER_SIZE; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000f24:	e037      	b.n	8000f96 <parse_command+0x96>
	{
		if (found_start)
 8000f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01c      	beq.n	8000f68 <parse_command+0x68>
		{
			buffer_temp[i] = buffer[start%RX_DATA_BUFFER_SIZE];
 8000f2e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <parse_command+0x114>)
 8000f34:	fba3 1302 	umull	r1, r3, r3, r2
 8000f38:	08d9      	lsrs	r1, r3, #3
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	0099      	lsls	r1, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	441a      	add	r2, r3
 8000f4e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f52:	7812      	ldrb	r2, [r2, #0]
 8000f54:	3328      	adds	r3, #40	; 0x28
 8000f56:	443b      	add	r3, r7
 8000f58:	f803 2c28 	strb.w	r2, [r3, #-40]
			start ++;
 8000f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f60:	3301      	adds	r3, #1
 8000f62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f66:	e011      	b.n	8000f8c <parse_command+0x8c>
		}
		else if (buffer[i] == 0xFF)
 8000f68:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d10a      	bne.n	8000f8c <parse_command+0x8c>
		{
			start = i + 1;
 8000f76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			i = -1;
 8000f80:	23ff      	movs	r3, #255	; 0xff
 8000f82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			found_start = true;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (uint8_t i = 0; i < RX_DATA_BUFFER_SIZE; i++)
 8000f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f90:	3301      	adds	r3, #1
 8000f92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000f96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f9a:	2b18      	cmp	r3, #24
 8000f9c:	d9c3      	bls.n	8000f26 <parse_command+0x26>
		}
	}

	if (!found_start) return;
 8000f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d126      	bne.n	8000ffa <parse_command+0xfa>

	for (uint8_t i = 0; i < 3; i++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000fb2:	e01d      	b.n	8000ff0 <parse_command+0xf0>
	{
		memcpy(&linear[i], &buffer_temp[sizeof(float)*i], sizeof(float));
 8000fb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	6a3a      	ldr	r2, [r7, #32]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	440a      	add	r2, r1
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	601a      	str	r2, [r3, #0]
		memcpy(&angular[i], &buffer_temp[sizeof(float)*(3+i)], sizeof(float));
 8000fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000fda:	3203      	adds	r2, #3
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4639      	mov	r1, r7
 8000fe0:	440a      	add	r2, r1
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++)
 8000fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fea:	3301      	adds	r3, #1
 8000fec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000ff0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d9dd      	bls.n	8000fb4 <parse_command+0xb4>
 8000ff8:	e000      	b.n	8000ffc <parse_command+0xfc>
	if (!found_start) return;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	372c      	adds	r7, #44	; 0x2c
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200000b4 	.word	0x200000b4
 800100c:	200000c0 	.word	0x200000c0
 8001010:	20000098 	.word	0x20000098
 8001014:	51eb851f 	.word	0x51eb851f

08001018 <process_sensor_data>:

void process_sensor_data(IMU_Data_t* imuData_1, IMU_Data_t* imuData_2)
{
 8001018:	b480      	push	{r7}
 800101a:	b08d      	sub	sp, #52	; 0x34
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	comms.outgoing_sensor_data.imuData_1 = imuData_1;
 8001022:	4a40      	ldr	r2, [pc, #256]	; (8001124 <process_sensor_data+0x10c>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6753      	str	r3, [r2, #116]	; 0x74

	float imu_data[7];
	unsigned char* buffer = comms.outgoing_sensor_data.out_data;
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <process_sensor_data+0x110>)
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
	buffer[0] = 0xFF;
 800102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800102e:	22ff      	movs	r2, #255	; 0xff
 8001030:	701a      	strb	r2, [r3, #0]

	imu_data[0] = comms.outgoing_sensor_data.imuData_1->accX;
 8001032:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <process_sensor_data+0x10c>)
 8001034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
	imu_data[1] = comms.outgoing_sensor_data.imuData_1->accY;
 800103a:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <process_sensor_data+0x10c>)
 800103c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	613b      	str	r3, [r7, #16]
	imu_data[2] = comms.outgoing_sensor_data.imuData_1->accZ;
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <process_sensor_data+0x10c>)
 8001044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	617b      	str	r3, [r7, #20]
	imu_data[3] = comms.outgoing_sensor_data.imuData_1->gyroX;
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <process_sensor_data+0x10c>)
 800104c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
	imu_data[4] = comms.outgoing_sensor_data.imuData_1->gyroY;
 8001052:	4b34      	ldr	r3, [pc, #208]	; (8001124 <process_sensor_data+0x10c>)
 8001054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	61fb      	str	r3, [r7, #28]
	imu_data[5] = comms.outgoing_sensor_data.imuData_1->gyroZ;
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <process_sensor_data+0x10c>)
 800105c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	623b      	str	r3, [r7, #32]
	imu_data[6] = comms.outgoing_sensor_data.imuData_1->temp;
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <process_sensor_data+0x10c>)
 8001064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i = 0; i < 8; i++)
 800106a:	2300      	movs	r3, #0
 800106c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001070:	e012      	b.n	8001098 <process_sensor_data+0x80>
	{
		memcpy(&buffer[i*sizeof(float)+1], &imu_data[i], sizeof(float));
 8001072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	3301      	adds	r3, #1
 800107a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800107c:	4413      	add	r3, r2
 800107e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001082:	f107 010c 	add.w	r1, r7, #12
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	440a      	add	r2, r1
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 800108e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001092:	3301      	adds	r3, #1
 8001094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800109c:	2b07      	cmp	r3, #7
 800109e:	d9e8      	bls.n	8001072 <process_sensor_data+0x5a>
	}

	comms.outgoing_sensor_data.imuData_2 = imuData_2;
 80010a0:	4a20      	ldr	r2, [pc, #128]	; (8001124 <process_sensor_data+0x10c>)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	6793      	str	r3, [r2, #120]	; 0x78

	imu_data[0] = comms.outgoing_sensor_data.imuData_2->accX;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <process_sensor_data+0x10c>)
 80010a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
	imu_data[1] = comms.outgoing_sensor_data.imuData_2->accY;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <process_sensor_data+0x10c>)
 80010b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
	imu_data[2] = comms.outgoing_sensor_data.imuData_2->accZ;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <process_sensor_data+0x10c>)
 80010b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	617b      	str	r3, [r7, #20]
	imu_data[3] = comms.outgoing_sensor_data.imuData_2->gyroX;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <process_sensor_data+0x10c>)
 80010c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
	imu_data[4] = comms.outgoing_sensor_data.imuData_2->gyroY;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <process_sensor_data+0x10c>)
 80010c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	61fb      	str	r3, [r7, #28]
	imu_data[5] = comms.outgoing_sensor_data.imuData_2->gyroZ;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <process_sensor_data+0x10c>)
 80010d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	623b      	str	r3, [r7, #32]
	imu_data[6] = comms.outgoing_sensor_data.imuData_2->temp;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <process_sensor_data+0x10c>)
 80010d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i = 0; i < 8; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80010e4:	e012      	b.n	800110c <process_sensor_data+0xf4>
	{
		memcpy(&buffer[i*sizeof(float)+29], &imu_data[i], sizeof(float));
 80010e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	331d      	adds	r3, #29
 80010ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f0:	4413      	add	r3, r2
 80010f2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80010f6:	f107 010c 	add.w	r1, r7, #12
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	440a      	add	r2, r1
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; i++)
 8001102:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001106:	3301      	adds	r3, #1
 8001108:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800110c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001110:	2b07      	cmp	r3, #7
 8001112:	d9e8      	bls.n	80010e6 <process_sensor_data+0xce>
	}
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3734      	adds	r7, #52	; 0x34
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000094 	.word	0x20000094
 8001128:	200000cc 	.word	0x200000cc

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_DMA_Init+0x3c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <MX_DMA_Init+0x3c>)
 800113c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_DMA_Init+0x3c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2010      	movs	r0, #16
 8001154:	f001 ff43 	bl	8002fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001158:	2010      	movs	r0, #16
 800115a:	f001 ff5c 	bl	8003016 <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_GPIO_Init+0x80>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_GPIO_Init+0x80>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_GPIO_Init+0x80>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_GPIO_Init+0x80>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <MX_GPIO_Init+0x80>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_GPIO_Init+0x80>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011c2:	f002 fc37 	bl	8003a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80011c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0x84>)
 80011e0:	f002 faa4 	bl	800372c <HAL_GPIO_Init>

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020400 	.word	0x40020400

080011f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_I2C1_Init+0x50>)
 80011fa:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_I2C1_Init+0x54>)
 80011fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_I2C1_Init+0x50>)
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <MX_I2C1_Init+0x58>)
 8001202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_I2C1_Init+0x50>)
 8001212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_I2C1_Init+0x50>)
 8001232:	f002 fc19 	bl	8003a68 <HAL_I2C_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800123c:	f001 f840 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000110 	.word	0x20000110
 8001248:	40005400 	.word	0x40005400
 800124c:	000186a0 	.word	0x000186a0

08001250 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <HAL_I2C_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12b      	bne.n	80012ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128e:	23c0      	movs	r3, #192	; 0xc0
 8001290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001292:	2312      	movs	r3, #18
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129e:	2304      	movs	r3, #4
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <HAL_I2C_MspInit+0x8c>)
 80012aa:	f002 fa3f 	bl	800372c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 80012b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_I2C_MspInit+0x88>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400

080012e0 <IMU_Init>:
	bool setAddressHigh,
	I2C_HandleTypeDef* hi2c,
	GPIO_TypeDef* addressPinReg,
	uint16_t addressPin
)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b09c      	sub	sp, #112	; 0x70
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	460b      	mov	r3, r1
 80012ee:	72fb      	strb	r3, [r7, #11]
	IMU_t ret;

	ret.addressPin = addressPinReg;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
	ret.addressPinVal = addressPin;
 80012f4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80012f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if (setAddressHigh)
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <IMU_Init+0x28>
	{
		ret.address = ADDRESS_HIGH;
 8001302:	2369      	movs	r3, #105	; 0x69
 8001304:	823b      	strh	r3, [r7, #16]
 8001306:	e001      	b.n	800130c <IMU_Init+0x2c>
	}
	else
	{
		ret.address = ADDRESS_LOW;
 8001308:	2368      	movs	r3, #104	; 0x68
 800130a:	823b      	strh	r3, [r7, #16]
	}

	startPins(&ret);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fdf9 	bl	8001f08 <startPins>

	ret.i2c = hi2c;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	66fb      	str	r3, [r7, #108]	; 0x6c

	initialize(&ret);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fe0f 	bl	8001f42 <initialize>

	return ret;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4618      	mov	r0, r3
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	2260      	movs	r2, #96	; 0x60
 800132e:	4619      	mov	r1, r3
 8001330:	f005 fb1a 	bl	8006968 <memcpy>
}
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	3770      	adds	r7, #112	; 0x70
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <IMU_selfTest>:

bool IMU_selfTest(IMU_t* imu)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0a6      	sub	sp, #152	; 0x98
 8001340:	af04      	add	r7, sp, #16
 8001342:	6078      	str	r0, [r7, #4]
	uint8_t test_recv[4];

	float GyroXDisabled, GyroYDisabled, GyroZDisabled;
	float AccelXDisabled, AccelYDisabled, AccelZDisabled;

	uint8_t normalMeas[1] = {0b00011000};
 8001344:	2318      	movs	r3, #24
 8001346:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), GYRO_CONFIG, 1,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	b299      	uxth	r1, r3
 8001354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	221b      	movs	r2, #27
 8001368:	f002 fcc2 	bl	8003cf0 <HAL_I2C_Mem_Write>
			normalMeas, 1, HAL_MAX_DELAY);

	IMU_readAccelRegisters(imu);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fa99 	bl	80018a4 <IMU_readAccelRegisters>
	IMU_readGyroRegisters(imu);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fae4 	bl	8001940 <IMU_readGyroRegisters>

	GyroXDisabled = imu->imuData.gyroX;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	66fb      	str	r3, [r7, #108]	; 0x6c
	GyroYDisabled = imu->imuData.gyroY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	66bb      	str	r3, [r7, #104]	; 0x68
	GyroZDisabled = imu->imuData.gyroZ;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	667b      	str	r3, [r7, #100]	; 0x64

	AccelXDisabled = imu->imuData.accX;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	663b      	str	r3, [r7, #96]	; 0x60
	AccelYDisabled = imu->imuData.accY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	65fb      	str	r3, [r7, #92]	; 0x5c
	AccelZDisabled = imu->imuData.accZ;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139a:	65bb      	str	r3, [r7, #88]	; 0x58

	float StrGyroX, StrGyroY, StrGyroZ;
	float StrAccelX, StrAccelY, StrAccelZ;

	uint8_t selfTest = 0xF8; //0b11111000
 800139c:	23f8      	movs	r3, #248	; 0xf8
 800139e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), GYRO_CONFIG, 1,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	b299      	uxth	r1, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f107 030f 	add.w	r3, r7, #15
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	221b      	movs	r2, #27
 80013c0:	f002 fc96 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&selfTest, sizeof(selfTest), HAL_MAX_DELAY);

	IMU_readAccelRegisters(imu);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 fa6d 	bl	80018a4 <IMU_readAccelRegisters>
	IMU_readGyroRegisters(imu);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fab8 	bl	8001940 <IMU_readGyroRegisters>

	StrGyroX = imu->imuData.gyroX - GyroXDisabled;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80013d6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	StrGyroY = imu->imuData.gyroY - GyroYDisabled;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80013e8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	StrGyroZ = imu->imuData.gyroZ - GyroZDisabled;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80013fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80013fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001402:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	StrAccelX = imu->imuData.accX - AccelXDisabled;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800140c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	StrAccelY = imu->imuData.accY - AccelYDisabled;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800141e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001426:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	StrAccelZ = imu->imuData.accZ - AccelZDisabled;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001430:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001438:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), GYRO_CONFIG, 1,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b299      	uxth	r1, r3
 8001448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	221b      	movs	r2, #27
 800145c:	f002 fc48 	bl	8003cf0 <HAL_I2C_Mem_Write>
			normalMeas, sizeof(normalMeas), HAL_MAX_DELAY);

	HAL_I2C_Mem_Read(imu->i2c, (imu->address<<1) | 0x01, SELF_TEST_X, 1,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	b21b      	sxth	r3, r3
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	b21b      	sxth	r3, r3
 8001472:	b299      	uxth	r1, r3
 8001474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2304      	movs	r3, #4
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	220d      	movs	r2, #13
 8001488:	f002 fd2c 	bl	8003ee4 <HAL_I2C_Mem_Read>
	test_recv, 4, HAL_MAX_DELAY);

	uint8_t test_a_x, test_a_y, test_a_z;
	uint8_t test_g_x, test_g_y, test_g_z;

	test_a_x = (test_recv[0] & 0b11100000) >> 1
 800148c:	7d3b      	ldrb	r3, [r7, #20]
 800148e:	105b      	asrs	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001496:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			| ((test_recv[3] & 0b00110000) << 4);
	test_a_y = (test_recv[1] & 0b11100000) >> 1
 800149a:	7d7b      	ldrb	r3, [r7, #21]
 800149c:	105b      	asrs	r3, r3, #1
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014a4:	b25a      	sxtb	r2, r3
			| ((test_recv[3] & 0b00001100) << 2);
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b25b      	sxtb	r3, r3
	test_a_y = (test_recv[1] & 0b11100000) >> 1
 80014b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	test_a_z = (test_recv[2] & 0b11100000) >> 1
 80014ba:	7dbb      	ldrb	r3, [r7, #22]
 80014bc:	105b      	asrs	r3, r3, #1
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014c4:	b25a      	sxtb	r2, r3
			| ((test_recv[3] & 0b00000011));
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4313      	orrs	r3, r2
 80014d2:	b25b      	sxtb	r3, r3
	test_a_z = (test_recv[2] & 0b11100000) >> 1
 80014d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	test_g_x = (test_recv[0] & 0b00011111);
 80014d8:	7d3b      	ldrb	r3, [r7, #20]
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	test_g_y = (test_recv[1] & 0b00011111);
 80014e2:	7d7b      	ldrb	r3, [r7, #21]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	test_g_z = (test_recv[2] & 0b00011111);
 80014ec:	7dbb      	ldrb	r3, [r7, #22]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	float factTrimGx = 0, factTrimGy = 0, factTrimGz = 0;
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	67fb      	str	r3, [r7, #124]	; 0x7c
	float factTrimAx = 0, factTrimAy = 0, factTrimAz = 0;
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	67bb      	str	r3, [r7, #120]	; 0x78
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	677b      	str	r3, [r7, #116]	; 0x74
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	673b      	str	r3, [r7, #112]	; 0x70

	if (test_g_x != 0)
 800151e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00d      	beq.n	8001542 <IMU_selfTest+0x206>
		factTrimGx = factoryTrimGyro(test_g_x);
 8001526:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd38 	bl	8001fa0 <factoryTrimGyro>
 8001530:	ec53 2b10 	vmov	r2, r3, d0
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fae2 	bl	8000b00 <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (test_g_y != 0)
 8001542:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00d      	beq.n	8001566 <IMU_selfTest+0x22a>
		factTrimGy = factoryTrimGyro(test_g_y);
 800154a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fd26 	bl	8001fa0 <factoryTrimGyro>
 8001554:	ec53 2b10 	vmov	r2, r3, d0
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fad0 	bl	8000b00 <__aeabi_d2f>
 8001560:	4603      	mov	r3, r0
 8001562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	if (test_g_z != 0)
 8001566:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00c      	beq.n	8001588 <IMU_selfTest+0x24c>
		factTrimGz = factoryTrimGyro(test_g_z);
 800156e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001572:	4618      	mov	r0, r3
 8001574:	f000 fd14 	bl	8001fa0 <factoryTrimGyro>
 8001578:	ec53 2b10 	vmov	r2, r3, d0
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fabe 	bl	8000b00 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (test_a_x != 0)
 8001588:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00c      	beq.n	80015aa <IMU_selfTest+0x26e>
		factTrimAx = factoryTrimAccel(test_a_x);
 8001590:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fd2f 	bl	8001ff8 <factoryTrimAccel>
 800159a:	ec53 2b10 	vmov	r2, r3, d0
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff faad 	bl	8000b00 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	67bb      	str	r3, [r7, #120]	; 0x78
	if (test_a_y != 0)
 80015aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <IMU_selfTest+0x290>
		factTrimAy = factoryTrimAccel(test_a_y);
 80015b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fd1e 	bl	8001ff8 <factoryTrimAccel>
 80015bc:	ec53 2b10 	vmov	r2, r3, d0
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fa9c 	bl	8000b00 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	677b      	str	r3, [r7, #116]	; 0x74
	if (test_a_z != 0)
 80015cc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <IMU_selfTest+0x2b2>
		factTrimAz = factoryTrimAccel(test_a_z);
 80015d4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fd0d 	bl	8001ff8 <factoryTrimAccel>
 80015de:	ec53 2b10 	vmov	r2, r3, d0
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fa8b 	bl	8000b00 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	673b      	str	r3, [r7, #112]	; 0x70

	float accXRes = (StrAccelX - factTrimAx)/factTrimAx * 100;
 80015ee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80015f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80015f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015fa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80015fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001602:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001790 <IMU_selfTest+0x454>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float accYRes = (StrAccelY - factTrimAy)/factTrimAy * 100;
 800160e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001612:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800161a:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800161e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001622:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001790 <IMU_selfTest+0x454>
 8001626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float accZRes = (StrAccelZ - factTrimAz)/factTrimAz * 100;
 800162e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001632:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001636:	ee77 6a67 	vsub.f32	s13, s14, s15
 800163a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800163e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001642:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001790 <IMU_selfTest+0x454>
 8001646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float gyroXRes = (StrGyroX - factTrimGx)/factTrimGx * 100;
 800164e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001652:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001656:	ee77 6a67 	vsub.f32	s13, s14, s15
 800165a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800165e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001662:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001790 <IMU_selfTest+0x454>
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float gyroYRes = (StrGyroY - factTrimGy)/factTrimGy * 100;
 800166e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001672:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001676:	ee77 6a67 	vsub.f32	s13, s14, s15
 800167a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800167e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001682:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001790 <IMU_selfTest+0x454>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float gyroZRes = (StrGyroZ - factTrimGz)/factTrimGz * 100;
 800168e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001692:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001696:	ee77 6a67 	vsub.f32	s13, s14, s15
 800169a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800169e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001790 <IMU_selfTest+0x454>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	edc7 7a08 	vstr	s15, [r7, #32]

	bool passAccX = fabs(accXRes) < 14;
 80016ae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016b2:	eef0 7ae7 	vabs.f32	s15, s15
 80016b6:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80016ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	bf4c      	ite	mi
 80016c4:	2301      	movmi	r3, #1
 80016c6:	2300      	movpl	r3, #0
 80016c8:	77fb      	strb	r3, [r7, #31]
	bool passAccY = fabs(accYRes) < 14;
 80016ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016ce:	eef0 7ae7 	vabs.f32	s15, s15
 80016d2:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80016d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	bf4c      	ite	mi
 80016e0:	2301      	movmi	r3, #1
 80016e2:	2300      	movpl	r3, #0
 80016e4:	77bb      	strb	r3, [r7, #30]
	bool passAccZ = fabs(accZRes) < 14;
 80016e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016ea:	eef0 7ae7 	vabs.f32	s15, s15
 80016ee:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	bf4c      	ite	mi
 80016fc:	2301      	movmi	r3, #1
 80016fe:	2300      	movpl	r3, #0
 8001700:	777b      	strb	r3, [r7, #29]

	bool passGyroX = fabs(gyroXRes) < 14;
 8001702:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001706:	eef0 7ae7 	vabs.f32	s15, s15
 800170a:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800170e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001716:	bf4c      	ite	mi
 8001718:	2301      	movmi	r3, #1
 800171a:	2300      	movpl	r3, #0
 800171c:	773b      	strb	r3, [r7, #28]
	bool passGyroY = fabs(gyroYRes) < 14;
 800171e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001722:	eef0 7ae7 	vabs.f32	s15, s15
 8001726:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800172a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001732:	bf4c      	ite	mi
 8001734:	2301      	movmi	r3, #1
 8001736:	2300      	movpl	r3, #0
 8001738:	76fb      	strb	r3, [r7, #27]
	bool passGyroZ = fabs(gyroZRes) < 14;
 800173a:	edd7 7a08 	vldr	s15, [r7, #32]
 800173e:	eef0 7ae7 	vabs.f32	s15, s15
 8001742:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	bf4c      	ite	mi
 8001750:	2301      	movmi	r3, #1
 8001752:	2300      	movpl	r3, #0
 8001754:	76bb      	strb	r3, [r7, #26]

	return passAccX && passAccY && passAccZ && passGyroX
			&& passGyroY && passGyroZ;
 8001756:	7ffb      	ldrb	r3, [r7, #31]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <IMU_selfTest+0x442>
	return passAccX && passAccY && passAccZ && passGyroX
 800175c:	7fbb      	ldrb	r3, [r7, #30]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <IMU_selfTest+0x442>
 8001762:	7f7b      	ldrb	r3, [r7, #29]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00a      	beq.n	800177e <IMU_selfTest+0x442>
 8001768:	7f3b      	ldrb	r3, [r7, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <IMU_selfTest+0x442>
			&& passGyroY && passGyroZ;
 800176e:	7efb      	ldrb	r3, [r7, #27]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <IMU_selfTest+0x442>
 8001774:	7ebb      	ldrb	r3, [r7, #26]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <IMU_selfTest+0x442>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <IMU_selfTest+0x444>
 800177e:	2300      	movs	r3, #0
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	3788      	adds	r7, #136	; 0x88
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	42c80000 	.word	0x42c80000

08001794 <IMU_setFullScaleGyro>:
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), SMPLRT_DIV, 1,
			&rate_divider, 1, HAL_MAX_DELAY);
}

void IMU_setFullScaleGyro(IMU_t* imu, Gyro_FullScale gyro_fs_setting)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
	uint8_t config = (uint8_t)(gyro_fs_setting << 3);
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), GYRO_CONFIG, 1,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	881b      	ldrh	r3, [r3, #0]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	b299      	uxth	r1, r3
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2301      	movs	r3, #1
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f107 030f 	add.w	r3, r7, #15
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	221b      	movs	r2, #27
 80017c8:	f002 fa92 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&config, 1, HAL_MAX_DELAY);

	switch(gyro_fs_setting)
 80017cc:	78fb      	ldrb	r3, [r7, #3]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d81a      	bhi.n	8001808 <IMU_setFullScaleGyro+0x74>
 80017d2:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <IMU_setFullScaleGyro+0x44>)
 80017d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017f1 	.word	0x080017f1
 80017e0:	080017f9 	.word	0x080017f9
 80017e4:	08001801 	.word	0x08001801
	{
		case 0x00: // 250
			imu->LSB_deg_s = GYRO_FS_250_RANGE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <IMU_setFullScaleGyro+0x7c>)
 80017ec:	61da      	str	r2, [r3, #28]
			break;
 80017ee:	e00b      	b.n	8001808 <IMU_setFullScaleGyro+0x74>
		case 0x01: //500
			imu->LSB_deg_s = GYRO_FS_500_RANGE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <IMU_setFullScaleGyro+0x80>)
 80017f4:	61da      	str	r2, [r3, #28]
			break;
 80017f6:	e007      	b.n	8001808 <IMU_setFullScaleGyro+0x74>
		case 0x02: // 1000
			imu->LSB_deg_s = GYRO_FS_1000_RANGE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <IMU_setFullScaleGyro+0x84>)
 80017fc:	61da      	str	r2, [r3, #28]
		  break;
 80017fe:	e003      	b.n	8001808 <IMU_setFullScaleGyro+0x74>
		case 0x03: // 2000
			imu->LSB_deg_s = GYRO_FS_2000_RANGE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <IMU_setFullScaleGyro+0x88>)
 8001804:	61da      	str	r2, [r3, #28]
			break;
 8001806:	bf00      	nop
	}
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	43030000 	.word	0x43030000
 8001814:	42830000 	.word	0x42830000
 8001818:	42033333 	.word	0x42033333
 800181c:	41833333 	.word	0x41833333

08001820 <IMU_setFullScaleAccel>:

void IMU_setFullScaleAccel(IMU_t* imu, Accel_FullScale accel_fs_setting)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
	uint8_t config = (uint8_t)(accel_fs_setting << 3);
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), ACCEL_CONFIG, 1,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	b299      	uxth	r1, r3
 8001840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2301      	movs	r3, #1
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f107 030f 	add.w	r3, r7, #15
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	221c      	movs	r2, #28
 8001854:	f002 fa4c 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&config, 1, HAL_MAX_DELAY);

	switch(accel_fs_setting)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	2b03      	cmp	r3, #3
 800185c:	d81e      	bhi.n	800189c <IMU_setFullScaleAccel+0x7c>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <IMU_setFullScaleAccel+0x44>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	08001875 	.word	0x08001875
 8001868:	0800187f 	.word	0x0800187f
 800186c:	08001889 	.word	0x08001889
 8001870:	08001893 	.word	0x08001893
	{
		case 0x00: // 2
			imu->LSB_g = ACCEL_FS_2_RANGE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800187a:	619a      	str	r2, [r3, #24]
			break;
 800187c:	e00e      	b.n	800189c <IMU_setFullScaleAccel+0x7c>
		case 0x01: // 4
			imu->LSB_g = ACCEL_FS_4_RANGE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001884:	619a      	str	r2, [r3, #24]
			break;
 8001886:	e009      	b.n	800189c <IMU_setFullScaleAccel+0x7c>
		case 0x02: // 8
			imu->LSB_g = ACCEL_FS_8_RANGE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800188e:	619a      	str	r2, [r3, #24]
			break;
 8001890:	e004      	b.n	800189c <IMU_setFullScaleAccel+0x7c>
		case 0x03: // 16
			imu->LSB_g = ACCEL_FS_16_RANGE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001898:	619a      	str	r2, [r3, #24]
			break;
 800189a:	bf00      	nop
	}
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <IMU_readAccelRegisters>:

void IMU_readAccelRegisters(IMU_t* imu)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	6078      	str	r0, [r7, #4]
	int16_t accelX, accelY, accelZ;
	uint8_t accelRec[6];

	HAL_I2C_Mem_Read(imu->i2c,(imu->address<<1) | 0x01, ACCEL_XOUT_H, 1,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	b21b      	sxth	r3, r3
 80018be:	b299      	uxth	r1, r3
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2306      	movs	r3, #6
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2301      	movs	r3, #1
 80018d2:	223b      	movs	r2, #59	; 0x3b
 80018d4:	f002 fb06 	bl	8003ee4 <HAL_I2C_Mem_Read>
			accelRec, 6, HAL_MAX_DELAY);

	accelX = (int16_t)(accelRec[0] << 8 | accelRec[1]);
 80018d8:	7b3b      	ldrb	r3, [r7, #12]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b21a      	sxth	r2, r3
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	82fb      	strh	r3, [r7, #22]
	accelY = (int16_t)(accelRec[2] << 8 | accelRec[3]);
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	82bb      	strh	r3, [r7, #20]
	accelZ = (int16_t)(accelRec[4] << 8 | accelRec[5]);
 80018f4:	7c3b      	ldrb	r3, [r7, #16]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	7c7b      	ldrb	r3, [r7, #17]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4313      	orrs	r3, r2
 8001900:	827b      	strh	r3, [r7, #18]

	imu->imuData.accX = accelX;
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	imu->imuData.accY = accelY;
 8001914:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->imuData.accZ = accelZ;
 8001926:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <IMU_readGyroRegisters>:

void IMU_readGyroRegisters(IMU_t* imu)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af04      	add	r7, sp, #16
 8001946:	6078      	str	r0, [r7, #4]
	int16_t gyroX, gyroY, gyroZ;
	uint8_t gyroRec[6];

	HAL_I2C_Mem_Read(imu->i2c,(imu->address<<1) | 0x01,GYRO_XOUT_H, 1,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b21b      	sxth	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b21b      	sxth	r3, r3
 800195a:	b299      	uxth	r1, r3
 800195c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2306      	movs	r3, #6
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	2243      	movs	r2, #67	; 0x43
 8001970:	f002 fab8 	bl	8003ee4 <HAL_I2C_Mem_Read>
			gyroRec, 6, HAL_MAX_DELAY);

	gyroX = (int16_t)(gyroRec[0] << 8 | gyroRec[1]);
 8001974:	7b3b      	ldrb	r3, [r7, #12]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	7b7b      	ldrb	r3, [r7, #13]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	82fb      	strh	r3, [r7, #22]
	gyroY = (int16_t)(gyroRec[2] << 8 | gyroRec[3]);
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b21a      	sxth	r2, r3
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	b21b      	sxth	r3, r3
 800198c:	4313      	orrs	r3, r2
 800198e:	82bb      	strh	r3, [r7, #20]
	gyroZ = (int16_t)(gyroRec[4] << 8 | gyroRec[5]);
 8001990:	7c3b      	ldrb	r3, [r7, #16]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	7c7b      	ldrb	r3, [r7, #17]
 8001998:	b21b      	sxth	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	827b      	strh	r3, [r7, #18]

	imu->imuData.gyroX = gyroX;
 800199e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	imu->imuData.gyroY = gyroY;
 80019b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	imu->imuData.gyroZ = gyroZ;
 80019c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80019d4:	bf00      	nop
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	0000      	movs	r0, r0
	...

080019e0 <IMU_readTempRegisters>:

void IMU_readTempRegisters(IMU_t* imu)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	6078      	str	r0, [r7, #4]
	int16_t temp;
	uint8_t tempRecv[2];

	HAL_I2C_Mem_Read(imu->i2c, (imu->address<<1) | 0x01, TEMP_OUT_H, 1,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	b299      	uxth	r1, r3
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a00:	9302      	str	r3, [sp, #8]
 8001a02:	2302      	movs	r3, #2
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2241      	movs	r2, #65	; 0x41
 8001a10:	f002 fa68 	bl	8003ee4 <HAL_I2C_Mem_Read>
			tempRecv, 2, HAL_MAX_DELAY);

	temp = (int16_t)(tempRecv[0] << 8 | tempRecv[1]);
 8001a14:	7b3b      	ldrb	r3, [r7, #12]
 8001a16:	021b      	lsls	r3, r3, #8
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	81fb      	strh	r3, [r7, #14]
	temp = temp / 340 + 36.53;
 8001a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a26:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <IMU_readTempRegisters+0x98>)
 8001a28:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2c:	11d2      	asrs	r2, r2, #7
 8001a2e:	17db      	asrs	r3, r3, #31
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd21 	bl	800047c <__aeabi_i2d>
 8001a3a:	a30d      	add	r3, pc, #52	; (adr r3, 8001a70 <IMU_readTempRegisters+0x90>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fbd0 	bl	80001e4 <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f830 	bl	8000ab0 <__aeabi_d2iz>
 8001a50:	4603      	mov	r3, r0
 8001a52:	81fb      	strh	r3, [r7, #14]

	imu->imuData.temp = temp;
 8001a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0a3d70a4 	.word	0x0a3d70a4
 8001a74:	404243d7 	.word	0x404243d7
 8001a78:	60606061 	.word	0x60606061

08001a7c <IMU_updateData>:

void IMU_updateData(IMU_t* imu)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	IMU_readTempRegisters(imu);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffab 	bl	80019e0 <IMU_readTempRegisters>
	IMU_readGyroRegisters(imu);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff58 	bl	8001940 <IMU_readGyroRegisters>
	IMU_readAccelRegisters(imu);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff07 	bl	80018a4 <IMU_readAccelRegisters>
	correct_data(imu);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f99a 	bl	8001dd0 <correct_data>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <IMU_resetRegisters>:

void IMU_resetRegisters(IMU_t* imu)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	6078      	str	r0, [r7, #4]
	uint8_t resetRegisters = 0x07; // 0b00000111
 8001aac:	2307      	movs	r3, #7
 8001aae:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), SIGNAL_PATH_RESET, 1,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	b299      	uxth	r1, r3
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f107 030f 	add.w	r3, r7, #15
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2301      	movs	r3, #1
 8001ace:	2268      	movs	r2, #104	; 0x68
 8001ad0:	f002 f90e 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&resetRegisters, 1, HAL_MAX_DELAY);
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <IMU_sleepMode>:

void IMU_sleepMode(IMU_t* imu, bool sleep)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af04      	add	r7, sp, #16
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	uint8_t pwr_mgmt = 0x00;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(imu->i2c, (imu->address<<1) | 0x01, PWR_MGMT_1, 1,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	b299      	uxth	r1, r3
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	f107 030f 	add.w	r3, r7, #15
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2301      	movs	r3, #1
 8001b12:	226b      	movs	r2, #107	; 0x6b
 8001b14:	f002 f9e6 	bl	8003ee4 <HAL_I2C_Mem_Read>
			&pwr_mgmt, 1, HAL_MAX_DELAY);

	pwr_mgmt = (pwr_mgmt & 0b10111111) | ((sleep?0x01:0x00) << 6);
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b20:	b25b      	sxtb	r3, r3
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	2a00      	cmp	r2, #0
 8001b26:	d001      	beq.n	8001b2c <IMU_sleepMode+0x50>
 8001b28:	2240      	movs	r2, #64	; 0x40
 8001b2a:	e000      	b.n	8001b2e <IMU_sleepMode+0x52>
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), PWR_MGMT_1, 1,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	b299      	uxth	r1, r3
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	f107 030f 	add.w	r3, r7, #15
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	226b      	movs	r2, #107	; 0x6b
 8001b56:	f002 f8cb 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <IMU_selectClockSource>:
void IMU_selectClockSource(IMU_t* imu, Clock_Select clock_sel)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b088      	sub	sp, #32
 8001b66:	af04      	add	r7, sp, #16
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
	uint8_t pwr_mgmt = 0x00;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(imu->i2c, (imu->address<<1) | 0x01, PWR_MGMT_1, 1,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	b299      	uxth	r1, r3
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	f107 030f 	add.w	r3, r7, #15
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	226b      	movs	r2, #107	; 0x6b
 8001b9a:	f002 f9a3 	bl	8003ee4 <HAL_I2C_Mem_Read>
			&pwr_mgmt, 1, HAL_MAX_DELAY);

	pwr_mgmt = (pwr_mgmt & 0b11111000) | clock_sel;
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	f023 0307 	bic.w	r3, r3, #7
 8001ba6:	b25a      	sxtb	r2, r3
 8001ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b25b      	sxtb	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), PWR_MGMT_1, 1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	b299      	uxth	r1, r3
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	f107 030f 	add.w	r3, r7, #15
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	226b      	movs	r2, #107	; 0x6b
 8001bd4:	f002 f88c 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <IMU_disableTemp>:

void IMU_disableTemp(IMU_t* imu, bool disable)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af04      	add	r7, sp, #16
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
	uint8_t pwr_mgmt = 0x00;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(imu->i2c, (imu->address<<1) | 0x01, PWR_MGMT_1, 1,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	b299      	uxth	r1, r3
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	f107 030f 	add.w	r3, r7, #15
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	226b      	movs	r2, #107	; 0x6b
 8001c18:	f002 f964 	bl	8003ee4 <HAL_I2C_Mem_Read>
			&pwr_mgmt, 1, HAL_MAX_DELAY);

	pwr_mgmt = (pwr_mgmt & 0b11110111) | (disable?0x01:0x00) << 3;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	b25b      	sxtb	r3, r3
 8001c20:	f023 0308 	bic.w	r3, r3, #8
 8001c24:	b25b      	sxtb	r3, r3
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	d001      	beq.n	8001c30 <IMU_disableTemp+0x50>
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	e000      	b.n	8001c32 <IMU_disableTemp+0x52>
 8001c30:	2200      	movs	r2, #0
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), PWR_MGMT_1, 1,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	b299      	uxth	r1, r3
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	f107 030f 	add.w	r3, r7, #15
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2301      	movs	r3, #1
 8001c58:	226b      	movs	r2, #107	; 0x6b
 8001c5a:	f002 f849 	bl	8003cf0 <HAL_I2C_Mem_Write>
			&pwr_mgmt, 1, HAL_MAX_DELAY);
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <calibrate_imu>:
	HAL_I2C_Mem_Write(imu->i2c, (imu->address<<1), PWR_MGMT_2, 1,
			&pwr_mgmt2, 1, HAL_MAX_DELAY);
}

static void calibrate_imu(IMU_t* imu)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b08a      	sub	sp, #40	; 0x28
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	float buffAx = 0, buffAy = 0, buffAz = 0;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
	float buffGx = 0, buffGy = 0, buffGz = 0;
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
	const int TOTAL_MEASUREMENTS = 200;
 8001c92:	23c8      	movs	r3, #200	; 0xc8
 8001c94:	60bb      	str	r3, [r7, #8]

	for (int measIter = 0; measIter < TOTAL_MEASUREMENTS; measIter ++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e046      	b.n	8001d2a <calibrate_imu+0xc4>
	{
		IMU_readTempRegisters(imu);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fe9f 	bl	80019e0 <IMU_readTempRegisters>
		IMU_readGyroRegisters(imu);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fe4c 	bl	8001940 <IMU_readGyroRegisters>
		IMU_readAccelRegisters(imu);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fdfb 	bl	80018a4 <IMU_readAccelRegisters>

		buffAx += imu->imuData.accX;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001cb4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		buffAy += imu->imuData.accY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001cc6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cce:	edc7 7a08 	vstr	s15, [r7, #32]
		buffAz += imu->imuData.accZ + imu->LSB_g;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	edd3 7a06 	vldr	s15, [r3, #24]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	edc7 7a07 	vstr	s15, [r7, #28]

		buffGx += imu->imuData.gyroX;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001cf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a06 	vstr	s15, [r7, #24]
		buffGy += imu->imuData.gyroY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001d06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	edc7 7a05 	vstr	s15, [r7, #20]
		buffGz += imu->imuData.gyroZ;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001d18:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int measIter = 0; measIter < TOTAL_MEASUREMENTS; measIter ++)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	dbb4      	blt.n	8001c9c <calibrate_imu+0x36>
	}

	imu->calibAx = buffAx / TOTAL_MEASUREMENTS;
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->calibAy = buffAy / TOTAL_MEASUREMENTS;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d54:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->calibAz = buffAz / TOTAL_MEASUREMENTS;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	imu->calibGx = buffGx / TOTAL_MEASUREMENTS;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d84:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	imu->calibGy = buffGy / TOTAL_MEASUREMENTS;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	imu->calibGz = buffGz / TOTAL_MEASUREMENTS;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	0000      	movs	r0, r0
 8001dcc:	0000      	movs	r0, r0
	...

08001dd0 <correct_data>:

static void correct_data(IMU_t* imu)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	imu->imuData.accX = (imu->imuData.accX - imu->calibAx)/imu->LSB_g;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	ed93 7a06 	vldr	s14, [r3, #24]
 8001dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	imu->imuData.accY = (imu->imuData.accY - imu->calibAy)/imu->LSB_g;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e04:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	imu->imuData.accZ = (imu->imuData.accZ - imu->calibAz)/imu->LSB_g;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	imu->imuData.gyroX = (imu->imuData.gyroX - imu->calibGx)/imu->LSB_deg_s * 0.01745329; //deg to rad
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e52:	ee16 0a90 	vmov	r0, s13
 8001e56:	f7fe fb23 	bl	80004a0 <__aeabi_f2d>
 8001e5a:	a329      	add	r3, pc, #164	; (adr r3, 8001f00 <correct_data+0x130>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fb76 	bl	8000550 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fe48 	bl	8000b00 <__aeabi_d2f>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	64da      	str	r2, [r3, #76]	; 0x4c
	imu->imuData.gyroY = (imu->imuData.gyroY - imu->calibGy)/imu->LSB_deg_s * 0.01745329;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e90:	ee16 0a90 	vmov	r0, s13
 8001e94:	f7fe fb04 	bl	80004a0 <__aeabi_f2d>
 8001e98:	a319      	add	r3, pc, #100	; (adr r3, 8001f00 <correct_data+0x130>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fb57 	bl	8000550 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7fe fe29 	bl	8000b00 <__aeabi_d2f>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50
	imu->imuData.gyroZ = (imu->imuData.gyroZ - imu->calibGz)/imu->LSB_deg_s * 0.01745329;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ece:	ee16 0a90 	vmov	r0, s13
 8001ed2:	f7fe fae5 	bl	80004a0 <__aeabi_f2d>
 8001ed6:	a30a      	add	r3, pc, #40	; (adr r3, 8001f00 <correct_data+0x130>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb38 	bl	8000550 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe fe0a 	bl	8000b00 <__aeabi_d2f>
 8001eec:	4602      	mov	r2, r0
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	7707c94d 	.word	0x7707c94d
 8001f04:	3f91df46 	.word	0x3f91df46

08001f08 <startPins>:

static void startPins(IMU_t* imu)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	if (imu->address == ADDRESS_HIGH)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b69      	cmp	r3, #105	; 0x69
 8001f16:	d108      	bne.n	8001f2a <startPins+0x22>
	{
		HAL_GPIO_WritePin(
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	f001 fd86 	bl	8003a34 <HAL_GPIO_WritePin>
			imu->addressPin,
			imu->addressPinVal,
			GPIO_PIN_RESET
		);
	}
}
 8001f28:	e007      	b.n	8001f3a <startPins+0x32>
		HAL_GPIO_WritePin(
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f32:	2200      	movs	r2, #0
 8001f34:	4619      	mov	r1, r3
 8001f36:	f001 fd7d 	bl	8003a34 <HAL_GPIO_WritePin>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <initialize>:

static bool initialize(IMU_t* imu)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	IMU_sleepMode(imu, false);
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fdc5 	bl	8001adc <IMU_sleepMode>
	IMU_resetRegisters(imu);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fda6 	bl	8001aa4 <IMU_resetRegisters>
	IMU_disableTemp(imu, false);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fe40 	bl	8001be0 <IMU_disableTemp>
	IMU_setFullScaleAccel(imu, ACCEL_FULLSCALE_16);
 8001f60:	2103      	movs	r1, #3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fc5c 	bl	8001820 <IMU_setFullScaleAccel>
	IMU_setFullScaleGyro(imu, GYRO_FULLSCALE_1000);
 8001f68:	2102      	movs	r1, #2
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff fc12 	bl	8001794 <IMU_setFullScaleGyro>
	IMU_selectClockSource(imu, INTERNAL_8MHZ);
 8001f70:	2100      	movs	r1, #0
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fdf5 	bl	8001b62 <IMU_selectClockSource>
	calibrate_imu(imu);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fe74 	bl	8001c66 <calibrate_imu>

	if(!IMU_selfTest(imu))
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff f9dc 	bl	800133c <IMU_selfTest>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <initialize+0x52>
	{
		return INIT_FAIL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <initialize+0x54>
	}

	return INIT_SUCCESS;
 8001f94:	2301      	movs	r3, #1
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <factoryTrimGyro>:

static double factoryTrimGyro(uint8_t testVal)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  return 25 * 131 * pow(1.046, testVal-1);
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa64 	bl	800047c <__aeabi_i2d>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	ec43 2b11 	vmov	d1, r2, r3
 8001fbc:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8001fe8 <factoryTrimGyro+0x48>
 8001fc0:	f004 fce0 	bl	8006984 <pow>
 8001fc4:	ec51 0b10 	vmov	r0, r1, d0
 8001fc8:	a309      	add	r3, pc, #36	; (adr r3, 8001ff0 <factoryTrimGyro+0x50>)
 8001fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fce:	f7fe fabf 	bl	8000550 <__aeabi_dmul>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fda:	eeb0 0a47 	vmov.f32	s0, s14
 8001fde:	eef0 0a67 	vmov.f32	s1, s15
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	7ef9db23 	.word	0x7ef9db23
 8001fec:	3ff0bc6a 	.word	0x3ff0bc6a
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40a99600 	.word	0x40a99600

08001ff8 <factoryTrimAccel>:

static double factoryTrimAccel(uint8_t testVal)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  return 4096 * 0.34 * pow((0.92/0.34), (testVal-1)/(pow(2,5)-2));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	3b01      	subs	r3, #1
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa38 	bl	800047c <__aeabi_i2d>
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <factoryTrimAccel+0x70>)
 8002012:	f7fe fbc7 	bl	80007a4 <__aeabi_ddiv>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	ec43 2b17 	vmov	d7, r2, r3
 800201e:	eeb0 1a47 	vmov.f32	s2, s14
 8002022:	eef0 1a67 	vmov.f32	s3, s15
 8002026:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002058 <factoryTrimAccel+0x60>
 800202a:	f004 fcab 	bl	8006984 <pow>
 800202e:	ec51 0b10 	vmov	r0, r1, d0
 8002032:	a30b      	add	r3, pc, #44	; (adr r3, 8002060 <factoryTrimAccel+0x68>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe fa8a 	bl	8000550 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	ec43 2b17 	vmov	d7, r2, r3
}
 8002044:	eeb0 0a47 	vmov.f32	s0, s14
 8002048:	eef0 0a67 	vmov.f32	s1, s15
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	f3af 8000 	nop.w
 8002058:	a5a5a5a5 	.word	0xa5a5a5a5
 800205c:	4005a5a5 	.word	0x4005a5a5
 8002060:	5c28f5c3 	.word	0x5c28f5c3
 8002064:	4095c28f 	.word	0x4095c28f
 8002068:	403e0000 	.word	0x403e0000

0800206c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b0d3      	sub	sp, #332	; 0x14c
 8002070:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002072:	f000 fe43 	bl	8002cfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002076:	f000 f8a9 	bl	80021cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800207a:	f7ff f877 	bl	800116c <MX_GPIO_Init>
	MX_DMA_Init();
 800207e:	f7ff f855 	bl	800112c <MX_DMA_Init>
	MX_I2C1_Init();
 8002082:	f7ff f8b7 	bl	80011f4 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002086:	f000 fb91 	bl	80027ac <MX_TIM1_Init>
	MX_TIM3_Init();
 800208a:	f000 fc37 	bl	80028fc <MX_TIM3_Init>
	MX_USART2_UART_Init();
 800208e:	f000 fd67 	bl	8002b60 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	Motor_t motor1 = MOTOR_init(&htim1, TIM_CHANNEL_1, &htim1, TIM_CHANNEL_2,
 8002092:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8002096:	2304      	movs	r3, #4
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80021ac <main+0x140>
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <main+0x144>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	4943      	ldr	r1, [pc, #268]	; (80021b0 <main+0x144>)
 80020a4:	f000 f911 	bl	80022ca <MOTOR_init>
			0.035f);
	Motor_t motor2 = MOTOR_init(&htim1, TIM_CHANNEL_3, &htim1, TIM_CHANNEL_4,
 80020a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80020ac:	230c      	movs	r3, #12
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80021ac <main+0x140>
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <main+0x144>)
 80020b6:	2208      	movs	r2, #8
 80020b8:	493d      	ldr	r1, [pc, #244]	; (80021b0 <main+0x144>)
 80020ba:	f000 f906 	bl	80022ca <MOTOR_init>
			0.035f);
	Motor_t motor3 = MOTOR_init(&htim3, TIM_CHANNEL_1, &htim3, TIM_CHANNEL_2,
 80020be:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80020c2:	2304      	movs	r3, #4
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80021ac <main+0x140>
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <main+0x148>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	4939      	ldr	r1, [pc, #228]	; (80021b4 <main+0x148>)
 80020d0:	f000 f8fb 	bl	80022ca <MOTOR_init>
			0.035f);
	Motor_t motor4 = MOTOR_init(&htim3, TIM_CHANNEL_3, &htim3, TIM_CHANNEL_4,
 80020d4:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 80020d8:	230c      	movs	r3, #12
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80021ac <main+0x140>
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <main+0x148>)
 80020e2:	2208      	movs	r2, #8
 80020e4:	4933      	ldr	r1, [pc, #204]	; (80021b4 <main+0x148>)
 80020e6:	f000 f8f0 	bl	80022ca <MOTOR_init>
			0.035f);

	Chassis_Controller_t chassis = CHASSIS_init(&motor1, &motor2, &motor3,
 80020ea:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80020ee:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80020f2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80020f6:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80020fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002104:	4623      	mov	r3, r4
 8002106:	f000 fa31 	bl	800256c <CHASSIS_init>
			&motor4, 0.25);

	HAL_Delay(1000);
 800210a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800210e:	f000 fe67 	bl	8002de0 <HAL_Delay>
	IMU_t imu_2 = IMU_Init(
 8002112:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <main+0x14c>)
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <main+0x150>)
 8002120:	2101      	movs	r1, #1
 8002122:	f7ff f8dd 	bl	80012e0 <IMU_Init>
	true, &hi2c1,
	GPIOB,
	GPIO_PIN_15);

	IMU_t imu_1 = IMU_Init(
 8002126:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800212a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800212e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <main+0x14c>)
 8002136:	4a21      	ldr	r2, [pc, #132]	; (80021bc <main+0x150>)
 8002138:	2100      	movs	r1, #0
 800213a:	f7ff f8d1 	bl	80012e0 <IMU_Init>
	false, &hi2c1,
	GPIOB,
	GPIO_PIN_14);

	Init_comms(&huart2);
 800213e:	4820      	ldr	r0, [pc, #128]	; (80021c0 <main+0x154>)
 8002140:	f7fe feac 	bl	8000e9c <Init_comms>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		CHASSIS_drive(&chassis);
 8002144:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fa67 	bl	800261c <CHASSIS_drive>
		IMU_updateData(&imu_1);
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fc93 	bl	8001a7c <IMU_updateData>
		IMU_updateData(&imu_2);
 8002156:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fc8e 	bl	8001a7c <IMU_updateData>
		float omega = comms.incoming_data.twist.angular[2];
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <main+0x158>)
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		float speed = comms.incoming_data.twist.linear[0];
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <main+0x158>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		CHASSIS_set_speed(&chassis, speed, omega);
 8002170:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002174:	edd7 0a4f 	vldr	s1, [r7, #316]	; 0x13c
 8002178:	ed97 0a4e 	vldr	s0, [r7, #312]	; 0x138
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fa15 	bl	80025ac <CHASSIS_set_speed>
		process_sensor_data(&(imu_1.imuData), &(imu_2.imuData));
 8002182:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002186:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	3340      	adds	r3, #64	; 0x40
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe ff41 	bl	8001018 <process_sensor_data>
		HAL_UART_Transmit(comms.uart, tx_data_buffer, TX_DATA_BUFFER_SIZE,
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <main+0x158>)
 8002198:	6818      	ldr	r0, [r3, #0]
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <main+0x15c>)
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a2:	2239      	movs	r2, #57	; 0x39
 80021a4:	f003 fdec 	bl	8005d80 <HAL_UART_Transmit>
	while (1) {
 80021a8:	e7cc      	b.n	8002144 <main+0xd8>
 80021aa:	bf00      	nop
 80021ac:	3d0f5c29 	.word	0x3d0f5c29
 80021b0:	20000164 	.word	0x20000164
 80021b4:	200001ac 	.word	0x200001ac
 80021b8:	40020400 	.word	0x40020400
 80021bc:	20000110 	.word	0x20000110
 80021c0:	200001f4 	.word	0x200001f4
 80021c4:	20000094 	.word	0x20000094
 80021c8:	20000004 	.word	0x20000004

080021cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b094      	sub	sp, #80	; 0x50
 80021d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	2230      	movs	r2, #48	; 0x30
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f004 fb92 	bl	8006904 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <SystemClock_Config+0xb4>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <SystemClock_Config+0xb4>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <SystemClock_Config+0xb4>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <SystemClock_Config+0xb8>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <SystemClock_Config+0xb8>)
 8002216:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <SystemClock_Config+0xb8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002230:	2310      	movs	r3, #16
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fc37 	bl	8004ab0 <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x80>
		Error_Handler();
 8002248:	f000 f83a 	bl	80022c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800224c:	230f      	movs	r3, #15
 800224e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fe9a 	bl	8004fa0 <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xaa>
		Error_Handler();
 8002272:	f000 f825 	bl	80022c0 <Error_Handler>
	}
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	; 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *husart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	if (husart == comms.uart)
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_UART_RxCpltCallback+0x30>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d109      	bne.n	80022ae <HAL_UART_RxCpltCallback+0x26>
	{
		parse_command();
 800229a:	f7fe fe31 	bl	8000f00 <parse_command>
		HAL_UART_Receive_DMA(comms.uart, rx_data_buffer, RX_DATA_BUFFER_SIZE);
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_UART_RxCpltCallback+0x30>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_UART_RxCpltCallback+0x34>)
 80022a4:	6811      	ldr	r1, [r2, #0]
 80022a6:	2219      	movs	r2, #25
 80022a8:	4618      	mov	r0, r3
 80022aa:	f003 fdf4 	bl	8005e96 <HAL_UART_Receive_DMA>
	}
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000094 	.word	0x20000094
 80022bc:	20000000 	.word	0x20000000

080022c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>

080022ca <MOTOR_init>:
Motor_t MOTOR_init(
		TIM_HandleTypeDef* const timer_fw, uint32_t channel_fw,
		TIM_HandleTypeDef* const timer_bw, uint32_t channel_bw,
		float radius
	)
{
 80022ca:	b5b0      	push	{r4, r5, r7, lr}
 80022cc:	b08c      	sub	sp, #48	; 0x30
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6178      	str	r0, [r7, #20]
 80022d2:	6139      	str	r1, [r7, #16]
 80022d4:	60fa      	str	r2, [r7, #12]
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	ed87 0a01 	vstr	s0, [r7, #4]
	Motor_t ret;
	ret.channel_fw = channel_fw;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	61fb      	str	r3, [r7, #28]
	ret.timer_fw = timer_fw;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	61bb      	str	r3, [r7, #24]

	ret.channel_bw = channel_bw;
 80022e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
	ret.timer_bw = timer_bw;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	623b      	str	r3, [r7, #32]

	ret.wheel_radius = radius;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	ret.speed = 0;
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_TIM_PWM_Start(timer_fw, channel_fw);
 80022f6:	68f9      	ldr	r1, [r7, #12]
 80022f8:	6938      	ldr	r0, [r7, #16]
 80022fa:	f003 f881 	bl	8005400 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer_bw, channel_bw);
 80022fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002300:	68b8      	ldr	r0, [r7, #8]
 8002302:	f003 f87d 	bl	8005400 <HAL_TIM_PWM_Start>

	return ret;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	461d      	mov	r5, r3
 800230a:	f107 0418 	add.w	r4, r7, #24
 800230e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002312:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002316:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	3730      	adds	r7, #48	; 0x30
 800231e:	46bd      	mov	sp, r7
 8002320:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002324 <MOTOR_drive>:

void MOTOR_drive(Motor_t* motor)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	// TODO: make this thread safe
	if (motor->speed >= 0)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233a:	db6e      	blt.n	800241a <MOTOR_drive+0xf6>
	{
		__HAL_TIM_SetCompare(motor->timer_fw, motor->channel_fw, motor->speed * AUTO_RELOAD_REG);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10f      	bne.n	8002364 <MOTOR_drive+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	edd3 7a04 	vldr	s15, [r3, #16]
 800234a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002514 <MOTOR_drive+0x1f0>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235c:	ee17 2a90 	vmov	r2, s15
 8002360:	635a      	str	r2, [r3, #52]	; 0x34
 8002362:	e036      	b.n	80023d2 <MOTOR_drive+0xae>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b04      	cmp	r3, #4
 800236a:	d10f      	bne.n	800238c <MOTOR_drive+0x68>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002372:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002514 <MOTOR_drive+0x1f0>
 8002376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002384:	ee17 3a90 	vmov	r3, s15
 8002388:	6393      	str	r3, [r2, #56]	; 0x38
 800238a:	e022      	b.n	80023d2 <MOTOR_drive+0xae>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d10f      	bne.n	80023b4 <MOTOR_drive+0x90>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	edd3 7a04 	vldr	s15, [r3, #16]
 800239a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002514 <MOTOR_drive+0x1f0>
 800239e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80023b2:	e00e      	b.n	80023d2 <MOTOR_drive+0xae>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80023ba:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002514 <MOTOR_drive+0x1f0>
 80023be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023cc:	ee17 3a90 	vmov	r3, s15
 80023d0:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SetCompare(motor->timer_bw, motor->channel_bw, 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <MOTOR_drive+0xc2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SetCompare(motor->timer_bw, motor->channel_bw, (-motor->speed) * AUTO_RELOAD_REG);
		__HAL_TIM_SetCompare(motor->timer_fw, motor->channel_fw, 0);
	}
}
 80023e4:	e090      	b.n	8002508 <MOTOR_drive+0x1e4>
		__HAL_TIM_SetCompare(motor->timer_bw, motor->channel_bw, 0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d105      	bne.n	80023fa <MOTOR_drive+0xd6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	6393      	str	r3, [r2, #56]	; 0x38
 80023f8:	e086      	b.n	8002508 <MOTOR_drive+0x1e4>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d105      	bne.n	800240e <MOTOR_drive+0xea>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800240c:	e07c      	b.n	8002508 <MOTOR_drive+0x1e4>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002418:	e076      	b.n	8002508 <MOTOR_drive+0x1e4>
		__HAL_TIM_SetCompare(motor->timer_bw, motor->channel_bw, (-motor->speed) * AUTO_RELOAD_REG);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d111      	bne.n	8002446 <MOTOR_drive+0x122>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	edd3 7a04 	vldr	s15, [r3, #16]
 8002428:	eef1 7a67 	vneg.f32	s15, s15
 800242c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002514 <MOTOR_drive+0x1f0>
 8002430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243e:	ee17 2a90 	vmov	r2, s15
 8002442:	635a      	str	r2, [r3, #52]	; 0x34
 8002444:	e03c      	b.n	80024c0 <MOTOR_drive+0x19c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b04      	cmp	r3, #4
 800244c:	d111      	bne.n	8002472 <MOTOR_drive+0x14e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	edd3 7a04 	vldr	s15, [r3, #16]
 8002454:	eef1 7a67 	vneg.f32	s15, s15
 8002458:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002514 <MOTOR_drive+0x1f0>
 800245c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246a:	ee17 3a90 	vmov	r3, s15
 800246e:	6393      	str	r3, [r2, #56]	; 0x38
 8002470:	e026      	b.n	80024c0 <MOTOR_drive+0x19c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b08      	cmp	r3, #8
 8002478:	d111      	bne.n	800249e <MOTOR_drive+0x17a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002480:	eef1 7a67 	vneg.f32	s15, s15
 8002484:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002514 <MOTOR_drive+0x1f0>
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002496:	ee17 3a90 	vmov	r3, s15
 800249a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800249c:	e010      	b.n	80024c0 <MOTOR_drive+0x19c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80024a4:	eef1 7a67 	vneg.f32	s15, s15
 80024a8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002514 <MOTOR_drive+0x1f0>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ba:	ee17 3a90 	vmov	r3, s15
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SetCompare(motor->timer_fw, motor->channel_fw, 0);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d105      	bne.n	80024d4 <MOTOR_drive+0x1b0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024d2:	e019      	b.n	8002508 <MOTOR_drive+0x1e4>
		__HAL_TIM_SetCompare(motor->timer_fw, motor->channel_fw, 0);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d105      	bne.n	80024e8 <MOTOR_drive+0x1c4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2300      	movs	r3, #0
 80024e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80024e6:	e00f      	b.n	8002508 <MOTOR_drive+0x1e4>
		__HAL_TIM_SetCompare(motor->timer_fw, motor->channel_fw, 0);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d105      	bne.n	80024fc <MOTOR_drive+0x1d8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80024fa:	e005      	b.n	8002508 <MOTOR_drive+0x1e4>
		__HAL_TIM_SetCompare(motor->timer_fw, motor->channel_fw, 0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002506:	e7ff      	b.n	8002508 <MOTOR_drive+0x1e4>
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	4451c000 	.word	0x4451c000

08002518 <MOTOR_set_speed>:

void MOTOR_set_speed(Motor_t* motor, float speed)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	ed87 0a00 	vstr	s0, [r7]
	// TODO: make this thread safe
	if (speed > 1)
 8002524:	edd7 7a00 	vldr	s15, [r7]
 8002528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800252c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	dd03      	ble.n	800253e <MOTOR_set_speed+0x26>
		speed = 1;
 8002536:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	e00a      	b.n	8002554 <MOTOR_set_speed+0x3c>
	else if (speed < -1)
 800253e:	edd7 7a00 	vldr	s15, [r7]
 8002542:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d501      	bpl.n	8002554 <MOTOR_set_speed+0x3c>
		speed = -1;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <MOTOR_set_speed+0x50>)
 8002552:	603b      	str	r3, [r7, #0]
	motor->speed = speed;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	611a      	str	r2, [r3, #16]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	bf800000 	.word	0xbf800000

0800256c <CHASSIS_init>:
		Motor_t* left_back,
		Motor_t* right_front,
		Motor_t* right_back,
		float wheel_base
	)
{
 800256c:	b4b0      	push	{r4, r5, r7}
 800256e:	b08d      	sub	sp, #52	; 0x34
 8002570:	af00      	add	r7, sp, #0
 8002572:	6178      	str	r0, [r7, #20]
 8002574:	6139      	str	r1, [r7, #16]
 8002576:	60fa      	str	r2, [r7, #12]
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	ed87 0a01 	vstr	s0, [r7, #4]
	Chassis_Controller_t ret;
	ret.motors[0] = left_front;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	61fb      	str	r3, [r7, #28]
	ret.motors[1] = left_back;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	623b      	str	r3, [r7, #32]
	ret.motors[2] = right_front;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
	ret.motors[3] = right_back;
 800258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28

	ret.wheel_base = wheel_base;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c

	return ret;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	461d      	mov	r5, r3
 8002596:	f107 041c 	add.w	r4, r7, #28
 800259a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800259c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	602b      	str	r3, [r5, #0]
}
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	3734      	adds	r7, #52	; 0x34
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bcb0      	pop	{r4, r5, r7}
 80025aa:	4770      	bx	lr

080025ac <CHASSIS_set_speed>:
void CHASSIS_set_speed(
		Chassis_Controller_t* chassis,
		float speed,
		float omega
	)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80025b8:	edc7 0a01 	vstr	s1, [r7, #4]
	for (uint8_t i = 0; i < 4; i++)
 80025bc:	2300      	movs	r3, #0
 80025be:	75fb      	strb	r3, [r7, #23]
 80025c0:	e024      	b.n	800260c <CHASSIS_set_speed+0x60>
	{
		float motor_speed;
		motor_speed = calculate_wheel_rot(
				speed,
				omega,
				chassis->motors[i]->wheel_radius,
 80025c2:	7dfa      	ldrb	r2, [r7, #23]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		motor_speed = calculate_wheel_rot(
 80025ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80025d4:	7dfb      	ldrb	r3, [r7, #23]
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	eef0 1a47 	vmov.f32	s3, s14
 80025e0:	eeb0 1a67 	vmov.f32	s2, s15
 80025e4:	edd7 0a01 	vldr	s1, [r7, #4]
 80025e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80025ec:	f000 f830 	bl	8002650 <calculate_wheel_rot>
 80025f0:	ed87 0a04 	vstr	s0, [r7, #16]
				chassis->wheel_base,
				i/2
			);

		MOTOR_set_speed(chassis->motors[i], motor_speed);
 80025f4:	7dfa      	ldrb	r2, [r7, #23]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fc:	ed97 0a04 	vldr	s0, [r7, #16]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff89 	bl	8002518 <MOTOR_set_speed>
	for (uint8_t i = 0; i < 4; i++)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	3301      	adds	r3, #1
 800260a:	75fb      	strb	r3, [r7, #23]
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d9d7      	bls.n	80025c2 <CHASSIS_set_speed+0x16>
	}
}
 8002612:	bf00      	nop
 8002614:	bf00      	nop
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <CHASSIS_drive>:

void CHASSIS_drive(Chassis_Controller_t* chassis)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 4; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e009      	b.n	800263e <CHASSIS_drive+0x22>
	{
		MOTOR_drive(chassis->motors[i]);
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fe76 	bl	8002324 <MOTOR_drive>
	for (uint8_t i = 0; i < 4; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b03      	cmp	r3, #3
 8002642:	d9f2      	bls.n	800262a <CHASSIS_drive+0xe>
	}
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <calculate_wheel_rot>:
		float omega,
		float radius,
		float wheel_base,
		uint8_t right
	)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	ed87 0a05 	vstr	s0, [r7, #20]
 800265a:	edc7 0a04 	vstr	s1, [r7, #16]
 800265e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002662:	edc7 1a02 	vstr	s3, [r7, #8]
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	float ret = speed / radius + (right?-1:1) *
 800266a:	edd7 6a05 	vldr	s13, [r7, #20]
 800266e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <calculate_wheel_rot+0x32>
 800267c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002680:	e001      	b.n	8002686 <calculate_wheel_rot+0x36>
 8002682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002686:	edd7 7a02 	vldr	s15, [r7, #8]
 800268a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			wheel_base / 2 * omega / radius;
 800268e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002692:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002696:	edd7 7a04 	vldr	s15, [r7, #16]
 800269a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800269e:	edd7 6a03 	vldr	s13, [r7, #12]
 80026a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
	float ret = speed / radius + (right?-1:1) *
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	edc7 7a07 	vstr	s15, [r7, #28]

	return ret/MAX_WHEEL_SPEED;
 80026ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80026cc <calculate_wheel_rot+0x7c>
 80026b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	3724      	adds	r7, #36	; 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	42000000 	.word	0x42000000

080026d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002724:	e7fe      	b.n	8002724 <NMI_Handler+0x4>

08002726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <HardFault_Handler+0x4>

0800272c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <MemManage_Handler+0x4>

08002732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <BusFault_Handler+0x4>

08002738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800273c:	e7fe      	b.n	800273c <UsageFault_Handler+0x4>

0800273e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276c:	f000 fb18 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <DMA1_Stream5_IRQHandler+0x10>)
 800277a:	f000 fd6d 	bl	8003258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000023c 	.word	0x2000023c

08002788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <SystemInit+0x20>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <SystemInit+0x20>)
 8002794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b092      	sub	sp, #72	; 0x48
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2220      	movs	r2, #32
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 f894 	bl	8006904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027dc:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <MX_TIM1_Init+0x148>)
 80027de:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <MX_TIM1_Init+0x14c>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <MX_TIM1_Init+0x148>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <MX_TIM1_Init+0x148>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <MX_TIM1_Init+0x148>)
 80027f0:	f240 3247 	movw	r2, #839	; 0x347
 80027f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <MX_TIM1_Init+0x148>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027fc:	4b3d      	ldr	r3, [pc, #244]	; (80028f4 <MX_TIM1_Init+0x148>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <MX_TIM1_Init+0x148>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002808:	483a      	ldr	r0, [pc, #232]	; (80028f4 <MX_TIM1_Init+0x148>)
 800280a:	f002 fda9 	bl	8005360 <HAL_TIM_PWM_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002814:	f7ff fd54 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002824:	4619      	mov	r1, r3
 8002826:	4833      	ldr	r0, [pc, #204]	; (80028f4 <MX_TIM1_Init+0x148>)
 8002828:	f003 f99a 	bl	8005b60 <HAL_TIMEx_MasterConfigSynchronization>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002832:	f7ff fd45 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002836:	2360      	movs	r3, #96	; 0x60
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002856:	2200      	movs	r2, #0
 8002858:	4619      	mov	r1, r3
 800285a:	4826      	ldr	r0, [pc, #152]	; (80028f4 <MX_TIM1_Init+0x148>)
 800285c:	f002 fe80 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002866:	f7ff fd2b 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	2204      	movs	r2, #4
 8002870:	4619      	mov	r1, r3
 8002872:	4820      	ldr	r0, [pc, #128]	; (80028f4 <MX_TIM1_Init+0x148>)
 8002874:	f002 fe74 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800287e:	f7ff fd1f 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002886:	2208      	movs	r2, #8
 8002888:	4619      	mov	r1, r3
 800288a:	481a      	ldr	r0, [pc, #104]	; (80028f4 <MX_TIM1_Init+0x148>)
 800288c:	f002 fe68 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002896:	f7ff fd13 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800289a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289e:	220c      	movs	r2, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	4814      	ldr	r0, [pc, #80]	; (80028f4 <MX_TIM1_Init+0x148>)
 80028a4:	f002 fe5c 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80028ae:	f7ff fd07 	bl	80022c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM1_Init+0x148>)
 80028d6:	f003 f9b1 	bl	8005c3c <HAL_TIMEx_ConfigBreakDeadTime>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80028e0:	f7ff fcee 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM1_Init+0x148>)
 80028e6:	f000 f8bb 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3748      	adds	r7, #72	; 0x48
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000164 	.word	0x20000164
 80028f8:	40010000 	.word	0x40010000

080028fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	; 0x28
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002902:	f107 0320 	add.w	r3, r7, #32
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	615a      	str	r2, [r3, #20]
 800291c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800291e:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <MX_TIM3_Init+0xec>)
 8002920:	4a32      	ldr	r2, [pc, #200]	; (80029ec <MX_TIM3_Init+0xf0>)
 8002922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002924:	4b30      	ldr	r3, [pc, #192]	; (80029e8 <MX_TIM3_Init+0xec>)
 8002926:	2200      	movs	r2, #0
 8002928:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <MX_TIM3_Init+0xec>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <MX_TIM3_Init+0xec>)
 8002932:	f240 3247 	movw	r2, #839	; 0x347
 8002936:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <MX_TIM3_Init+0xec>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293e:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <MX_TIM3_Init+0xec>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002944:	4828      	ldr	r0, [pc, #160]	; (80029e8 <MX_TIM3_Init+0xec>)
 8002946:	f002 fd0b 	bl	8005360 <HAL_TIM_PWM_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002950:	f7ff fcb6 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	4619      	mov	r1, r3
 8002962:	4821      	ldr	r0, [pc, #132]	; (80029e8 <MX_TIM3_Init+0xec>)
 8002964:	f003 f8fc 	bl	8005b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800296e:	f7ff fca7 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002972:	2360      	movs	r3, #96	; 0x60
 8002974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	2200      	movs	r2, #0
 8002986:	4619      	mov	r1, r3
 8002988:	4817      	ldr	r0, [pc, #92]	; (80029e8 <MX_TIM3_Init+0xec>)
 800298a:	f002 fde9 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002994:	f7ff fc94 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2204      	movs	r2, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4812      	ldr	r0, [pc, #72]	; (80029e8 <MX_TIM3_Init+0xec>)
 80029a0:	f002 fdde 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80029aa:	f7ff fc89 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2208      	movs	r2, #8
 80029b2:	4619      	mov	r1, r3
 80029b4:	480c      	ldr	r0, [pc, #48]	; (80029e8 <MX_TIM3_Init+0xec>)
 80029b6:	f002 fdd3 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80029c0:	f7ff fc7e 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	220c      	movs	r2, #12
 80029c8:	4619      	mov	r1, r3
 80029ca:	4807      	ldr	r0, [pc, #28]	; (80029e8 <MX_TIM3_Init+0xec>)
 80029cc:	f002 fdc8 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80029d6:	f7ff fc73 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80029da:	4803      	ldr	r0, [pc, #12]	; (80029e8 <MX_TIM3_Init+0xec>)
 80029dc:	f000 f840 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80029e0:	bf00      	nop
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	200001ac 	.word	0x200001ac
 80029ec:	40000400 	.word	0x40000400

080029f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <HAL_TIM_PWM_MspInit+0x64>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_TIM_PWM_MspInit+0x68>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_TIM_PWM_MspInit+0x68>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_TIM_PWM_MspInit+0x68>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a1e:	e012      	b.n	8002a46 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_TIM_PWM_MspInit+0x6c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10d      	bne.n	8002a46 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_TIM_PWM_MspInit+0x68>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_TIM_PWM_MspInit+0x68>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_TIM_PWM_MspInit+0x68>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	40000400 	.word	0x40000400

08002a60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <HAL_TIM_MspPostInit+0xec>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11f      	bne.n	8002ac2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b32      	ldr	r3, [pc, #200]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a31      	ldr	r2, [pc, #196]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002a9e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4826      	ldr	r0, [pc, #152]	; (8002b54 <HAL_TIM_MspPostInit+0xf4>)
 8002abc:	f000 fe36 	bl	800372c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ac0:	e040      	b.n	8002b44 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d13b      	bne.n	8002b44 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_TIM_MspPostInit+0xf0>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b04:	23c0      	movs	r3, #192	; 0xc0
 8002b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b14:	2302      	movs	r3, #2
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	480d      	ldr	r0, [pc, #52]	; (8002b54 <HAL_TIM_MspPostInit+0xf4>)
 8002b20:	f000 fe04 	bl	800372c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b24:	2303      	movs	r3, #3
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b34:	2302      	movs	r3, #2
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4807      	ldr	r0, [pc, #28]	; (8002b5c <HAL_TIM_MspPostInit+0xfc>)
 8002b40:	f000 fdf4 	bl	800372c <HAL_GPIO_Init>
}
 8002b44:	bf00      	nop
 8002b46:	3728      	adds	r7, #40	; 0x28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40020400 	.word	0x40020400

08002b60 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <MX_USART2_UART_Init+0x50>)
 8002b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b6a:	4b10      	ldr	r3, [pc, #64]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b72:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b86:	220c      	movs	r2, #12
 8002b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b96:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_USART2_UART_Init+0x4c>)
 8002b98:	f003 f8a2 	bl	8005ce0 <HAL_UART_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002ba2:	f7ff fb8d 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200001f4 	.word	0x200001f4
 8002bb0:	40004400 	.word	0x40004400

08002bb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <HAL_UART_MspInit+0xe0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d159      	bne.n	8002c8a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_UART_MspInit+0xe4>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a2e      	ldr	r2, [pc, #184]	; (8002c98 <HAL_UART_MspInit+0xe4>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_UART_MspInit+0xe4>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_UART_MspInit+0xe4>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_UART_MspInit+0xe4>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_UART_MspInit+0xe4>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c0e:	230c      	movs	r3, #12
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c1e:	2307      	movs	r3, #7
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 0314 	add.w	r3, r7, #20
 8002c26:	4619      	mov	r1, r3
 8002c28:	481c      	ldr	r0, [pc, #112]	; (8002c9c <HAL_UART_MspInit+0xe8>)
 8002c2a:	f000 fd7f 	bl	800372c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c30:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_UART_MspInit+0xf0>)
 8002c32:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c6e:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c70:	f000 f9ec 	bl	800304c <HAL_DMA_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002c7a:	f7ff fb21 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <HAL_UART_MspInit+0xec>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	; 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	2000023c 	.word	0x2000023c
 8002ca4:	40026088 	.word	0x40026088

08002ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002cac:	f7ff fd6c 	bl	8002788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	; (8002ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f003 fe23 	bl	8006920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cda:	f7ff f9c7 	bl	800206c <main>
  bx  lr    
 8002cde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002cec:	08007870 	.word	0x08007870
  ldr r2, =_sbss
 8002cf0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002cf4:	200003d8 	.word	0x200003d8

08002cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <HAL_Init+0x40>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <HAL_Init+0x40>)
 8002d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <HAL_Init+0x40>)
 8002d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d18:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <HAL_Init+0x40>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d24:	2003      	movs	r0, #3
 8002d26:	f000 f94f 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2a:	200f      	movs	r0, #15
 8002d2c:	f000 f808 	bl	8002d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d30:	f7ff fcce 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023c00 	.word	0x40023c00

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_InitTick+0x54>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x58>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f967 	bl	8003032 <HAL_SYSTICK_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e00e      	b.n	8002d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d80a      	bhi.n	8002d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d74:	2200      	movs	r2, #0
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d7c:	f000 f92f 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d80:	4a06      	ldr	r2, [pc, #24]	; (8002d9c <HAL_InitTick+0x5c>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000008 	.word	0x20000008
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	2000000c 	.word	0x2000000c

08002da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x20>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x24>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	4a04      	ldr	r2, [pc, #16]	; (8002dc4 <HAL_IncTick+0x24>)
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000010 	.word	0x20000010
 8002dc4:	2000029c 	.word	0x2000029c

08002dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return uwTick;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_GetTick+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000029c 	.word	0x2000029c

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff ffee 	bl	8002dc8 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e06:	bf00      	nop
 8002e08:	f7ff ffde 	bl	8002dc8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000010 	.word	0x20000010

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff29 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff3e 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff31 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff feb6 	bl	8002dc8 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e099      	b.n	800319c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003088:	e00f      	b.n	80030aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800308a:	f7ff fe9d 	bl	8002dc8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b05      	cmp	r3, #5
 8003096:	d908      	bls.n	80030aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2203      	movs	r2, #3
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e078      	b.n	800319c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e8      	bne.n	800308a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_DMA_Init+0x158>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b04      	cmp	r3, #4
 8003102:	d107      	bne.n	8003114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4313      	orrs	r3, r2
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b04      	cmp	r3, #4
 800313c:	d117      	bne.n	800316e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fa6f 	bl	8003634 <DMA_CheckFifoParam>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800316a:	2301      	movs	r3, #1
 800316c:	e016      	b.n	800319c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fa26 	bl	80035c8 <DMA_CalcBaseAndBitshift>
 800317c:	4603      	mov	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	223f      	movs	r2, #63	; 0x3f
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	f010803f 	.word	0xf010803f

080031a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_DMA_Start_IT+0x26>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e040      	b.n	8003250 <HAL_DMA_Start_IT+0xa8>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d12f      	bne.n	8003242 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f9b8 	bl	800356c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	223f      	movs	r2, #63	; 0x3f
 8003202:	409a      	lsls	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0216 	orr.w	r2, r2, #22
 8003216:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e005      	b.n	800324e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800324e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003264:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <HAL_DMA_IRQHandler+0x248>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a8e      	ldr	r2, [pc, #568]	; (80034a4 <HAL_DMA_IRQHandler+0x24c>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0a9b      	lsrs	r3, r3, #10
 8003270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	2208      	movs	r2, #8
 8003284:	409a      	lsls	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4013      	ands	r3, r2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01a      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0204 	bic.w	r2, r2, #4
 80032aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	2208      	movs	r2, #8
 80032b2:	409a      	lsls	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2201      	movs	r2, #1
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0202 	orr.w	r2, r3, #2
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	2204      	movs	r2, #4
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d012      	beq.n	8003330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331c:	2204      	movs	r2, #4
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	2210      	movs	r2, #16
 8003336:	409a      	lsls	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d043      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d03c      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	2210      	movs	r2, #16
 8003354:	409a      	lsls	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d024      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
 8003386:	e01f      	b.n	80033c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01b      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e016      	b.n	80033c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0208 	bic.w	r2, r2, #8
 80033b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	2220      	movs	r2, #32
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 808f 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8087 	beq.w	80034f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2220      	movs	r2, #32
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d136      	bne.n	8003470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0216 	bic.w	r2, r2, #22
 8003410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d103      	bne.n	8003432 <HAL_DMA_IRQHandler+0x1da>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0208 	bic.w	r2, r2, #8
 8003440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	223f      	movs	r2, #63	; 0x3f
 8003448:	409a      	lsls	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d07e      	beq.n	8003564 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
        }
        return;
 800346e:	e079      	b.n	8003564 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01d      	beq.n	80034ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	2b00      	cmp	r3, #0
 8003492:	d031      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e02c      	b.n	80034f8 <HAL_DMA_IRQHandler+0x2a0>
 800349e:	bf00      	nop
 80034a0:	20000008 	.word	0x20000008
 80034a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d023      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
 80034b8:	e01e      	b.n	80034f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10f      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0210 	bic.w	r2, r2, #16
 80034d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d032      	beq.n	8003566 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2205      	movs	r2, #5
 8003510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3301      	adds	r3, #1
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	d307      	bcc.n	8003540 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f2      	bne.n	8003524 <HAL_DMA_IRQHandler+0x2cc>
 800353e:	e000      	b.n	8003542 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003540:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
 8003562:	e000      	b.n	8003566 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003564:	bf00      	nop
    }
  }
}
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d108      	bne.n	80035ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035aa:	e007      	b.n	80035bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	60da      	str	r2, [r3, #12]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	3b10      	subs	r3, #16
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <DMA_CalcBaseAndBitshift+0x64>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035e2:	4a13      	ldr	r2, [pc, #76]	; (8003630 <DMA_CalcBaseAndBitshift+0x68>)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d909      	bls.n	800360a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035fe:	f023 0303 	bic.w	r3, r3, #3
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	659a      	str	r2, [r3, #88]	; 0x58
 8003608:	e007      	b.n	800361a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	aaaaaaab 	.word	0xaaaaaaab
 8003630:	08007828 	.word	0x08007828

08003634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d11f      	bne.n	800368e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b03      	cmp	r3, #3
 8003652:	d856      	bhi.n	8003702 <DMA_CheckFifoParam+0xce>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <DMA_CheckFifoParam+0x28>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800366d 	.word	0x0800366d
 8003660:	0800367f 	.word	0x0800367f
 8003664:	0800366d 	.word	0x0800366d
 8003668:	08003703 	.word	0x08003703
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d046      	beq.n	8003706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367c:	e043      	b.n	8003706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003686:	d140      	bne.n	800370a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800368c:	e03d      	b.n	800370a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003696:	d121      	bne.n	80036dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d837      	bhi.n	800370e <DMA_CheckFifoParam+0xda>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <DMA_CheckFifoParam+0x70>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036b5 	.word	0x080036b5
 80036a8:	080036bb 	.word	0x080036bb
 80036ac:	080036b5 	.word	0x080036b5
 80036b0:	080036cd 	.word	0x080036cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e030      	b.n	800371c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d025      	beq.n	8003712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ca:	e022      	b.n	8003712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036d4:	d11f      	bne.n	8003716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036da:	e01c      	b.n	8003716 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d903      	bls.n	80036ea <DMA_CheckFifoParam+0xb6>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d003      	beq.n	80036f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036e8:	e018      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
      break;
 80036ee:	e015      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003700:	e00b      	b.n	800371a <DMA_CheckFifoParam+0xe6>
      break;
 8003702:	bf00      	nop
 8003704:	e00a      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      break;
 8003706:	bf00      	nop
 8003708:	e008      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      break;
 800370a:	bf00      	nop
 800370c:	e006      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e004      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      break;   
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
    }
  } 
  
  return status; 
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e159      	b.n	80039fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	429a      	cmp	r2, r3
 8003762:	f040 8148 	bne.w	80039f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d005      	beq.n	800377e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800377a:	2b02      	cmp	r3, #2
 800377c:	d130      	bne.n	80037e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	2203      	movs	r2, #3
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4013      	ands	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037b4:	2201      	movs	r2, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 0201 	and.w	r2, r3, #1
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d017      	beq.n	800381c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	2203      	movs	r2, #3
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d123      	bne.n	8003870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	08da      	lsrs	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3208      	adds	r2, #8
 8003830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4013      	ands	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	08da      	lsrs	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3208      	adds	r2, #8
 800386a:	69b9      	ldr	r1, [r7, #24]
 800386c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4313      	orrs	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80a2 	beq.w	80039f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_GPIO_Init+0x2e8>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_GPIO_Init+0x2e8>)
 80038bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c0:	6453      	str	r3, [r2, #68]	; 0x44
 80038c2:	4b54      	ldr	r3, [pc, #336]	; (8003a14 <HAL_GPIO_Init+0x2e8>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ce:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_GPIO_Init+0x2ec>)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	3302      	adds	r3, #2
 80038d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	220f      	movs	r2, #15
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a49      	ldr	r2, [pc, #292]	; (8003a1c <HAL_GPIO_Init+0x2f0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x202>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a48      	ldr	r2, [pc, #288]	; (8003a20 <HAL_GPIO_Init+0x2f4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x1fe>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a47      	ldr	r2, [pc, #284]	; (8003a24 <HAL_GPIO_Init+0x2f8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x1fa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a46      	ldr	r2, [pc, #280]	; (8003a28 <HAL_GPIO_Init+0x2fc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x1f6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a45      	ldr	r2, [pc, #276]	; (8003a2c <HAL_GPIO_Init+0x300>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x1f2>
 800391a:	2304      	movs	r3, #4
 800391c:	e008      	b.n	8003930 <HAL_GPIO_Init+0x204>
 800391e:	2307      	movs	r3, #7
 8003920:	e006      	b.n	8003930 <HAL_GPIO_Init+0x204>
 8003922:	2303      	movs	r3, #3
 8003924:	e004      	b.n	8003930 <HAL_GPIO_Init+0x204>
 8003926:	2302      	movs	r3, #2
 8003928:	e002      	b.n	8003930 <HAL_GPIO_Init+0x204>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_GPIO_Init+0x204>
 800392e:	2300      	movs	r3, #0
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	f002 0203 	and.w	r2, r2, #3
 8003936:	0092      	lsls	r2, r2, #2
 8003938:	4093      	lsls	r3, r2
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003940:	4935      	ldr	r1, [pc, #212]	; (8003a18 <HAL_GPIO_Init+0x2ec>)
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	3302      	adds	r3, #2
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394e:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <HAL_GPIO_Init+0x304>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	43db      	mvns	r3, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4013      	ands	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003972:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <HAL_GPIO_Init+0x304>)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_GPIO_Init+0x304>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800399c:	4a24      	ldr	r2, [pc, #144]	; (8003a30 <HAL_GPIO_Init+0x304>)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039a2:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_GPIO_Init+0x304>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	43db      	mvns	r3, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4013      	ands	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c6:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <HAL_GPIO_Init+0x304>)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039cc:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_GPIO_Init+0x304>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <HAL_GPIO_Init+0x304>)
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3301      	adds	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b0f      	cmp	r3, #15
 8003a00:	f67f aea2 	bls.w	8003748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	40020000 	.word	0x40020000
 8003a20:	40020400 	.word	0x40020400
 8003a24:	40020800 	.word	0x40020800
 8003a28:	40020c00 	.word	0x40020c00
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
 8003a40:	4613      	mov	r3, r2
 8003a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a44:	787b      	ldrb	r3, [r7, #1]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a4a:	887a      	ldrh	r2, [r7, #2]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a50:	e003      	b.n	8003a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a52:	887b      	ldrh	r3, [r7, #2]
 8003a54:	041a      	lsls	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	619a      	str	r2, [r3, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e12b      	b.n	8003cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fbde 	bl	8001250 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003acc:	f001 fc20 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a81      	ldr	r2, [pc, #516]	; (8003cdc <HAL_I2C_Init+0x274>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d807      	bhi.n	8003aec <HAL_I2C_Init+0x84>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a80      	ldr	r2, [pc, #512]	; (8003ce0 <HAL_I2C_Init+0x278>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf94      	ite	ls
 8003ae4:	2301      	movls	r3, #1
 8003ae6:	2300      	movhi	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e006      	b.n	8003afa <HAL_I2C_Init+0x92>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a7d      	ldr	r2, [pc, #500]	; (8003ce4 <HAL_I2C_Init+0x27c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bf94      	ite	ls
 8003af4:	2301      	movls	r3, #1
 8003af6:	2300      	movhi	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e0e7      	b.n	8003cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a78      	ldr	r2, [pc, #480]	; (8003ce8 <HAL_I2C_Init+0x280>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0c9b      	lsrs	r3, r3, #18
 8003b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a6a      	ldr	r2, [pc, #424]	; (8003cdc <HAL_I2C_Init+0x274>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d802      	bhi.n	8003b3c <HAL_I2C_Init+0xd4>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	e009      	b.n	8003b50 <HAL_I2C_Init+0xe8>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	4a69      	ldr	r2, [pc, #420]	; (8003cec <HAL_I2C_Init+0x284>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	099b      	lsrs	r3, r3, #6
 8003b4e:	3301      	adds	r3, #1
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6812      	ldr	r2, [r2, #0]
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	495c      	ldr	r1, [pc, #368]	; (8003cdc <HAL_I2C_Init+0x274>)
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d819      	bhi.n	8003ba4 <HAL_I2C_Init+0x13c>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e59      	subs	r1, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7e:	1c59      	adds	r1, r3, #1
 8003b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b84:	400b      	ands	r3, r1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_I2C_Init+0x138>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1e59      	subs	r1, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b9e:	e051      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e04f      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d111      	bne.n	8003bd0 <HAL_I2C_Init+0x168>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1e58      	subs	r0, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6859      	ldr	r1, [r3, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	440b      	add	r3, r1
 8003bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e012      	b.n	8003bf6 <HAL_I2C_Init+0x18e>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1e58      	subs	r0, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	0099      	lsls	r1, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be6:	3301      	adds	r3, #1
 8003be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_I2C_Init+0x196>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e022      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10e      	bne.n	8003c24 <HAL_I2C_Init+0x1bc>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1e58      	subs	r0, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6859      	ldr	r1, [r3, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c22:	e00f      	b.n	8003c44 <HAL_I2C_Init+0x1dc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1e58      	subs	r0, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6859      	ldr	r1, [r3, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	0099      	lsls	r1, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	6809      	ldr	r1, [r1, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69da      	ldr	r2, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6911      	ldr	r1, [r2, #16]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68d2      	ldr	r2, [r2, #12]
 8003c7e:	4311      	orrs	r1, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	000186a0 	.word	0x000186a0
 8003ce0:	001e847f 	.word	0x001e847f
 8003ce4:	003d08ff 	.word	0x003d08ff
 8003ce8:	431bde83 	.word	0x431bde83
 8003cec:	10624dd3 	.word	0x10624dd3

08003cf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d0a:	f7ff f85d 	bl	8002dc8 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	f040 80d9 	bne.w	8003ed0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2319      	movs	r3, #25
 8003d24:	2201      	movs	r2, #1
 8003d26:	496d      	ldr	r1, [pc, #436]	; (8003edc <HAL_I2C_Mem_Write+0x1ec>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fc8b 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0cc      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_I2C_Mem_Write+0x56>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0c5      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d007      	beq.n	8003d6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4a4d      	ldr	r2, [pc, #308]	; (8003ee0 <HAL_I2C_Mem_Write+0x1f0>)
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dae:	88f8      	ldrh	r0, [r7, #6]
 8003db0:	893a      	ldrh	r2, [r7, #8]
 8003db2:	8979      	ldrh	r1, [r7, #10]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	9301      	str	r3, [sp, #4]
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fac2 	bl	8004348 <I2C_RequestMemoryWrite>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d052      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e081      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fd50 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e06b      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d11b      	bne.n	8003e70 <HAL_I2C_Mem_Write+0x180>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d017      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1aa      	bne.n	8003dce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 fd43 	bl	8004908 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00d      	beq.n	8003ea4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d107      	bne.n	8003ea0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e016      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	00100002 	.word	0x00100002
 8003ee0:	ffff0000 	.word	0xffff0000

08003ee4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efe:	f7fe ff63 	bl	8002dc8 <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	f040 8214 	bne.w	800433a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2319      	movs	r3, #25
 8003f18:	2201      	movs	r2, #1
 8003f1a:	497b      	ldr	r1, [pc, #492]	; (8004108 <HAL_I2C_Mem_Read+0x224>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fb91 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e207      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x56>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e200      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d007      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	; (800410c <HAL_I2C_Mem_Read+0x228>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa2:	88f8      	ldrh	r0, [r7, #6]
 8003fa4:	893a      	ldrh	r2, [r7, #8]
 8003fa6:	8979      	ldrh	r1, [r7, #10]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fa5e 	bl	8004474 <I2C_RequestMemoryRead>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1bc      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e190      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d11b      	bne.n	8004032 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e170      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	d11b      	bne.n	8004072 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	e150      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004088:	e144      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b03      	cmp	r3, #3
 8004090:	f200 80f1 	bhi.w	8004276 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	2b01      	cmp	r3, #1
 800409a:	d123      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fc79 	bl	8004998 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e145      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e2:	e117      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d14e      	bne.n	800418a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2200      	movs	r2, #0
 80040f4:	4906      	ldr	r1, [pc, #24]	; (8004110 <HAL_I2C_Mem_Read+0x22c>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 faa4 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e11a      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
 8004106:	bf00      	nop
 8004108:	00100002 	.word	0x00100002
 800410c:	ffff0000 	.word	0xffff0000
 8004110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004188:	e0c4      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	496c      	ldr	r1, [pc, #432]	; (8004344 <HAL_I2C_Mem_Read+0x460>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fa55 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0cb      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	4955      	ldr	r1, [pc, #340]	; (8004344 <HAL_I2C_Mem_Read+0x460>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa27 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e09d      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004274:	e04e      	b.n	8004314 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fb8c 	bl	8004998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e058      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d124      	bne.n	8004314 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f aeb6 	bne.w	800408a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	00010004 	.word	0x00010004

08004348 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	4608      	mov	r0, r1
 8004352:	4611      	mov	r1, r2
 8004354:	461a      	mov	r2, r3
 8004356:	4603      	mov	r3, r0
 8004358:	817b      	strh	r3, [r7, #10]
 800435a:	460b      	mov	r3, r1
 800435c:	813b      	strh	r3, [r7, #8]
 800435e:	4613      	mov	r3, r2
 8004360:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2200      	movs	r2, #0
 800437a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f960 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004398:	d103      	bne.n	80043a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e05f      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043a6:	897b      	ldrh	r3, [r7, #10]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	492d      	ldr	r1, [pc, #180]	; (8004470 <I2C_RequestMemoryWrite+0x128>)
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f9bb 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e04c      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e4:	6a39      	ldr	r1, [r7, #32]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fa46 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d107      	bne.n	800440a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e02b      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440e:	88fb      	ldrh	r3, [r7, #6]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e021      	b.n	8004464 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004420:	893b      	ldrh	r3, [r7, #8]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	b29b      	uxth	r3, r3
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	6a39      	ldr	r1, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa20 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00d      	beq.n	800445a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b04      	cmp	r3, #4
 8004444:	d107      	bne.n	8004456 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e005      	b.n	8004466 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800445a:	893b      	ldrh	r3, [r7, #8]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	00010002 	.word	0x00010002

08004474 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	4608      	mov	r0, r1
 800447e:	4611      	mov	r1, r2
 8004480:	461a      	mov	r2, r3
 8004482:	4603      	mov	r3, r0
 8004484:	817b      	strh	r3, [r7, #10]
 8004486:	460b      	mov	r3, r1
 8004488:	813b      	strh	r3, [r7, #8]
 800448a:	4613      	mov	r3, r2
 800448c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800449c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 f8c2 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d4:	d103      	bne.n	80044de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0aa      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044e2:	897b      	ldrh	r3, [r7, #10]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	6a3a      	ldr	r2, [r7, #32]
 80044f6:	4952      	ldr	r1, [pc, #328]	; (8004640 <I2C_RequestMemoryRead+0x1cc>)
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f91d 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e097      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	6a39      	ldr	r1, [r7, #32]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f9a8 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e076      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004550:	893b      	ldrh	r3, [r7, #8]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]
 800455a:	e021      	b.n	80045a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800455c:	893b      	ldrh	r3, [r7, #8]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	b29b      	uxth	r3, r3
 8004562:	b2da      	uxtb	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	6a39      	ldr	r1, [r7, #32]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f982 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00d      	beq.n	8004596 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b04      	cmp	r3, #4
 8004580:	d107      	bne.n	8004592 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e050      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004596:	893b      	ldrh	r3, [r7, #8]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	6a39      	ldr	r1, [r7, #32]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f967 	bl	8004878 <I2C_WaitOnTXEFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d107      	bne.n	80045c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e035      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f82b 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004602:	d103      	bne.n	800460c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e013      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004610:	897b      	ldrh	r3, [r7, #10]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	4906      	ldr	r1, [pc, #24]	; (8004640 <I2C_RequestMemoryRead+0x1cc>)
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f886 	bl	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	00010002 	.word	0x00010002

08004644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004654:	e048      	b.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465c:	d044      	beq.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fbb3 	bl	8002dc8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d139      	bne.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10d      	bne.n	800469a <I2C_WaitOnFlagUntilTimeout+0x56>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	e00c      	b.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	43da      	mvns	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d116      	bne.n	80046e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e023      	b.n	8004730 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	0c1b      	lsrs	r3, r3, #16
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10d      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0xca>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	e00c      	b.n	8004728 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	43da      	mvns	r2, r3
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	79fb      	ldrb	r3, [r7, #7]
 800472a:	429a      	cmp	r2, r3
 800472c:	d093      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004746:	e071      	b.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d123      	bne.n	80047a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004770:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	f043 0204 	orr.w	r2, r3, #4
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e067      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047a6:	d041      	beq.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a8:	f7fe fb0e 	bl	8002dc8 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d302      	bcc.n	80047be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d136      	bne.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10c      	bne.n	80047e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	43da      	mvns	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e00b      	b.n	80047fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	43da      	mvns	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d016      	beq.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e021      	b.n	8004870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10c      	bne.n	8004850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e00b      	b.n	8004868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	43da      	mvns	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	f47f af6d 	bne.w	8004748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004884:	e034      	b.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f8e3 	bl	8004a52 <I2C_IsAcknowledgeFailed>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e034      	b.n	8004900 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800489c:	d028      	beq.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489e:	f7fe fa93 	bl	8002dc8 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11d      	bne.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b80      	cmp	r3, #128	; 0x80
 80048c0:	d016      	beq.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e007      	b.n	8004900 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d1c3      	bne.n	8004886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004914:	e034      	b.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f89b 	bl	8004a52 <I2C_IsAcknowledgeFailed>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e034      	b.n	8004990 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800492c:	d028      	beq.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fe fa4b 	bl	8002dc8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11d      	bne.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b04      	cmp	r3, #4
 8004950:	d016      	beq.n	8004980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e007      	b.n	8004990 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d1c3      	bne.n	8004916 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049a4:	e049      	b.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d119      	bne.n	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0210 	mvn.w	r2, #16
 80049bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e030      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fe f9ee 	bl	8002dc8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d11d      	bne.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d016      	beq.n	8004a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e007      	b.n	8004a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d1ae      	bne.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	d11b      	bne.n	8004aa2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e267      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d075      	beq.n	8004bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ada:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d112      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ae6:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af2:	d10b      	bne.n	8004b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	4b7e      	ldr	r3, [pc, #504]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05b      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x108>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d157      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e242      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCC_OscConfig+0x74>
 8004b16:	4b76      	ldr	r3, [pc, #472]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a75      	ldr	r2, [pc, #468]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x98>
 8004b2e:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a6f      	ldr	r2, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b6d      	ldr	r3, [pc, #436]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6c      	ldr	r2, [pc, #432]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xb0>
 8004b48:	4b69      	ldr	r3, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a68      	ldr	r2, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a65      	ldr	r2, [pc, #404]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fe f92e 	bl	8002dc8 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fe f92a 	bl	8002dc8 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	; 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e207      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xc0>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b90:	f7fe f91a 	bl	8002dc8 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fe f916 	bl	8002dc8 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	; 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e1f3      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	4b51      	ldr	r3, [pc, #324]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0xe8>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d063      	beq.n	8004c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bde:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x152>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1c7      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4937      	ldr	r1, [pc, #220]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e03a      	b.n	8004c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b34      	ldr	r3, [pc, #208]	; (8004cf4 <HAL_RCC_OscConfig+0x244>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c26:	f7fe f8cf 	bl	8002dc8 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c2e:	f7fe f8cb 	bl	8002dc8 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e1a8      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4925      	ldr	r1, [pc, #148]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	600b      	str	r3, [r1, #0]
 8004c60:	e015      	b.n	8004c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x244>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fe f8ae 	bl	8002dc8 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c70:	f7fe f8aa 	bl	8002dc8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e187      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0308 	and.w	r3, r3, #8
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d036      	beq.n	8004d08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCC_OscConfig+0x248>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fe f88e 	bl	8002dc8 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fe f88a 	bl	8002dc8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e167      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x200>
 8004cce:	e01b      	b.n	8004d08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd0:	4b09      	ldr	r3, [pc, #36]	; (8004cf8 <HAL_RCC_OscConfig+0x248>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fe f877 	bl	8002dc8 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	e00e      	b.n	8004cfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fe f873 	bl	8002dc8 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d907      	bls.n	8004cfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e150      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	42470000 	.word	0x42470000
 8004cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfc:	4b88      	ldr	r3, [pc, #544]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ea      	bne.n	8004cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0304 	and.w	r3, r3, #4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8097 	beq.w	8004e44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d16:	2300      	movs	r3, #0
 8004d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1a:	4b81      	ldr	r3, [pc, #516]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10f      	bne.n	8004d46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b7d      	ldr	r3, [pc, #500]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	4a7c      	ldr	r2, [pc, #496]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6413      	str	r3, [r2, #64]	; 0x40
 8004d36:	4b7a      	ldr	r3, [pc, #488]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	4b77      	ldr	r3, [pc, #476]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d118      	bne.n	8004d84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d52:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a73      	ldr	r2, [pc, #460]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5e:	f7fe f833 	bl	8002dc8 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d66:	f7fe f82f 	bl	8002dc8 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e10c      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	4b6a      	ldr	r3, [pc, #424]	; (8004f24 <HAL_RCC_OscConfig+0x474>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <HAL_RCC_OscConfig+0x2ea>
 8004d8c:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a63      	ldr	r2, [pc, #396]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
 8004d98:	e01c      	b.n	8004dd4 <HAL_RCC_OscConfig+0x324>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	d10c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x30c>
 8004da2:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a5e      	ldr	r2, [pc, #376]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004da8:	f043 0304 	orr.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
 8004dae:	4b5c      	ldr	r3, [pc, #368]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a5b      	ldr	r2, [pc, #364]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dba:	e00b      	b.n	8004dd4 <HAL_RCC_OscConfig+0x324>
 8004dbc:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a57      	ldr	r2, [pc, #348]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a54      	ldr	r2, [pc, #336]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dce:	f023 0304 	bic.w	r3, r3, #4
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ddc:	f7fd fff4 	bl	8002dc8 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de2:	e00a      	b.n	8004dfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de4:	f7fd fff0 	bl	8002dc8 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0cb      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	4b49      	ldr	r3, [pc, #292]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0ee      	beq.n	8004de4 <HAL_RCC_OscConfig+0x334>
 8004e06:	e014      	b.n	8004e32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e08:	f7fd ffde 	bl	8002dc8 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e10:	f7fd ffda 	bl	8002dc8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0b5      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d105      	bne.n	8004e44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e38:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4a38      	ldr	r2, [pc, #224]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80a1 	beq.w	8004f90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e4e:	4b34      	ldr	r3, [pc, #208]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d05c      	beq.n	8004f14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d141      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd ffae 	bl	8002dc8 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd ffaa 	bl	8002dc8 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e087      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	4b27      	ldr	r3, [pc, #156]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	019b      	lsls	r3, r3, #6
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	491b      	ldr	r1, [pc, #108]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fd ff83 	bl	8002dc8 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fd ff7f 	bl	8002dc8 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e05c      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed8:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x416>
 8004ee4:	e054      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x478>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fd ff6c 	bl	8002dc8 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd ff68 	bl	8002dc8 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e045      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <HAL_RCC_OscConfig+0x470>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x444>
 8004f12:	e03d      	b.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d107      	bne.n	8004f2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e038      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40007000 	.word	0x40007000
 8004f28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_RCC_OscConfig+0x4ec>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d028      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d121      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d11a      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d111      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	3b01      	subs	r3, #1
 8004f76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800

08004fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0cc      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b68      	ldr	r3, [pc, #416]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d90c      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b63      	ldr	r3, [pc, #396]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b8      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a52      	ldr	r2, [pc, #328]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	494d      	ldr	r1, [pc, #308]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d044      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d119      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e07f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d003      	beq.n	800505e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	4b3f      	ldr	r3, [pc, #252]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e06f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506e:	4b3b      	ldr	r3, [pc, #236]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e067      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4934      	ldr	r1, [pc, #208]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005090:	f7fd fe9a 	bl	8002dc8 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fd fe96 	bl	8002dc8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e04f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c0:	4b25      	ldr	r3, [pc, #148]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d20c      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b22      	ldr	r3, [pc, #136]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e032      	b.n	800514e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	490e      	ldr	r1, [pc, #56]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005126:	f000 f821 	bl	800516c <HAL_RCC_GetSysClockFreq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_RCC_ClockConfig+0x1c0>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fdfa 	bl	8002d40 <HAL_InitTick>

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023c00 	.word	0x40023c00
 800515c:	40023800 	.word	0x40023800
 8005160:	08007810 	.word	0x08007810
 8005164:	20000008 	.word	0x20000008
 8005168:	2000000c 	.word	0x2000000c

0800516c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b090      	sub	sp, #64	; 0x40
 8005172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
 8005178:	2300      	movs	r3, #0
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800517c:	2300      	movs	r3, #0
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d00d      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x40>
 8005190:	2b08      	cmp	r3, #8
 8005192:	f200 80a1 	bhi.w	80052d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x34>
 800519a:	2b04      	cmp	r3, #4
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800519e:	e09b      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b53      	ldr	r3, [pc, #332]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051a4:	e09b      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a6:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80051a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051aa:	e098      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ac:	4b4f      	ldr	r3, [pc, #316]	; (80052ec <HAL_RCC_GetSysClockFreq+0x180>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b6:	4b4d      	ldr	r3, [pc, #308]	; (80052ec <HAL_RCC_GetSysClockFreq+0x180>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d028      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c2:	4b4a      	ldr	r3, [pc, #296]	; (80052ec <HAL_RCC_GetSysClockFreq+0x180>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	2200      	movs	r2, #0
 80051ca:	623b      	str	r3, [r7, #32]
 80051cc:	627a      	str	r2, [r7, #36]	; 0x24
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051d4:	2100      	movs	r1, #0
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80051d8:	fb03 f201 	mul.w	r2, r3, r1
 80051dc:	2300      	movs	r3, #0
 80051de:	fb00 f303 	mul.w	r3, r0, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	4a43      	ldr	r2, [pc, #268]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80051e6:	fba0 1202 	umull	r1, r2, r0, r2
 80051ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ec:	460a      	mov	r2, r1
 80051ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80051f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f2:	4413      	add	r3, r2
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f8:	2200      	movs	r2, #0
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	61fa      	str	r2, [r7, #28]
 80051fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005202:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005206:	f7fb fccb 	bl	8000ba0 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4613      	mov	r3, r2
 8005210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005212:	e053      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005214:	4b35      	ldr	r3, [pc, #212]	; (80052ec <HAL_RCC_GetSysClockFreq+0x180>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	099b      	lsrs	r3, r3, #6
 800521a:	2200      	movs	r2, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	617a      	str	r2, [r7, #20]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005226:	f04f 0b00 	mov.w	fp, #0
 800522a:	4652      	mov	r2, sl
 800522c:	465b      	mov	r3, fp
 800522e:	f04f 0000 	mov.w	r0, #0
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	0159      	lsls	r1, r3, #5
 8005238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800523c:	0150      	lsls	r0, r2, #5
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	ebb2 080a 	subs.w	r8, r2, sl
 8005246:	eb63 090b 	sbc.w	r9, r3, fp
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	f04f 0300 	mov.w	r3, #0
 8005252:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005256:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800525a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800525e:	ebb2 0408 	subs.w	r4, r2, r8
 8005262:	eb63 0509 	sbc.w	r5, r3, r9
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	00eb      	lsls	r3, r5, #3
 8005270:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005274:	00e2      	lsls	r2, r4, #3
 8005276:	4614      	mov	r4, r2
 8005278:	461d      	mov	r5, r3
 800527a:	eb14 030a 	adds.w	r3, r4, sl
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	eb45 030b 	adc.w	r3, r5, fp
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005292:	4629      	mov	r1, r5
 8005294:	028b      	lsls	r3, r1, #10
 8005296:	4621      	mov	r1, r4
 8005298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800529c:	4621      	mov	r1, r4
 800529e:	028a      	lsls	r2, r1, #10
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a6:	2200      	movs	r2, #0
 80052a8:	60bb      	str	r3, [r7, #8]
 80052aa:	60fa      	str	r2, [r7, #12]
 80052ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b0:	f7fb fc76 	bl	8000ba0 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4613      	mov	r3, r2
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCC_GetSysClockFreq+0x180>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	0c1b      	lsrs	r3, r3, #16
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	3301      	adds	r3, #1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80052cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052d6:	e002      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3740      	adds	r7, #64	; 0x40
 80052e4:	46bd      	mov	sp, r7
 80052e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ea:	bf00      	nop
 80052ec:	40023800 	.word	0x40023800
 80052f0:	00f42400 	.word	0x00f42400
 80052f4:	017d7840 	.word	0x017d7840

080052f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_RCC_GetHCLKFreq+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000008 	.word	0x20000008

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005314:	f7ff fff0 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005318:	4602      	mov	r2, r0
 800531a:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	0a9b      	lsrs	r3, r3, #10
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	4903      	ldr	r1, [pc, #12]	; (8005334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800532c:	4618      	mov	r0, r3
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40023800 	.word	0x40023800
 8005334:	08007820 	.word	0x08007820

08005338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800533c:	f7ff ffdc 	bl	80052f8 <HAL_RCC_GetHCLKFreq>
 8005340:	4602      	mov	r2, r0
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	0b5b      	lsrs	r3, r3, #13
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	4903      	ldr	r1, [pc, #12]	; (800535c <HAL_RCC_GetPCLK2Freq+0x24>)
 800534e:	5ccb      	ldrb	r3, [r1, r3]
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40023800 	.word	0x40023800
 800535c:	08007820 	.word	0x08007820

08005360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e041      	b.n	80053f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fd fb32 	bl	80029f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 f9a0 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d109      	bne.n	8005424 <HAL_TIM_PWM_Start+0x24>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e022      	b.n	800546a <HAL_TIM_PWM_Start+0x6a>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b04      	cmp	r3, #4
 8005428:	d109      	bne.n	800543e <HAL_TIM_PWM_Start+0x3e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	bf14      	ite	ne
 8005436:	2301      	movne	r3, #1
 8005438:	2300      	moveq	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e015      	b.n	800546a <HAL_TIM_PWM_Start+0x6a>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b08      	cmp	r3, #8
 8005442:	d109      	bne.n	8005458 <HAL_TIM_PWM_Start+0x58>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e008      	b.n	800546a <HAL_TIM_PWM_Start+0x6a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e068      	b.n	8005544 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <HAL_TIM_PWM_Start+0x82>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	e013      	b.n	80054aa <HAL_TIM_PWM_Start+0xaa>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d104      	bne.n	8005492 <HAL_TIM_PWM_Start+0x92>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005490:	e00b      	b.n	80054aa <HAL_TIM_PWM_Start+0xaa>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_PWM_Start+0xa2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	e003      	b.n	80054aa <HAL_TIM_PWM_Start+0xaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2201      	movs	r2, #1
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fb2e 	bl	8005b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_TIM_PWM_Start+0x14c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d107      	bne.n	80054d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <HAL_TIM_PWM_Start+0x14c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <HAL_TIM_PWM_Start+0x10e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d013      	beq.n	800550e <HAL_TIM_PWM_Start+0x10e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a19      	ldr	r2, [pc, #100]	; (8005550 <HAL_TIM_PWM_Start+0x150>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_TIM_PWM_Start+0x10e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a17      	ldr	r2, [pc, #92]	; (8005554 <HAL_TIM_PWM_Start+0x154>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_TIM_PWM_Start+0x10e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <HAL_TIM_PWM_Start+0x158>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_TIM_PWM_Start+0x10e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a14      	ldr	r2, [pc, #80]	; (800555c <HAL_TIM_PWM_Start+0x15c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2b06      	cmp	r3, #6
 800551e:	d010      	beq.n	8005542 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	e007      	b.n	8005542 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40014000 	.word	0x40014000

08005560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800557a:	2302      	movs	r3, #2
 800557c:	e0ae      	b.n	80056dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b0c      	cmp	r3, #12
 800558a:	f200 809f 	bhi.w	80056cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055c9 	.word	0x080055c9
 8005598:	080056cd 	.word	0x080056cd
 800559c:	080056cd 	.word	0x080056cd
 80055a0:	080056cd 	.word	0x080056cd
 80055a4:	08005609 	.word	0x08005609
 80055a8:	080056cd 	.word	0x080056cd
 80055ac:	080056cd 	.word	0x080056cd
 80055b0:	080056cd 	.word	0x080056cd
 80055b4:	0800564b 	.word	0x0800564b
 80055b8:	080056cd 	.word	0x080056cd
 80055bc:	080056cd 	.word	0x080056cd
 80055c0:	080056cd 	.word	0x080056cd
 80055c4:	0800568b 	.word	0x0800568b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f914 	bl	80057fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0208 	orr.w	r2, r2, #8
 80055e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699a      	ldr	r2, [r3, #24]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6999      	ldr	r1, [r3, #24]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	619a      	str	r2, [r3, #24]
      break;
 8005606:	e064      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f95a 	bl	80058c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6999      	ldr	r1, [r3, #24]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	021a      	lsls	r2, r3, #8
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	619a      	str	r2, [r3, #24]
      break;
 8005648:	e043      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f9a5 	bl	80059a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0208 	orr.w	r2, r2, #8
 8005664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0204 	bic.w	r2, r2, #4
 8005674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69d9      	ldr	r1, [r3, #28]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	61da      	str	r2, [r3, #28]
      break;
 8005688:	e023      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f9ef 	bl	8005a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69da      	ldr	r2, [r3, #28]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69d9      	ldr	r1, [r3, #28]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	61da      	str	r2, [r3, #28]
      break;
 80056ca:	e002      	b.n	80056d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
      break;
 80056d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056da:	7dfb      	ldrb	r3, [r7, #23]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a3a      	ldr	r2, [pc, #232]	; (80057e0 <TIM_Base_SetConfig+0xfc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a37      	ldr	r2, [pc, #220]	; (80057e4 <TIM_Base_SetConfig+0x100>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a36      	ldr	r2, [pc, #216]	; (80057e8 <TIM_Base_SetConfig+0x104>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a35      	ldr	r2, [pc, #212]	; (80057ec <TIM_Base_SetConfig+0x108>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	; (80057e0 <TIM_Base_SetConfig+0xfc>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01b      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d017      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <TIM_Base_SetConfig+0x100>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <TIM_Base_SetConfig+0x104>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a26      	ldr	r2, [pc, #152]	; (80057ec <TIM_Base_SetConfig+0x108>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a25      	ldr	r2, [pc, #148]	; (80057f0 <TIM_Base_SetConfig+0x10c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a24      	ldr	r2, [pc, #144]	; (80057f4 <TIM_Base_SetConfig+0x110>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a23      	ldr	r2, [pc, #140]	; (80057f8 <TIM_Base_SetConfig+0x114>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <TIM_Base_SetConfig+0xfc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d103      	bne.n	80057b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	611a      	str	r2, [r3, #16]
  }
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000
 80057f4:	40014400 	.word	0x40014400
 80057f8:	40014800 	.word	0x40014800

080057fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0201 	bic.w	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f023 0302 	bic.w	r3, r3, #2
 8005844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <TIM_OC1_SetConfig+0xc8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d10c      	bne.n	8005872 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f023 0308 	bic.w	r3, r3, #8
 800585e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <TIM_OC1_SetConfig+0xc8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40010000 	.word	0x40010000

080058c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f023 0210 	bic.w	r2, r3, #16
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0320 	bic.w	r3, r3, #32
 8005912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a1e      	ldr	r2, [pc, #120]	; (800599c <TIM_OC2_SetConfig+0xd4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10d      	bne.n	8005944 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a15      	ldr	r2, [pc, #84]	; (800599c <TIM_OC2_SetConfig+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d113      	bne.n	8005974 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800595a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	621a      	str	r2, [r3, #32]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000

080059a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <TIM_OC3_SetConfig+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d10d      	bne.n	8005a1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <TIM_OC3_SetConfig+0xd0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d113      	bne.n	8005a4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	621a      	str	r2, [r3, #32]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	40010000 	.word	0x40010000

08005a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	031b      	lsls	r3, r3, #12
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <TIM_OC4_SetConfig+0x9c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d109      	bne.n	8005ae8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	019b      	lsls	r3, r3, #6
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000

08005b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	2201      	movs	r2, #1
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	401a      	ands	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a1a      	ldr	r2, [r3, #32]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
}
 8005b52:	bf00      	nop
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e050      	b.n	8005c1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d013      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d10c      	bne.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40014000 	.word	0x40014000

08005c3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e03d      	b.n	8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e042      	b.n	8005d78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fc ff54 	bl	8002bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2224      	movs	r2, #36	; 0x24
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fb79 	bl	800641c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d175      	bne.n	8005e8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_UART_Transmit+0x2c>
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e06e      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2221      	movs	r2, #33	; 0x21
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dbe:	f7fd f803 	bl	8002dc8 <HAL_GetTick>
 8005dc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	88fa      	ldrh	r2, [r7, #6]
 8005dc8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	88fa      	ldrh	r2, [r7, #6]
 8005dce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd8:	d108      	bne.n	8005dec <HAL_UART_Transmit+0x6c>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e003      	b.n	8005df4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005df4:	e02e      	b.n	8005e54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f98b 	bl	800611c <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e03a      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	3302      	adds	r3, #2
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e007      	b.n	8005e46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	781a      	ldrb	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3301      	adds	r3, #1
 8005e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1cb      	bne.n	8005df6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2140      	movs	r1, #64	; 0x40
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f957 	bl	800611c <UART_WaitOnFlagUntilTimeout>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e006      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e000      	b.n	8005e8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d112      	bne.n	8005ed6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_UART_Receive_DMA+0x26>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e00b      	b.n	8005ed8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f97f 	bl	80061d0 <UART_Start_Receive_DMA>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	e000      	b.n	8005ed8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
  }
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b09c      	sub	sp, #112	; 0x70
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d172      	bne.n	8006022 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	2200      	movs	r2, #0
 8005f40:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f62:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f64:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f96:	647a      	str	r2, [r7, #68]	; 0x44
 8005f98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3314      	adds	r3, #20
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fca:	633a      	str	r2, [r7, #48]	; 0x30
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d119      	bne.n	8006022 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f023 0310 	bic.w	r3, r3, #16
 8006004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800600e:	61fa      	str	r2, [r7, #28]
 8006010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	69b9      	ldr	r1, [r7, #24]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	617b      	str	r3, [r7, #20]
   return(result);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006024:	2200      	movs	r2, #0
 8006026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	2b01      	cmp	r3, #1
 800602e:	d106      	bne.n	800603e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006032:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006034:	4619      	mov	r1, r3
 8006036:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006038:	f7ff ff66 	bl	8005f08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800603c:	e002      	b.n	8006044 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800603e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006040:	f7fc f922 	bl	8002288 <HAL_UART_RxCpltCallback>
}
 8006044:	bf00      	nop
 8006046:	3770      	adds	r7, #112	; 0x70
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	2b01      	cmp	r3, #1
 8006066:	d108      	bne.n	800607a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff ff48 	bl	8005f08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006078:	e002      	b.n	8006080 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff ff30 	bl	8005ee0 <HAL_UART_RxHalfCpltCallback>
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b21      	cmp	r3, #33	; 0x21
 80060ba:	d108      	bne.n	80060ce <UART_DMAError+0x46>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2200      	movs	r2, #0
 80060c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f000 f91b 	bl	8006304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b22      	cmp	r3, #34	; 0x22
 80060ee:	d108      	bne.n	8006102 <UART_DMAError+0x7a>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80060fc:	68b8      	ldr	r0, [r7, #8]
 80060fe:	f000 f929 	bl	8006354 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006106:	f043 0210 	orr.w	r2, r3, #16
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f7ff fef0 	bl	8005ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006114:	bf00      	nop
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612c:	e03b      	b.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006134:	d037      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006136:	f7fc fe47 	bl	8002dc8 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	429a      	cmp	r2, r3
 8006144:	d302      	bcc.n	800614c <UART_WaitOnFlagUntilTimeout+0x30>
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e03a      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0304 	and.w	r3, r3, #4
 800615a:	2b00      	cmp	r3, #0
 800615c:	d023      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b80      	cmp	r3, #128	; 0x80
 8006162:	d020      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d01d      	beq.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b08      	cmp	r3, #8
 8006176:	d116      	bne.n	80061a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f8e0 	bl	8006354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2208      	movs	r2, #8
 8006198:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e00f      	b.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	4013      	ands	r3, r2
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	bf0c      	ite	eq
 80061b6:	2301      	moveq	r3, #1
 80061b8:	2300      	movne	r3, #0
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d0b4      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b098      	sub	sp, #96	; 0x60
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	88fa      	ldrh	r2, [r7, #6]
 80061e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2222      	movs	r2, #34	; 0x22
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fc:	4a3e      	ldr	r2, [pc, #248]	; (80062f8 <UART_Start_Receive_DMA+0x128>)
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006204:	4a3d      	ldr	r2, [pc, #244]	; (80062fc <UART_Start_Receive_DMA+0x12c>)
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	4a3c      	ldr	r2, [pc, #240]	; (8006300 <UART_Start_Receive_DMA+0x130>)
 800620e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	2200      	movs	r2, #0
 8006216:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	f7fc ffba 	bl	80031a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	613b      	str	r3, [r7, #16]
 8006248:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d019      	beq.n	8006286 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006268:	65bb      	str	r3, [r7, #88]	; 0x58
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006272:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006274:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e5      	bne.n	8006252 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3314      	adds	r3, #20
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	f043 0301 	orr.w	r3, r3, #1
 800629c:	657b      	str	r3, [r7, #84]	; 0x54
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80062ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e5      	bne.n	8006286 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3314      	adds	r3, #20
 80062c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	e853 3f00 	ldrex	r3, [r3]
 80062c8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d0:	653b      	str	r3, [r7, #80]	; 0x50
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3314      	adds	r3, #20
 80062d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062da:	627a      	str	r2, [r7, #36]	; 0x24
 80062dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6a39      	ldr	r1, [r7, #32]
 80062e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e5      	bne.n	80062ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3760      	adds	r7, #96	; 0x60
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	08005f21 	.word	0x08005f21
 80062fc:	0800604d 	.word	0x0800604d
 8006300:	08006089 	.word	0x08006089

08006304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	; 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	60bb      	str	r3, [r7, #8]
   return(result);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	61ba      	str	r2, [r7, #24]
 800632e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	613b      	str	r3, [r7, #16]
   return(result);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e5      	bne.n	800630c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006348:	bf00      	nop
 800634a:	3724      	adds	r7, #36	; 0x24
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b095      	sub	sp, #84	; 0x54
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800637c:	643a      	str	r2, [r7, #64]	; 0x40
 800637e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006384:	e841 2300 	strex	r3, r2, [r1]
 8006388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3314      	adds	r3, #20
 8006396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d119      	bne.n	8006400 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	60bb      	str	r3, [r7, #8]
   return(result);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f023 0310 	bic.w	r3, r3, #16
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ec:	61ba      	str	r2, [r7, #24]
 80063ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	613b      	str	r3, [r7, #16]
   return(result);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800640e:	bf00      	nop
 8006410:	3754      	adds	r7, #84	; 0x54
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800641c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006420:	b0c0      	sub	sp, #256	; 0x100
 8006422:	af00      	add	r7, sp, #0
 8006424:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	68d9      	ldr	r1, [r3, #12]
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	ea40 0301 	orr.w	r3, r0, r1
 8006444:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	431a      	orrs	r2, r3
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	431a      	orrs	r2, r3
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006474:	f021 010c 	bic.w	r1, r1, #12
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006482:	430b      	orrs	r3, r1
 8006484:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006496:	6999      	ldr	r1, [r3, #24]
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	ea40 0301 	orr.w	r3, r0, r1
 80064a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b8f      	ldr	r3, [pc, #572]	; (80066e8 <UART_SetConfig+0x2cc>)
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d005      	beq.n	80064bc <UART_SetConfig+0xa0>
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b8d      	ldr	r3, [pc, #564]	; (80066ec <UART_SetConfig+0x2d0>)
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d104      	bne.n	80064c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064bc:	f7fe ff3c 	bl	8005338 <HAL_RCC_GetPCLK2Freq>
 80064c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064c4:	e003      	b.n	80064ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064c6:	f7fe ff23 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 80064ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d8:	f040 810c 	bne.w	80066f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064ee:	4622      	mov	r2, r4
 80064f0:	462b      	mov	r3, r5
 80064f2:	1891      	adds	r1, r2, r2
 80064f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064f6:	415b      	adcs	r3, r3
 80064f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064fe:	4621      	mov	r1, r4
 8006500:	eb12 0801 	adds.w	r8, r2, r1
 8006504:	4629      	mov	r1, r5
 8006506:	eb43 0901 	adc.w	r9, r3, r1
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800651a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800651e:	4690      	mov	r8, r2
 8006520:	4699      	mov	r9, r3
 8006522:	4623      	mov	r3, r4
 8006524:	eb18 0303 	adds.w	r3, r8, r3
 8006528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800652c:	462b      	mov	r3, r5
 800652e:	eb49 0303 	adc.w	r3, r9, r3
 8006532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006542:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006546:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800654a:	460b      	mov	r3, r1
 800654c:	18db      	adds	r3, r3, r3
 800654e:	653b      	str	r3, [r7, #80]	; 0x50
 8006550:	4613      	mov	r3, r2
 8006552:	eb42 0303 	adc.w	r3, r2, r3
 8006556:	657b      	str	r3, [r7, #84]	; 0x54
 8006558:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800655c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006560:	f7fa fb1e 	bl	8000ba0 <__aeabi_uldivmod>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <UART_SetConfig+0x2d4>)
 800656a:	fba3 2302 	umull	r2, r3, r3, r2
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	011c      	lsls	r4, r3, #4
 8006572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800657c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006580:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	64b9      	str	r1, [r7, #72]	; 0x48
 800658c:	415b      	adcs	r3, r3
 800658e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006590:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006594:	4641      	mov	r1, r8
 8006596:	eb12 0a01 	adds.w	sl, r2, r1
 800659a:	4649      	mov	r1, r9
 800659c:	eb43 0b01 	adc.w	fp, r3, r1
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065b4:	4692      	mov	sl, r2
 80065b6:	469b      	mov	fp, r3
 80065b8:	4643      	mov	r3, r8
 80065ba:	eb1a 0303 	adds.w	r3, sl, r3
 80065be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065c2:	464b      	mov	r3, r9
 80065c4:	eb4b 0303 	adc.w	r3, fp, r3
 80065c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065e0:	460b      	mov	r3, r1
 80065e2:	18db      	adds	r3, r3, r3
 80065e4:	643b      	str	r3, [r7, #64]	; 0x40
 80065e6:	4613      	mov	r3, r2
 80065e8:	eb42 0303 	adc.w	r3, r2, r3
 80065ec:	647b      	str	r3, [r7, #68]	; 0x44
 80065ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065f6:	f7fa fad3 	bl	8000ba0 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	4b3b      	ldr	r3, [pc, #236]	; (80066f0 <UART_SetConfig+0x2d4>)
 8006602:	fba3 2301 	umull	r2, r3, r3, r1
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2264      	movs	r2, #100	; 0x64
 800660a:	fb02 f303 	mul.w	r3, r2, r3
 800660e:	1acb      	subs	r3, r1, r3
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006616:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <UART_SetConfig+0x2d4>)
 8006618:	fba3 2302 	umull	r2, r3, r3, r2
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006624:	441c      	add	r4, r3
 8006626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006630:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006634:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	1891      	adds	r1, r2, r2
 800663e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006640:	415b      	adcs	r3, r3
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006648:	4641      	mov	r1, r8
 800664a:	1851      	adds	r1, r2, r1
 800664c:	6339      	str	r1, [r7, #48]	; 0x30
 800664e:	4649      	mov	r1, r9
 8006650:	414b      	adcs	r3, r1
 8006652:	637b      	str	r3, [r7, #52]	; 0x34
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006660:	4659      	mov	r1, fp
 8006662:	00cb      	lsls	r3, r1, #3
 8006664:	4651      	mov	r1, sl
 8006666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666a:	4651      	mov	r1, sl
 800666c:	00ca      	lsls	r2, r1, #3
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	4603      	mov	r3, r0
 8006674:	4642      	mov	r2, r8
 8006676:	189b      	adds	r3, r3, r2
 8006678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800667c:	464b      	mov	r3, r9
 800667e:	460a      	mov	r2, r1
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006694:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006698:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800669c:	460b      	mov	r3, r1
 800669e:	18db      	adds	r3, r3, r3
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a2:	4613      	mov	r3, r2
 80066a4:	eb42 0303 	adc.w	r3, r2, r3
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066b2:	f7fa fa75 	bl	8000ba0 <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <UART_SetConfig+0x2d4>)
 80066bc:	fba3 1302 	umull	r1, r3, r3, r2
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	2164      	movs	r1, #100	; 0x64
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	3332      	adds	r3, #50	; 0x32
 80066ce:	4a08      	ldr	r2, [pc, #32]	; (80066f0 <UART_SetConfig+0x2d4>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f003 0207 	and.w	r2, r3, #7
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4422      	add	r2, r4
 80066e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066e4:	e106      	b.n	80068f4 <UART_SetConfig+0x4d8>
 80066e6:	bf00      	nop
 80066e8:	40011000 	.word	0x40011000
 80066ec:	40011400 	.word	0x40011400
 80066f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006702:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006706:	4642      	mov	r2, r8
 8006708:	464b      	mov	r3, r9
 800670a:	1891      	adds	r1, r2, r2
 800670c:	6239      	str	r1, [r7, #32]
 800670e:	415b      	adcs	r3, r3
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
 8006712:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006716:	4641      	mov	r1, r8
 8006718:	1854      	adds	r4, r2, r1
 800671a:	4649      	mov	r1, r9
 800671c:	eb43 0501 	adc.w	r5, r3, r1
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	00eb      	lsls	r3, r5, #3
 800672a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800672e:	00e2      	lsls	r2, r4, #3
 8006730:	4614      	mov	r4, r2
 8006732:	461d      	mov	r5, r3
 8006734:	4643      	mov	r3, r8
 8006736:	18e3      	adds	r3, r4, r3
 8006738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800673c:	464b      	mov	r3, r9
 800673e:	eb45 0303 	adc.w	r3, r5, r3
 8006742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006762:	4629      	mov	r1, r5
 8006764:	008b      	lsls	r3, r1, #2
 8006766:	4621      	mov	r1, r4
 8006768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800676c:	4621      	mov	r1, r4
 800676e:	008a      	lsls	r2, r1, #2
 8006770:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006774:	f7fa fa14 	bl	8000ba0 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4b60      	ldr	r3, [pc, #384]	; (8006900 <UART_SetConfig+0x4e4>)
 800677e:	fba3 2302 	umull	r2, r3, r3, r2
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	011c      	lsls	r4, r3, #4
 8006786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678a:	2200      	movs	r2, #0
 800678c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006794:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	1891      	adds	r1, r2, r2
 800679e:	61b9      	str	r1, [r7, #24]
 80067a0:	415b      	adcs	r3, r3
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a8:	4641      	mov	r1, r8
 80067aa:	1851      	adds	r1, r2, r1
 80067ac:	6139      	str	r1, [r7, #16]
 80067ae:	4649      	mov	r1, r9
 80067b0:	414b      	adcs	r3, r1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067c0:	4659      	mov	r1, fp
 80067c2:	00cb      	lsls	r3, r1, #3
 80067c4:	4651      	mov	r1, sl
 80067c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ca:	4651      	mov	r1, sl
 80067cc:	00ca      	lsls	r2, r1, #3
 80067ce:	4610      	mov	r0, r2
 80067d0:	4619      	mov	r1, r3
 80067d2:	4603      	mov	r3, r0
 80067d4:	4642      	mov	r2, r8
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067dc:	464b      	mov	r3, r9
 80067de:	460a      	mov	r2, r1
 80067e0:	eb42 0303 	adc.w	r3, r2, r3
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006800:	4649      	mov	r1, r9
 8006802:	008b      	lsls	r3, r1, #2
 8006804:	4641      	mov	r1, r8
 8006806:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680a:	4641      	mov	r1, r8
 800680c:	008a      	lsls	r2, r1, #2
 800680e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006812:	f7fa f9c5 	bl	8000ba0 <__aeabi_uldivmod>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4611      	mov	r1, r2
 800681c:	4b38      	ldr	r3, [pc, #224]	; (8006900 <UART_SetConfig+0x4e4>)
 800681e:	fba3 2301 	umull	r2, r3, r3, r1
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	2264      	movs	r2, #100	; 0x64
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	1acb      	subs	r3, r1, r3
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	3332      	adds	r3, #50	; 0x32
 8006830:	4a33      	ldr	r2, [pc, #204]	; (8006900 <UART_SetConfig+0x4e4>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800683c:	441c      	add	r4, r3
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	673b      	str	r3, [r7, #112]	; 0x70
 8006846:	677a      	str	r2, [r7, #116]	; 0x74
 8006848:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800684c:	4642      	mov	r2, r8
 800684e:	464b      	mov	r3, r9
 8006850:	1891      	adds	r1, r2, r2
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	415b      	adcs	r3, r3
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800685c:	4641      	mov	r1, r8
 800685e:	1851      	adds	r1, r2, r1
 8006860:	6039      	str	r1, [r7, #0]
 8006862:	4649      	mov	r1, r9
 8006864:	414b      	adcs	r3, r1
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006874:	4659      	mov	r1, fp
 8006876:	00cb      	lsls	r3, r1, #3
 8006878:	4651      	mov	r1, sl
 800687a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800687e:	4651      	mov	r1, sl
 8006880:	00ca      	lsls	r2, r1, #3
 8006882:	4610      	mov	r0, r2
 8006884:	4619      	mov	r1, r3
 8006886:	4603      	mov	r3, r0
 8006888:	4642      	mov	r2, r8
 800688a:	189b      	adds	r3, r3, r2
 800688c:	66bb      	str	r3, [r7, #104]	; 0x68
 800688e:	464b      	mov	r3, r9
 8006890:	460a      	mov	r2, r1
 8006892:	eb42 0303 	adc.w	r3, r2, r3
 8006896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	663b      	str	r3, [r7, #96]	; 0x60
 80068a2:	667a      	str	r2, [r7, #100]	; 0x64
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068b0:	4649      	mov	r1, r9
 80068b2:	008b      	lsls	r3, r1, #2
 80068b4:	4641      	mov	r1, r8
 80068b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ba:	4641      	mov	r1, r8
 80068bc:	008a      	lsls	r2, r1, #2
 80068be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068c2:	f7fa f96d 	bl	8000ba0 <__aeabi_uldivmod>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <UART_SetConfig+0x4e4>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	095b      	lsrs	r3, r3, #5
 80068d2:	2164      	movs	r1, #100	; 0x64
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	3332      	adds	r3, #50	; 0x32
 80068de:	4a08      	ldr	r2, [pc, #32]	; (8006900 <UART_SetConfig+0x4e4>)
 80068e0:	fba2 2303 	umull	r2, r3, r2, r3
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f003 020f 	and.w	r2, r3, #15
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4422      	add	r2, r4
 80068f2:	609a      	str	r2, [r3, #8]
}
 80068f4:	bf00      	nop
 80068f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068fa:	46bd      	mov	sp, r7
 80068fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006900:	51eb851f 	.word	0x51eb851f

08006904 <memset>:
 8006904:	4402      	add	r2, r0
 8006906:	4603      	mov	r3, r0
 8006908:	4293      	cmp	r3, r2
 800690a:	d100      	bne.n	800690e <memset+0xa>
 800690c:	4770      	bx	lr
 800690e:	f803 1b01 	strb.w	r1, [r3], #1
 8006912:	e7f9      	b.n	8006908 <memset+0x4>

08006914 <__errno>:
 8006914:	4b01      	ldr	r3, [pc, #4]	; (800691c <__errno+0x8>)
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000060 	.word	0x20000060

08006920 <__libc_init_array>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	4d0d      	ldr	r5, [pc, #52]	; (8006958 <__libc_init_array+0x38>)
 8006924:	4c0d      	ldr	r4, [pc, #52]	; (800695c <__libc_init_array+0x3c>)
 8006926:	1b64      	subs	r4, r4, r5
 8006928:	10a4      	asrs	r4, r4, #2
 800692a:	2600      	movs	r6, #0
 800692c:	42a6      	cmp	r6, r4
 800692e:	d109      	bne.n	8006944 <__libc_init_array+0x24>
 8006930:	4d0b      	ldr	r5, [pc, #44]	; (8006960 <__libc_init_array+0x40>)
 8006932:	4c0c      	ldr	r4, [pc, #48]	; (8006964 <__libc_init_array+0x44>)
 8006934:	f000 ff60 	bl	80077f8 <_init>
 8006938:	1b64      	subs	r4, r4, r5
 800693a:	10a4      	asrs	r4, r4, #2
 800693c:	2600      	movs	r6, #0
 800693e:	42a6      	cmp	r6, r4
 8006940:	d105      	bne.n	800694e <__libc_init_array+0x2e>
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	f855 3b04 	ldr.w	r3, [r5], #4
 8006948:	4798      	blx	r3
 800694a:	3601      	adds	r6, #1
 800694c:	e7ee      	b.n	800692c <__libc_init_array+0xc>
 800694e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006952:	4798      	blx	r3
 8006954:	3601      	adds	r6, #1
 8006956:	e7f2      	b.n	800693e <__libc_init_array+0x1e>
 8006958:	08007868 	.word	0x08007868
 800695c:	08007868 	.word	0x08007868
 8006960:	08007868 	.word	0x08007868
 8006964:	0800786c 	.word	0x0800786c

08006968 <memcpy>:
 8006968:	440a      	add	r2, r1
 800696a:	4291      	cmp	r1, r2
 800696c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006970:	d100      	bne.n	8006974 <memcpy+0xc>
 8006972:	4770      	bx	lr
 8006974:	b510      	push	{r4, lr}
 8006976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800697e:	4291      	cmp	r1, r2
 8006980:	d1f9      	bne.n	8006976 <memcpy+0xe>
 8006982:	bd10      	pop	{r4, pc}

08006984 <pow>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	ed2d 8b02 	vpush	{d8}
 800698a:	eeb0 8a40 	vmov.f32	s16, s0
 800698e:	eef0 8a60 	vmov.f32	s17, s1
 8006992:	ec55 4b11 	vmov	r4, r5, d1
 8006996:	f000 f873 	bl	8006a80 <__ieee754_pow>
 800699a:	4622      	mov	r2, r4
 800699c:	462b      	mov	r3, r5
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	ec57 6b10 	vmov	r6, r7, d0
 80069a6:	f7fa f86d 	bl	8000a84 <__aeabi_dcmpun>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d13b      	bne.n	8006a26 <pow+0xa2>
 80069ae:	ec51 0b18 	vmov	r0, r1, d8
 80069b2:	2200      	movs	r2, #0
 80069b4:	2300      	movs	r3, #0
 80069b6:	f7fa f833 	bl	8000a20 <__aeabi_dcmpeq>
 80069ba:	b1b8      	cbz	r0, 80069ec <pow+0x68>
 80069bc:	2200      	movs	r2, #0
 80069be:	2300      	movs	r3, #0
 80069c0:	4620      	mov	r0, r4
 80069c2:	4629      	mov	r1, r5
 80069c4:	f7fa f82c 	bl	8000a20 <__aeabi_dcmpeq>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d146      	bne.n	8006a5a <pow+0xd6>
 80069cc:	ec45 4b10 	vmov	d0, r4, r5
 80069d0:	f000 f848 	bl	8006a64 <finite>
 80069d4:	b338      	cbz	r0, 8006a26 <pow+0xa2>
 80069d6:	2200      	movs	r2, #0
 80069d8:	2300      	movs	r3, #0
 80069da:	4620      	mov	r0, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	f7fa f829 	bl	8000a34 <__aeabi_dcmplt>
 80069e2:	b300      	cbz	r0, 8006a26 <pow+0xa2>
 80069e4:	f7ff ff96 	bl	8006914 <__errno>
 80069e8:	2322      	movs	r3, #34	; 0x22
 80069ea:	e01b      	b.n	8006a24 <pow+0xa0>
 80069ec:	ec47 6b10 	vmov	d0, r6, r7
 80069f0:	f000 f838 	bl	8006a64 <finite>
 80069f4:	b9e0      	cbnz	r0, 8006a30 <pow+0xac>
 80069f6:	eeb0 0a48 	vmov.f32	s0, s16
 80069fa:	eef0 0a68 	vmov.f32	s1, s17
 80069fe:	f000 f831 	bl	8006a64 <finite>
 8006a02:	b1a8      	cbz	r0, 8006a30 <pow+0xac>
 8006a04:	ec45 4b10 	vmov	d0, r4, r5
 8006a08:	f000 f82c 	bl	8006a64 <finite>
 8006a0c:	b180      	cbz	r0, 8006a30 <pow+0xac>
 8006a0e:	4632      	mov	r2, r6
 8006a10:	463b      	mov	r3, r7
 8006a12:	4630      	mov	r0, r6
 8006a14:	4639      	mov	r1, r7
 8006a16:	f7fa f835 	bl	8000a84 <__aeabi_dcmpun>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0e2      	beq.n	80069e4 <pow+0x60>
 8006a1e:	f7ff ff79 	bl	8006914 <__errno>
 8006a22:	2321      	movs	r3, #33	; 0x21
 8006a24:	6003      	str	r3, [r0, #0]
 8006a26:	ecbd 8b02 	vpop	{d8}
 8006a2a:	ec47 6b10 	vmov	d0, r6, r7
 8006a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a30:	2200      	movs	r2, #0
 8006a32:	2300      	movs	r3, #0
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7f9 fff2 	bl	8000a20 <__aeabi_dcmpeq>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d0f2      	beq.n	8006a26 <pow+0xa2>
 8006a40:	eeb0 0a48 	vmov.f32	s0, s16
 8006a44:	eef0 0a68 	vmov.f32	s1, s17
 8006a48:	f000 f80c 	bl	8006a64 <finite>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0ea      	beq.n	8006a26 <pow+0xa2>
 8006a50:	ec45 4b10 	vmov	d0, r4, r5
 8006a54:	f000 f806 	bl	8006a64 <finite>
 8006a58:	e7c3      	b.n	80069e2 <pow+0x5e>
 8006a5a:	4f01      	ldr	r7, [pc, #4]	; (8006a60 <pow+0xdc>)
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	e7e2      	b.n	8006a26 <pow+0xa2>
 8006a60:	3ff00000 	.word	0x3ff00000

08006a64 <finite>:
 8006a64:	b082      	sub	sp, #8
 8006a66:	ed8d 0b00 	vstr	d0, [sp]
 8006a6a:	9801      	ldr	r0, [sp, #4]
 8006a6c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006a70:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006a74:	0fc0      	lsrs	r0, r0, #31
 8006a76:	b002      	add	sp, #8
 8006a78:	4770      	bx	lr
 8006a7a:	0000      	movs	r0, r0
 8006a7c:	0000      	movs	r0, r0
	...

08006a80 <__ieee754_pow>:
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	ed2d 8b06 	vpush	{d8-d10}
 8006a88:	b089      	sub	sp, #36	; 0x24
 8006a8a:	ed8d 1b00 	vstr	d1, [sp]
 8006a8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006a92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006a96:	ea58 0102 	orrs.w	r1, r8, r2
 8006a9a:	ec57 6b10 	vmov	r6, r7, d0
 8006a9e:	d115      	bne.n	8006acc <__ieee754_pow+0x4c>
 8006aa0:	19b3      	adds	r3, r6, r6
 8006aa2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8006aa6:	4152      	adcs	r2, r2
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	4b89      	ldr	r3, [pc, #548]	; (8006cd0 <__ieee754_pow+0x250>)
 8006aac:	4193      	sbcs	r3, r2
 8006aae:	f080 84d1 	bcs.w	8007454 <__ieee754_pow+0x9d4>
 8006ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4639      	mov	r1, r7
 8006aba:	f7f9 fb93 	bl	80001e4 <__adddf3>
 8006abe:	ec41 0b10 	vmov	d0, r0, r1
 8006ac2:	b009      	add	sp, #36	; 0x24
 8006ac4:	ecbd 8b06 	vpop	{d8-d10}
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006acc:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <__ieee754_pow+0x254>)
 8006ace:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006ad2:	429c      	cmp	r4, r3
 8006ad4:	ee10 aa10 	vmov	sl, s0
 8006ad8:	463d      	mov	r5, r7
 8006ada:	dc06      	bgt.n	8006aea <__ieee754_pow+0x6a>
 8006adc:	d101      	bne.n	8006ae2 <__ieee754_pow+0x62>
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	d1e7      	bne.n	8006ab2 <__ieee754_pow+0x32>
 8006ae2:	4598      	cmp	r8, r3
 8006ae4:	dc01      	bgt.n	8006aea <__ieee754_pow+0x6a>
 8006ae6:	d10f      	bne.n	8006b08 <__ieee754_pow+0x88>
 8006ae8:	b172      	cbz	r2, 8006b08 <__ieee754_pow+0x88>
 8006aea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006aee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006af2:	ea55 050a 	orrs.w	r5, r5, sl
 8006af6:	d1dc      	bne.n	8006ab2 <__ieee754_pow+0x32>
 8006af8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006afc:	18db      	adds	r3, r3, r3
 8006afe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006b02:	4152      	adcs	r2, r2
 8006b04:	429d      	cmp	r5, r3
 8006b06:	e7d0      	b.n	8006aaa <__ieee754_pow+0x2a>
 8006b08:	2d00      	cmp	r5, #0
 8006b0a:	da3b      	bge.n	8006b84 <__ieee754_pow+0x104>
 8006b0c:	4b72      	ldr	r3, [pc, #456]	; (8006cd8 <__ieee754_pow+0x258>)
 8006b0e:	4598      	cmp	r8, r3
 8006b10:	dc51      	bgt.n	8006bb6 <__ieee754_pow+0x136>
 8006b12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006b16:	4598      	cmp	r8, r3
 8006b18:	f340 84ab 	ble.w	8007472 <__ieee754_pow+0x9f2>
 8006b1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006b20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006b24:	2b14      	cmp	r3, #20
 8006b26:	dd0f      	ble.n	8006b48 <__ieee754_pow+0xc8>
 8006b28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006b2c:	fa22 f103 	lsr.w	r1, r2, r3
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	4293      	cmp	r3, r2
 8006b36:	f040 849c 	bne.w	8007472 <__ieee754_pow+0x9f2>
 8006b3a:	f001 0101 	and.w	r1, r1, #1
 8006b3e:	f1c1 0302 	rsb	r3, r1, #2
 8006b42:	9304      	str	r3, [sp, #16]
 8006b44:	b182      	cbz	r2, 8006b68 <__ieee754_pow+0xe8>
 8006b46:	e05f      	b.n	8006c08 <__ieee754_pow+0x188>
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	d15b      	bne.n	8006c04 <__ieee754_pow+0x184>
 8006b4c:	f1c3 0314 	rsb	r3, r3, #20
 8006b50:	fa48 f103 	asr.w	r1, r8, r3
 8006b54:	fa01 f303 	lsl.w	r3, r1, r3
 8006b58:	4543      	cmp	r3, r8
 8006b5a:	f040 8487 	bne.w	800746c <__ieee754_pow+0x9ec>
 8006b5e:	f001 0101 	and.w	r1, r1, #1
 8006b62:	f1c1 0302 	rsb	r3, r1, #2
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	4b5c      	ldr	r3, [pc, #368]	; (8006cdc <__ieee754_pow+0x25c>)
 8006b6a:	4598      	cmp	r8, r3
 8006b6c:	d132      	bne.n	8006bd4 <__ieee754_pow+0x154>
 8006b6e:	f1b9 0f00 	cmp.w	r9, #0
 8006b72:	f280 8477 	bge.w	8007464 <__ieee754_pow+0x9e4>
 8006b76:	4959      	ldr	r1, [pc, #356]	; (8006cdc <__ieee754_pow+0x25c>)
 8006b78:	4632      	mov	r2, r6
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	f7f9 fe11 	bl	80007a4 <__aeabi_ddiv>
 8006b82:	e79c      	b.n	8006abe <__ieee754_pow+0x3e>
 8006b84:	2300      	movs	r3, #0
 8006b86:	9304      	str	r3, [sp, #16]
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	d13d      	bne.n	8006c08 <__ieee754_pow+0x188>
 8006b8c:	4b51      	ldr	r3, [pc, #324]	; (8006cd4 <__ieee754_pow+0x254>)
 8006b8e:	4598      	cmp	r8, r3
 8006b90:	d1ea      	bne.n	8006b68 <__ieee754_pow+0xe8>
 8006b92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006b96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006b9a:	ea53 030a 	orrs.w	r3, r3, sl
 8006b9e:	f000 8459 	beq.w	8007454 <__ieee754_pow+0x9d4>
 8006ba2:	4b4f      	ldr	r3, [pc, #316]	; (8006ce0 <__ieee754_pow+0x260>)
 8006ba4:	429c      	cmp	r4, r3
 8006ba6:	dd08      	ble.n	8006bba <__ieee754_pow+0x13a>
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	f2c0 8456 	blt.w	800745c <__ieee754_pow+0x9dc>
 8006bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bb4:	e783      	b.n	8006abe <__ieee754_pow+0x3e>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e7e5      	b.n	8006b86 <__ieee754_pow+0x106>
 8006bba:	f1b9 0f00 	cmp.w	r9, #0
 8006bbe:	f04f 0000 	mov.w	r0, #0
 8006bc2:	f04f 0100 	mov.w	r1, #0
 8006bc6:	f6bf af7a 	bge.w	8006abe <__ieee754_pow+0x3e>
 8006bca:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006bce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006bd2:	e774      	b.n	8006abe <__ieee754_pow+0x3e>
 8006bd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006bd8:	d106      	bne.n	8006be8 <__ieee754_pow+0x168>
 8006bda:	4632      	mov	r2, r6
 8006bdc:	463b      	mov	r3, r7
 8006bde:	4630      	mov	r0, r6
 8006be0:	4639      	mov	r1, r7
 8006be2:	f7f9 fcb5 	bl	8000550 <__aeabi_dmul>
 8006be6:	e76a      	b.n	8006abe <__ieee754_pow+0x3e>
 8006be8:	4b3e      	ldr	r3, [pc, #248]	; (8006ce4 <__ieee754_pow+0x264>)
 8006bea:	4599      	cmp	r9, r3
 8006bec:	d10c      	bne.n	8006c08 <__ieee754_pow+0x188>
 8006bee:	2d00      	cmp	r5, #0
 8006bf0:	db0a      	blt.n	8006c08 <__ieee754_pow+0x188>
 8006bf2:	ec47 6b10 	vmov	d0, r6, r7
 8006bf6:	b009      	add	sp, #36	; 0x24
 8006bf8:	ecbd 8b06 	vpop	{d8-d10}
 8006bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c00:	f000 bd20 	b.w	8007644 <__ieee754_sqrt>
 8006c04:	2300      	movs	r3, #0
 8006c06:	9304      	str	r3, [sp, #16]
 8006c08:	ec47 6b10 	vmov	d0, r6, r7
 8006c0c:	f000 fc62 	bl	80074d4 <fabs>
 8006c10:	ec51 0b10 	vmov	r0, r1, d0
 8006c14:	f1ba 0f00 	cmp.w	sl, #0
 8006c18:	d129      	bne.n	8006c6e <__ieee754_pow+0x1ee>
 8006c1a:	b124      	cbz	r4, 8006c26 <__ieee754_pow+0x1a6>
 8006c1c:	4b2f      	ldr	r3, [pc, #188]	; (8006cdc <__ieee754_pow+0x25c>)
 8006c1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d123      	bne.n	8006c6e <__ieee754_pow+0x1ee>
 8006c26:	f1b9 0f00 	cmp.w	r9, #0
 8006c2a:	da05      	bge.n	8006c38 <__ieee754_pow+0x1b8>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	2000      	movs	r0, #0
 8006c32:	492a      	ldr	r1, [pc, #168]	; (8006cdc <__ieee754_pow+0x25c>)
 8006c34:	f7f9 fdb6 	bl	80007a4 <__aeabi_ddiv>
 8006c38:	2d00      	cmp	r5, #0
 8006c3a:	f6bf af40 	bge.w	8006abe <__ieee754_pow+0x3e>
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006c44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006c48:	431c      	orrs	r4, r3
 8006c4a:	d108      	bne.n	8006c5e <__ieee754_pow+0x1de>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4610      	mov	r0, r2
 8006c52:	4619      	mov	r1, r3
 8006c54:	f7f9 fac4 	bl	80001e0 <__aeabi_dsub>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	e78f      	b.n	8006b7e <__ieee754_pow+0xfe>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f47f af2c 	bne.w	8006abe <__ieee754_pow+0x3e>
 8006c66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	e727      	b.n	8006abe <__ieee754_pow+0x3e>
 8006c6e:	0feb      	lsrs	r3, r5, #31
 8006c70:	3b01      	subs	r3, #1
 8006c72:	9306      	str	r3, [sp, #24]
 8006c74:	9a06      	ldr	r2, [sp, #24]
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	d102      	bne.n	8006c82 <__ieee754_pow+0x202>
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	463b      	mov	r3, r7
 8006c80:	e7e6      	b.n	8006c50 <__ieee754_pow+0x1d0>
 8006c82:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <__ieee754_pow+0x268>)
 8006c84:	4598      	cmp	r8, r3
 8006c86:	f340 80fb 	ble.w	8006e80 <__ieee754_pow+0x400>
 8006c8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006c8e:	4598      	cmp	r8, r3
 8006c90:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <__ieee754_pow+0x260>)
 8006c92:	dd0c      	ble.n	8006cae <__ieee754_pow+0x22e>
 8006c94:	429c      	cmp	r4, r3
 8006c96:	dc0f      	bgt.n	8006cb8 <__ieee754_pow+0x238>
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	da0f      	bge.n	8006cbe <__ieee754_pow+0x23e>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	b009      	add	sp, #36	; 0x24
 8006ca2:	ecbd 8b06 	vpop	{d8-d10}
 8006ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006caa:	f000 bcc2 	b.w	8007632 <__math_oflow>
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	dbf2      	blt.n	8006c98 <__ieee754_pow+0x218>
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <__ieee754_pow+0x25c>)
 8006cb4:	429c      	cmp	r4, r3
 8006cb6:	dd19      	ble.n	8006cec <__ieee754_pow+0x26c>
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	dcef      	bgt.n	8006c9e <__ieee754_pow+0x21e>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	b009      	add	sp, #36	; 0x24
 8006cc2:	ecbd 8b06 	vpop	{d8-d10}
 8006cc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	f000 bca9 	b.w	8007620 <__math_uflow>
 8006cce:	bf00      	nop
 8006cd0:	fff00000 	.word	0xfff00000
 8006cd4:	7ff00000 	.word	0x7ff00000
 8006cd8:	433fffff 	.word	0x433fffff
 8006cdc:	3ff00000 	.word	0x3ff00000
 8006ce0:	3fefffff 	.word	0x3fefffff
 8006ce4:	3fe00000 	.word	0x3fe00000
 8006ce8:	41e00000 	.word	0x41e00000
 8006cec:	4b60      	ldr	r3, [pc, #384]	; (8006e70 <__ieee754_pow+0x3f0>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7f9 fa76 	bl	80001e0 <__aeabi_dsub>
 8006cf4:	a354      	add	r3, pc, #336	; (adr r3, 8006e48 <__ieee754_pow+0x3c8>)
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	f7f9 fc27 	bl	8000550 <__aeabi_dmul>
 8006d02:	a353      	add	r3, pc, #332	; (adr r3, 8006e50 <__ieee754_pow+0x3d0>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	4606      	mov	r6, r0
 8006d0a:	460f      	mov	r7, r1
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fc1e 	bl	8000550 <__aeabi_dmul>
 8006d14:	4b57      	ldr	r3, [pc, #348]	; (8006e74 <__ieee754_pow+0x3f4>)
 8006d16:	4682      	mov	sl, r0
 8006d18:	468b      	mov	fp, r1
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4629      	mov	r1, r5
 8006d20:	f7f9 fc16 	bl	8000550 <__aeabi_dmul>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	a14b      	add	r1, pc, #300	; (adr r1, 8006e58 <__ieee754_pow+0x3d8>)
 8006d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d2e:	f7f9 fa57 	bl	80001e0 <__aeabi_dsub>
 8006d32:	4622      	mov	r2, r4
 8006d34:	462b      	mov	r3, r5
 8006d36:	f7f9 fc0b 	bl	8000550 <__aeabi_dmul>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	2000      	movs	r0, #0
 8006d40:	494d      	ldr	r1, [pc, #308]	; (8006e78 <__ieee754_pow+0x3f8>)
 8006d42:	f7f9 fa4d 	bl	80001e0 <__aeabi_dsub>
 8006d46:	4622      	mov	r2, r4
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4689      	mov	r9, r1
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fbfd 	bl	8000550 <__aeabi_dmul>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	f7f9 fbf7 	bl	8000550 <__aeabi_dmul>
 8006d62:	a33f      	add	r3, pc, #252	; (adr r3, 8006e60 <__ieee754_pow+0x3e0>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fbf2 	bl	8000550 <__aeabi_dmul>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4650      	mov	r0, sl
 8006d72:	4659      	mov	r1, fp
 8006d74:	f7f9 fa34 	bl	80001e0 <__aeabi_dsub>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	4689      	mov	r9, r1
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fa2e 	bl	80001e4 <__adddf3>
 8006d88:	2000      	movs	r0, #0
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	f7f9 fa25 	bl	80001e0 <__aeabi_dsub>
 8006d96:	4602      	mov	r2, r0
 8006d98:	460b      	mov	r3, r1
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	f7f9 fa1f 	bl	80001e0 <__aeabi_dsub>
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	9a06      	ldr	r2, [sp, #24]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	4313      	orrs	r3, r2
 8006daa:	4682      	mov	sl, r0
 8006dac:	468b      	mov	fp, r1
 8006dae:	f040 81e7 	bne.w	8007180 <__ieee754_pow+0x700>
 8006db2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006e68 <__ieee754_pow+0x3e8>
 8006db6:	eeb0 8a47 	vmov.f32	s16, s14
 8006dba:	eef0 8a67 	vmov.f32	s17, s15
 8006dbe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dcc:	f7f9 fa08 	bl	80001e0 <__aeabi_dsub>
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	462b      	mov	r3, r5
 8006dd4:	f7f9 fbbc 	bl	8000550 <__aeabi_dmul>
 8006dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ddc:	4680      	mov	r8, r0
 8006dde:	4689      	mov	r9, r1
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	f7f9 fbb4 	bl	8000550 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4640      	mov	r0, r8
 8006dee:	4649      	mov	r1, r9
 8006df0:	f7f9 f9f8 	bl	80001e4 <__adddf3>
 8006df4:	4632      	mov	r2, r6
 8006df6:	463b      	mov	r3, r7
 8006df8:	4680      	mov	r8, r0
 8006dfa:	4689      	mov	r9, r1
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	4629      	mov	r1, r5
 8006e00:	f7f9 fba6 	bl	8000550 <__aeabi_dmul>
 8006e04:	460b      	mov	r3, r1
 8006e06:	4604      	mov	r4, r0
 8006e08:	460d      	mov	r5, r1
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f7f9 f9e8 	bl	80001e4 <__adddf3>
 8006e14:	4b19      	ldr	r3, [pc, #100]	; (8006e7c <__ieee754_pow+0x3fc>)
 8006e16:	4299      	cmp	r1, r3
 8006e18:	ec45 4b19 	vmov	d9, r4, r5
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	460f      	mov	r7, r1
 8006e20:	468b      	mov	fp, r1
 8006e22:	f340 82f0 	ble.w	8007406 <__ieee754_pow+0x986>
 8006e26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006e2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006e2e:	4303      	orrs	r3, r0
 8006e30:	f000 81e4 	beq.w	80071fc <__ieee754_pow+0x77c>
 8006e34:	ec51 0b18 	vmov	r0, r1, d8
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f7f9 fdfa 	bl	8000a34 <__aeabi_dcmplt>
 8006e40:	3800      	subs	r0, #0
 8006e42:	bf18      	it	ne
 8006e44:	2001      	movne	r0, #1
 8006e46:	e72b      	b.n	8006ca0 <__ieee754_pow+0x220>
 8006e48:	60000000 	.word	0x60000000
 8006e4c:	3ff71547 	.word	0x3ff71547
 8006e50:	f85ddf44 	.word	0xf85ddf44
 8006e54:	3e54ae0b 	.word	0x3e54ae0b
 8006e58:	55555555 	.word	0x55555555
 8006e5c:	3fd55555 	.word	0x3fd55555
 8006e60:	652b82fe 	.word	0x652b82fe
 8006e64:	3ff71547 	.word	0x3ff71547
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	bff00000 	.word	0xbff00000
 8006e70:	3ff00000 	.word	0x3ff00000
 8006e74:	3fd00000 	.word	0x3fd00000
 8006e78:	3fe00000 	.word	0x3fe00000
 8006e7c:	408fffff 	.word	0x408fffff
 8006e80:	4bd5      	ldr	r3, [pc, #852]	; (80071d8 <__ieee754_pow+0x758>)
 8006e82:	402b      	ands	r3, r5
 8006e84:	2200      	movs	r2, #0
 8006e86:	b92b      	cbnz	r3, 8006e94 <__ieee754_pow+0x414>
 8006e88:	4bd4      	ldr	r3, [pc, #848]	; (80071dc <__ieee754_pow+0x75c>)
 8006e8a:	f7f9 fb61 	bl	8000550 <__aeabi_dmul>
 8006e8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006e92:	460c      	mov	r4, r1
 8006e94:	1523      	asrs	r3, r4, #20
 8006e96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e9a:	4413      	add	r3, r2
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	4bd0      	ldr	r3, [pc, #832]	; (80071e0 <__ieee754_pow+0x760>)
 8006ea0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006ea4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006ea8:	429c      	cmp	r4, r3
 8006eaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006eae:	dd08      	ble.n	8006ec2 <__ieee754_pow+0x442>
 8006eb0:	4bcc      	ldr	r3, [pc, #816]	; (80071e4 <__ieee754_pow+0x764>)
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	f340 8162 	ble.w	800717c <__ieee754_pow+0x6fc>
 8006eb8:	9b05      	ldr	r3, [sp, #20]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	9305      	str	r3, [sp, #20]
 8006ebe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006ec2:	2400      	movs	r4, #0
 8006ec4:	00e3      	lsls	r3, r4, #3
 8006ec6:	9307      	str	r3, [sp, #28]
 8006ec8:	4bc7      	ldr	r3, [pc, #796]	; (80071e8 <__ieee754_pow+0x768>)
 8006eca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ece:	ed93 7b00 	vldr	d7, [r3]
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	ec53 2b17 	vmov	r2, r3, d7
 8006ed8:	eeb0 9a47 	vmov.f32	s18, s14
 8006edc:	eef0 9a67 	vmov.f32	s19, s15
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	f7f9 f97d 	bl	80001e0 <__aeabi_dsub>
 8006ee6:	4652      	mov	r2, sl
 8006ee8:	4606      	mov	r6, r0
 8006eea:	460f      	mov	r7, r1
 8006eec:	462b      	mov	r3, r5
 8006eee:	ec51 0b19 	vmov	r0, r1, d9
 8006ef2:	f7f9 f977 	bl	80001e4 <__adddf3>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	2000      	movs	r0, #0
 8006efc:	49bb      	ldr	r1, [pc, #748]	; (80071ec <__ieee754_pow+0x76c>)
 8006efe:	f7f9 fc51 	bl	80007a4 <__aeabi_ddiv>
 8006f02:	ec41 0b1a 	vmov	d10, r0, r1
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	4639      	mov	r1, r7
 8006f0e:	f7f9 fb1f 	bl	8000550 <__aeabi_dmul>
 8006f12:	2300      	movs	r3, #0
 8006f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f18:	9302      	str	r3, [sp, #8]
 8006f1a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f1e:	46ab      	mov	fp, r5
 8006f20:	106d      	asrs	r5, r5, #1
 8006f22:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006f26:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006f2a:	ec41 0b18 	vmov	d8, r0, r1
 8006f2e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006f32:	2200      	movs	r2, #0
 8006f34:	4640      	mov	r0, r8
 8006f36:	4649      	mov	r1, r9
 8006f38:	4614      	mov	r4, r2
 8006f3a:	461d      	mov	r5, r3
 8006f3c:	f7f9 fb08 	bl	8000550 <__aeabi_dmul>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4630      	mov	r0, r6
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 f94a 	bl	80001e0 <__aeabi_dsub>
 8006f4c:	ec53 2b19 	vmov	r2, r3, d9
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 f942 	bl	80001e0 <__aeabi_dsub>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4650      	mov	r0, sl
 8006f62:	4659      	mov	r1, fp
 8006f64:	f7f9 f93c 	bl	80001e0 <__aeabi_dsub>
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	f7f9 faf0 	bl	8000550 <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4630      	mov	r0, r6
 8006f76:	4639      	mov	r1, r7
 8006f78:	f7f9 f932 	bl	80001e0 <__aeabi_dsub>
 8006f7c:	ec53 2b1a 	vmov	r2, r3, d10
 8006f80:	f7f9 fae6 	bl	8000550 <__aeabi_dmul>
 8006f84:	ec53 2b18 	vmov	r2, r3, d8
 8006f88:	ec41 0b19 	vmov	d9, r0, r1
 8006f8c:	ec51 0b18 	vmov	r0, r1, d8
 8006f90:	f7f9 fade 	bl	8000550 <__aeabi_dmul>
 8006f94:	a37c      	add	r3, pc, #496	; (adr r3, 8007188 <__ieee754_pow+0x708>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	f7f9 fad7 	bl	8000550 <__aeabi_dmul>
 8006fa2:	a37b      	add	r3, pc, #492	; (adr r3, 8007190 <__ieee754_pow+0x710>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f91c 	bl	80001e4 <__adddf3>
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f7f9 face 	bl	8000550 <__aeabi_dmul>
 8006fb4:	a378      	add	r3, pc, #480	; (adr r3, 8007198 <__ieee754_pow+0x718>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f913 	bl	80001e4 <__adddf3>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f7f9 fac5 	bl	8000550 <__aeabi_dmul>
 8006fc6:	a376      	add	r3, pc, #472	; (adr r3, 80071a0 <__ieee754_pow+0x720>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f7f9 f90a 	bl	80001e4 <__adddf3>
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	462b      	mov	r3, r5
 8006fd4:	f7f9 fabc 	bl	8000550 <__aeabi_dmul>
 8006fd8:	a373      	add	r3, pc, #460	; (adr r3, 80071a8 <__ieee754_pow+0x728>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f7f9 f901 	bl	80001e4 <__adddf3>
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	f7f9 fab3 	bl	8000550 <__aeabi_dmul>
 8006fea:	a371      	add	r3, pc, #452	; (adr r3, 80071b0 <__ieee754_pow+0x730>)
 8006fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff0:	f7f9 f8f8 	bl	80001e4 <__adddf3>
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	f7f9 faa6 	bl	8000550 <__aeabi_dmul>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	f7f9 faa0 	bl	8000550 <__aeabi_dmul>
 8007010:	4642      	mov	r2, r8
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	464b      	mov	r3, r9
 8007018:	ec51 0b18 	vmov	r0, r1, d8
 800701c:	f7f9 f8e2 	bl	80001e4 <__adddf3>
 8007020:	ec53 2b19 	vmov	r2, r3, d9
 8007024:	f7f9 fa94 	bl	8000550 <__aeabi_dmul>
 8007028:	4622      	mov	r2, r4
 800702a:	462b      	mov	r3, r5
 800702c:	f7f9 f8da 	bl	80001e4 <__adddf3>
 8007030:	4642      	mov	r2, r8
 8007032:	4682      	mov	sl, r0
 8007034:	468b      	mov	fp, r1
 8007036:	464b      	mov	r3, r9
 8007038:	4640      	mov	r0, r8
 800703a:	4649      	mov	r1, r9
 800703c:	f7f9 fa88 	bl	8000550 <__aeabi_dmul>
 8007040:	4b6b      	ldr	r3, [pc, #428]	; (80071f0 <__ieee754_pow+0x770>)
 8007042:	2200      	movs	r2, #0
 8007044:	4606      	mov	r6, r0
 8007046:	460f      	mov	r7, r1
 8007048:	f7f9 f8cc 	bl	80001e4 <__adddf3>
 800704c:	4652      	mov	r2, sl
 800704e:	465b      	mov	r3, fp
 8007050:	f7f9 f8c8 	bl	80001e4 <__adddf3>
 8007054:	2000      	movs	r0, #0
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4640      	mov	r0, r8
 8007060:	4649      	mov	r1, r9
 8007062:	f7f9 fa75 	bl	8000550 <__aeabi_dmul>
 8007066:	4b62      	ldr	r3, [pc, #392]	; (80071f0 <__ieee754_pow+0x770>)
 8007068:	4680      	mov	r8, r0
 800706a:	4689      	mov	r9, r1
 800706c:	2200      	movs	r2, #0
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 f8b5 	bl	80001e0 <__aeabi_dsub>
 8007076:	4632      	mov	r2, r6
 8007078:	463b      	mov	r3, r7
 800707a:	f7f9 f8b1 	bl	80001e0 <__aeabi_dsub>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4650      	mov	r0, sl
 8007084:	4659      	mov	r1, fp
 8007086:	f7f9 f8ab 	bl	80001e0 <__aeabi_dsub>
 800708a:	ec53 2b18 	vmov	r2, r3, d8
 800708e:	f7f9 fa5f 	bl	8000550 <__aeabi_dmul>
 8007092:	4622      	mov	r2, r4
 8007094:	4606      	mov	r6, r0
 8007096:	460f      	mov	r7, r1
 8007098:	462b      	mov	r3, r5
 800709a:	ec51 0b19 	vmov	r0, r1, d9
 800709e:	f7f9 fa57 	bl	8000550 <__aeabi_dmul>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 f89b 	bl	80001e4 <__adddf3>
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4640      	mov	r0, r8
 80070b8:	4649      	mov	r1, r9
 80070ba:	f7f9 f893 	bl	80001e4 <__adddf3>
 80070be:	a33e      	add	r3, pc, #248	; (adr r3, 80071b8 <__ieee754_pow+0x738>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	2000      	movs	r0, #0
 80070c6:	4604      	mov	r4, r0
 80070c8:	460d      	mov	r5, r1
 80070ca:	f7f9 fa41 	bl	8000550 <__aeabi_dmul>
 80070ce:	4642      	mov	r2, r8
 80070d0:	ec41 0b18 	vmov	d8, r0, r1
 80070d4:	464b      	mov	r3, r9
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 f881 	bl	80001e0 <__aeabi_dsub>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4630      	mov	r0, r6
 80070e4:	4639      	mov	r1, r7
 80070e6:	f7f9 f87b 	bl	80001e0 <__aeabi_dsub>
 80070ea:	a335      	add	r3, pc, #212	; (adr r3, 80071c0 <__ieee754_pow+0x740>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 fa2e 	bl	8000550 <__aeabi_dmul>
 80070f4:	a334      	add	r3, pc, #208	; (adr r3, 80071c8 <__ieee754_pow+0x748>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	4606      	mov	r6, r0
 80070fc:	460f      	mov	r7, r1
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	f7f9 fa25 	bl	8000550 <__aeabi_dmul>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 f869 	bl	80001e4 <__adddf3>
 8007112:	9a07      	ldr	r2, [sp, #28]
 8007114:	4b37      	ldr	r3, [pc, #220]	; (80071f4 <__ieee754_pow+0x774>)
 8007116:	4413      	add	r3, r2
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 f862 	bl	80001e4 <__adddf3>
 8007120:	4682      	mov	sl, r0
 8007122:	9805      	ldr	r0, [sp, #20]
 8007124:	468b      	mov	fp, r1
 8007126:	f7f9 f9a9 	bl	800047c <__aeabi_i2d>
 800712a:	9a07      	ldr	r2, [sp, #28]
 800712c:	4b32      	ldr	r3, [pc, #200]	; (80071f8 <__ieee754_pow+0x778>)
 800712e:	4413      	add	r3, r2
 8007130:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	4652      	mov	r2, sl
 800713a:	465b      	mov	r3, fp
 800713c:	ec51 0b18 	vmov	r0, r1, d8
 8007140:	f7f9 f850 	bl	80001e4 <__adddf3>
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	f7f9 f84c 	bl	80001e4 <__adddf3>
 800714c:	4632      	mov	r2, r6
 800714e:	463b      	mov	r3, r7
 8007150:	f7f9 f848 	bl	80001e4 <__adddf3>
 8007154:	2000      	movs	r0, #0
 8007156:	4632      	mov	r2, r6
 8007158:	463b      	mov	r3, r7
 800715a:	4604      	mov	r4, r0
 800715c:	460d      	mov	r5, r1
 800715e:	f7f9 f83f 	bl	80001e0 <__aeabi_dsub>
 8007162:	4642      	mov	r2, r8
 8007164:	464b      	mov	r3, r9
 8007166:	f7f9 f83b 	bl	80001e0 <__aeabi_dsub>
 800716a:	ec53 2b18 	vmov	r2, r3, d8
 800716e:	f7f9 f837 	bl	80001e0 <__aeabi_dsub>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	4650      	mov	r0, sl
 8007178:	4659      	mov	r1, fp
 800717a:	e610      	b.n	8006d9e <__ieee754_pow+0x31e>
 800717c:	2401      	movs	r4, #1
 800717e:	e6a1      	b.n	8006ec4 <__ieee754_pow+0x444>
 8007180:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80071d0 <__ieee754_pow+0x750>
 8007184:	e617      	b.n	8006db6 <__ieee754_pow+0x336>
 8007186:	bf00      	nop
 8007188:	4a454eef 	.word	0x4a454eef
 800718c:	3fca7e28 	.word	0x3fca7e28
 8007190:	93c9db65 	.word	0x93c9db65
 8007194:	3fcd864a 	.word	0x3fcd864a
 8007198:	a91d4101 	.word	0xa91d4101
 800719c:	3fd17460 	.word	0x3fd17460
 80071a0:	518f264d 	.word	0x518f264d
 80071a4:	3fd55555 	.word	0x3fd55555
 80071a8:	db6fabff 	.word	0xdb6fabff
 80071ac:	3fdb6db6 	.word	0x3fdb6db6
 80071b0:	33333303 	.word	0x33333303
 80071b4:	3fe33333 	.word	0x3fe33333
 80071b8:	e0000000 	.word	0xe0000000
 80071bc:	3feec709 	.word	0x3feec709
 80071c0:	dc3a03fd 	.word	0xdc3a03fd
 80071c4:	3feec709 	.word	0x3feec709
 80071c8:	145b01f5 	.word	0x145b01f5
 80071cc:	be3e2fe0 	.word	0xbe3e2fe0
 80071d0:	00000000 	.word	0x00000000
 80071d4:	3ff00000 	.word	0x3ff00000
 80071d8:	7ff00000 	.word	0x7ff00000
 80071dc:	43400000 	.word	0x43400000
 80071e0:	0003988e 	.word	0x0003988e
 80071e4:	000bb679 	.word	0x000bb679
 80071e8:	08007830 	.word	0x08007830
 80071ec:	3ff00000 	.word	0x3ff00000
 80071f0:	40080000 	.word	0x40080000
 80071f4:	08007850 	.word	0x08007850
 80071f8:	08007840 	.word	0x08007840
 80071fc:	a3b3      	add	r3, pc, #716	; (adr r3, 80074cc <__ieee754_pow+0xa4c>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	4640      	mov	r0, r8
 8007204:	4649      	mov	r1, r9
 8007206:	f7f8 ffed 	bl	80001e4 <__adddf3>
 800720a:	4622      	mov	r2, r4
 800720c:	ec41 0b1a 	vmov	d10, r0, r1
 8007210:	462b      	mov	r3, r5
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	f7f8 ffe3 	bl	80001e0 <__aeabi_dsub>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	ec51 0b1a 	vmov	r0, r1, d10
 8007222:	f7f9 fc25 	bl	8000a70 <__aeabi_dcmpgt>
 8007226:	2800      	cmp	r0, #0
 8007228:	f47f ae04 	bne.w	8006e34 <__ieee754_pow+0x3b4>
 800722c:	4aa2      	ldr	r2, [pc, #648]	; (80074b8 <__ieee754_pow+0xa38>)
 800722e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007232:	4293      	cmp	r3, r2
 8007234:	f340 8107 	ble.w	8007446 <__ieee754_pow+0x9c6>
 8007238:	151b      	asrs	r3, r3, #20
 800723a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800723e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007242:	fa4a fa03 	asr.w	sl, sl, r3
 8007246:	44da      	add	sl, fp
 8007248:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800724c:	489b      	ldr	r0, [pc, #620]	; (80074bc <__ieee754_pow+0xa3c>)
 800724e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007252:	4108      	asrs	r0, r1
 8007254:	ea00 030a 	and.w	r3, r0, sl
 8007258:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800725c:	f1c1 0114 	rsb	r1, r1, #20
 8007260:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007264:	fa4a fa01 	asr.w	sl, sl, r1
 8007268:	f1bb 0f00 	cmp.w	fp, #0
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	4620      	mov	r0, r4
 8007272:	4629      	mov	r1, r5
 8007274:	bfb8      	it	lt
 8007276:	f1ca 0a00 	rsblt	sl, sl, #0
 800727a:	f7f8 ffb1 	bl	80001e0 <__aeabi_dsub>
 800727e:	ec41 0b19 	vmov	d9, r0, r1
 8007282:	4642      	mov	r2, r8
 8007284:	464b      	mov	r3, r9
 8007286:	ec51 0b19 	vmov	r0, r1, d9
 800728a:	f7f8 ffab 	bl	80001e4 <__adddf3>
 800728e:	a37a      	add	r3, pc, #488	; (adr r3, 8007478 <__ieee754_pow+0x9f8>)
 8007290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007294:	2000      	movs	r0, #0
 8007296:	4604      	mov	r4, r0
 8007298:	460d      	mov	r5, r1
 800729a:	f7f9 f959 	bl	8000550 <__aeabi_dmul>
 800729e:	ec53 2b19 	vmov	r2, r3, d9
 80072a2:	4606      	mov	r6, r0
 80072a4:	460f      	mov	r7, r1
 80072a6:	4620      	mov	r0, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	f7f8 ff99 	bl	80001e0 <__aeabi_dsub>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4640      	mov	r0, r8
 80072b4:	4649      	mov	r1, r9
 80072b6:	f7f8 ff93 	bl	80001e0 <__aeabi_dsub>
 80072ba:	a371      	add	r3, pc, #452	; (adr r3, 8007480 <__ieee754_pow+0xa00>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f9 f946 	bl	8000550 <__aeabi_dmul>
 80072c4:	a370      	add	r3, pc, #448	; (adr r3, 8007488 <__ieee754_pow+0xa08>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	4680      	mov	r8, r0
 80072cc:	4689      	mov	r9, r1
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 f93d 	bl	8000550 <__aeabi_dmul>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4640      	mov	r0, r8
 80072dc:	4649      	mov	r1, r9
 80072de:	f7f8 ff81 	bl	80001e4 <__adddf3>
 80072e2:	4604      	mov	r4, r0
 80072e4:	460d      	mov	r5, r1
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4630      	mov	r0, r6
 80072ec:	4639      	mov	r1, r7
 80072ee:	f7f8 ff79 	bl	80001e4 <__adddf3>
 80072f2:	4632      	mov	r2, r6
 80072f4:	463b      	mov	r3, r7
 80072f6:	4680      	mov	r8, r0
 80072f8:	4689      	mov	r9, r1
 80072fa:	f7f8 ff71 	bl	80001e0 <__aeabi_dsub>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4620      	mov	r0, r4
 8007304:	4629      	mov	r1, r5
 8007306:	f7f8 ff6b 	bl	80001e0 <__aeabi_dsub>
 800730a:	4642      	mov	r2, r8
 800730c:	4606      	mov	r6, r0
 800730e:	460f      	mov	r7, r1
 8007310:	464b      	mov	r3, r9
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f7f9 f91b 	bl	8000550 <__aeabi_dmul>
 800731a:	a35d      	add	r3, pc, #372	; (adr r3, 8007490 <__ieee754_pow+0xa10>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4604      	mov	r4, r0
 8007322:	460d      	mov	r5, r1
 8007324:	f7f9 f914 	bl	8000550 <__aeabi_dmul>
 8007328:	a35b      	add	r3, pc, #364	; (adr r3, 8007498 <__ieee754_pow+0xa18>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f8 ff57 	bl	80001e0 <__aeabi_dsub>
 8007332:	4622      	mov	r2, r4
 8007334:	462b      	mov	r3, r5
 8007336:	f7f9 f90b 	bl	8000550 <__aeabi_dmul>
 800733a:	a359      	add	r3, pc, #356	; (adr r3, 80074a0 <__ieee754_pow+0xa20>)
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f7f8 ff50 	bl	80001e4 <__adddf3>
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	f7f9 f902 	bl	8000550 <__aeabi_dmul>
 800734c:	a356      	add	r3, pc, #344	; (adr r3, 80074a8 <__ieee754_pow+0xa28>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f8 ff45 	bl	80001e0 <__aeabi_dsub>
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	f7f9 f8f9 	bl	8000550 <__aeabi_dmul>
 800735e:	a354      	add	r3, pc, #336	; (adr r3, 80074b0 <__ieee754_pow+0xa30>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f7f8 ff3e 	bl	80001e4 <__adddf3>
 8007368:	4622      	mov	r2, r4
 800736a:	462b      	mov	r3, r5
 800736c:	f7f9 f8f0 	bl	8000550 <__aeabi_dmul>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f8 ff32 	bl	80001e0 <__aeabi_dsub>
 800737c:	4604      	mov	r4, r0
 800737e:	460d      	mov	r5, r1
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	4640      	mov	r0, r8
 8007386:	4649      	mov	r1, r9
 8007388:	f7f9 f8e2 	bl	8000550 <__aeabi_dmul>
 800738c:	2200      	movs	r2, #0
 800738e:	ec41 0b19 	vmov	d9, r0, r1
 8007392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f8 ff21 	bl	80001e0 <__aeabi_dsub>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	ec51 0b19 	vmov	r0, r1, d9
 80073a6:	f7f9 f9fd 	bl	80007a4 <__aeabi_ddiv>
 80073aa:	4632      	mov	r2, r6
 80073ac:	4604      	mov	r4, r0
 80073ae:	460d      	mov	r5, r1
 80073b0:	463b      	mov	r3, r7
 80073b2:	4640      	mov	r0, r8
 80073b4:	4649      	mov	r1, r9
 80073b6:	f7f9 f8cb 	bl	8000550 <__aeabi_dmul>
 80073ba:	4632      	mov	r2, r6
 80073bc:	463b      	mov	r3, r7
 80073be:	f7f8 ff11 	bl	80001e4 <__adddf3>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4620      	mov	r0, r4
 80073c8:	4629      	mov	r1, r5
 80073ca:	f7f8 ff09 	bl	80001e0 <__aeabi_dsub>
 80073ce:	4642      	mov	r2, r8
 80073d0:	464b      	mov	r3, r9
 80073d2:	f7f8 ff05 	bl	80001e0 <__aeabi_dsub>
 80073d6:	460b      	mov	r3, r1
 80073d8:	4602      	mov	r2, r0
 80073da:	4939      	ldr	r1, [pc, #228]	; (80074c0 <__ieee754_pow+0xa40>)
 80073dc:	2000      	movs	r0, #0
 80073de:	f7f8 feff 	bl	80001e0 <__aeabi_dsub>
 80073e2:	ec41 0b10 	vmov	d0, r0, r1
 80073e6:	ee10 3a90 	vmov	r3, s1
 80073ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80073ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073f2:	da2b      	bge.n	800744c <__ieee754_pow+0x9cc>
 80073f4:	4650      	mov	r0, sl
 80073f6:	f000 f877 	bl	80074e8 <scalbn>
 80073fa:	ec51 0b10 	vmov	r0, r1, d0
 80073fe:	ec53 2b18 	vmov	r2, r3, d8
 8007402:	f7ff bbee 	b.w	8006be2 <__ieee754_pow+0x162>
 8007406:	4b2f      	ldr	r3, [pc, #188]	; (80074c4 <__ieee754_pow+0xa44>)
 8007408:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800740c:	429e      	cmp	r6, r3
 800740e:	f77f af0d 	ble.w	800722c <__ieee754_pow+0x7ac>
 8007412:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <__ieee754_pow+0xa48>)
 8007414:	440b      	add	r3, r1
 8007416:	4303      	orrs	r3, r0
 8007418:	d009      	beq.n	800742e <__ieee754_pow+0x9ae>
 800741a:	ec51 0b18 	vmov	r0, r1, d8
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	f7f9 fb07 	bl	8000a34 <__aeabi_dcmplt>
 8007426:	3800      	subs	r0, #0
 8007428:	bf18      	it	ne
 800742a:	2001      	movne	r0, #1
 800742c:	e448      	b.n	8006cc0 <__ieee754_pow+0x240>
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	f7f8 fed5 	bl	80001e0 <__aeabi_dsub>
 8007436:	4642      	mov	r2, r8
 8007438:	464b      	mov	r3, r9
 800743a:	f7f9 fb0f 	bl	8000a5c <__aeabi_dcmpge>
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f aef4 	beq.w	800722c <__ieee754_pow+0x7ac>
 8007444:	e7e9      	b.n	800741a <__ieee754_pow+0x99a>
 8007446:	f04f 0a00 	mov.w	sl, #0
 800744a:	e71a      	b.n	8007282 <__ieee754_pow+0x802>
 800744c:	ec51 0b10 	vmov	r0, r1, d0
 8007450:	4619      	mov	r1, r3
 8007452:	e7d4      	b.n	80073fe <__ieee754_pow+0x97e>
 8007454:	491a      	ldr	r1, [pc, #104]	; (80074c0 <__ieee754_pow+0xa40>)
 8007456:	2000      	movs	r0, #0
 8007458:	f7ff bb31 	b.w	8006abe <__ieee754_pow+0x3e>
 800745c:	2000      	movs	r0, #0
 800745e:	2100      	movs	r1, #0
 8007460:	f7ff bb2d 	b.w	8006abe <__ieee754_pow+0x3e>
 8007464:	4630      	mov	r0, r6
 8007466:	4639      	mov	r1, r7
 8007468:	f7ff bb29 	b.w	8006abe <__ieee754_pow+0x3e>
 800746c:	9204      	str	r2, [sp, #16]
 800746e:	f7ff bb7b 	b.w	8006b68 <__ieee754_pow+0xe8>
 8007472:	2300      	movs	r3, #0
 8007474:	f7ff bb65 	b.w	8006b42 <__ieee754_pow+0xc2>
 8007478:	00000000 	.word	0x00000000
 800747c:	3fe62e43 	.word	0x3fe62e43
 8007480:	fefa39ef 	.word	0xfefa39ef
 8007484:	3fe62e42 	.word	0x3fe62e42
 8007488:	0ca86c39 	.word	0x0ca86c39
 800748c:	be205c61 	.word	0xbe205c61
 8007490:	72bea4d0 	.word	0x72bea4d0
 8007494:	3e663769 	.word	0x3e663769
 8007498:	c5d26bf1 	.word	0xc5d26bf1
 800749c:	3ebbbd41 	.word	0x3ebbbd41
 80074a0:	af25de2c 	.word	0xaf25de2c
 80074a4:	3f11566a 	.word	0x3f11566a
 80074a8:	16bebd93 	.word	0x16bebd93
 80074ac:	3f66c16c 	.word	0x3f66c16c
 80074b0:	5555553e 	.word	0x5555553e
 80074b4:	3fc55555 	.word	0x3fc55555
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	fff00000 	.word	0xfff00000
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	4090cbff 	.word	0x4090cbff
 80074c8:	3f6f3400 	.word	0x3f6f3400
 80074cc:	652b82fe 	.word	0x652b82fe
 80074d0:	3c971547 	.word	0x3c971547

080074d4 <fabs>:
 80074d4:	ec51 0b10 	vmov	r0, r1, d0
 80074d8:	ee10 2a10 	vmov	r2, s0
 80074dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074e0:	ec43 2b10 	vmov	d0, r2, r3
 80074e4:	4770      	bx	lr
	...

080074e8 <scalbn>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	ec55 4b10 	vmov	r4, r5, d0
 80074ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80074f2:	4606      	mov	r6, r0
 80074f4:	462b      	mov	r3, r5
 80074f6:	b999      	cbnz	r1, 8007520 <scalbn+0x38>
 80074f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80074fc:	4323      	orrs	r3, r4
 80074fe:	d03f      	beq.n	8007580 <scalbn+0x98>
 8007500:	4b35      	ldr	r3, [pc, #212]	; (80075d8 <scalbn+0xf0>)
 8007502:	4629      	mov	r1, r5
 8007504:	ee10 0a10 	vmov	r0, s0
 8007508:	2200      	movs	r2, #0
 800750a:	f7f9 f821 	bl	8000550 <__aeabi_dmul>
 800750e:	4b33      	ldr	r3, [pc, #204]	; (80075dc <scalbn+0xf4>)
 8007510:	429e      	cmp	r6, r3
 8007512:	4604      	mov	r4, r0
 8007514:	460d      	mov	r5, r1
 8007516:	da10      	bge.n	800753a <scalbn+0x52>
 8007518:	a327      	add	r3, pc, #156	; (adr r3, 80075b8 <scalbn+0xd0>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	e01f      	b.n	8007560 <scalbn+0x78>
 8007520:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007524:	4291      	cmp	r1, r2
 8007526:	d10c      	bne.n	8007542 <scalbn+0x5a>
 8007528:	ee10 2a10 	vmov	r2, s0
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f7f8 fe58 	bl	80001e4 <__adddf3>
 8007534:	4604      	mov	r4, r0
 8007536:	460d      	mov	r5, r1
 8007538:	e022      	b.n	8007580 <scalbn+0x98>
 800753a:	460b      	mov	r3, r1
 800753c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007540:	3936      	subs	r1, #54	; 0x36
 8007542:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007546:	4296      	cmp	r6, r2
 8007548:	dd0d      	ble.n	8007566 <scalbn+0x7e>
 800754a:	2d00      	cmp	r5, #0
 800754c:	a11c      	add	r1, pc, #112	; (adr r1, 80075c0 <scalbn+0xd8>)
 800754e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007552:	da02      	bge.n	800755a <scalbn+0x72>
 8007554:	a11c      	add	r1, pc, #112	; (adr r1, 80075c8 <scalbn+0xe0>)
 8007556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755a:	a319      	add	r3, pc, #100	; (adr r3, 80075c0 <scalbn+0xd8>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fff6 	bl	8000550 <__aeabi_dmul>
 8007564:	e7e6      	b.n	8007534 <scalbn+0x4c>
 8007566:	1872      	adds	r2, r6, r1
 8007568:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800756c:	428a      	cmp	r2, r1
 800756e:	dcec      	bgt.n	800754a <scalbn+0x62>
 8007570:	2a00      	cmp	r2, #0
 8007572:	dd08      	ble.n	8007586 <scalbn+0x9e>
 8007574:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800757c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007580:	ec45 4b10 	vmov	d0, r4, r5
 8007584:	bd70      	pop	{r4, r5, r6, pc}
 8007586:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800758a:	da08      	bge.n	800759e <scalbn+0xb6>
 800758c:	2d00      	cmp	r5, #0
 800758e:	a10a      	add	r1, pc, #40	; (adr r1, 80075b8 <scalbn+0xd0>)
 8007590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007594:	dac0      	bge.n	8007518 <scalbn+0x30>
 8007596:	a10e      	add	r1, pc, #56	; (adr r1, 80075d0 <scalbn+0xe8>)
 8007598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800759c:	e7bc      	b.n	8007518 <scalbn+0x30>
 800759e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075a2:	3236      	adds	r2, #54	; 0x36
 80075a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80075ac:	4620      	mov	r0, r4
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <scalbn+0xf8>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	e7d5      	b.n	8007560 <scalbn+0x78>
 80075b4:	f3af 8000 	nop.w
 80075b8:	c2f8f359 	.word	0xc2f8f359
 80075bc:	01a56e1f 	.word	0x01a56e1f
 80075c0:	8800759c 	.word	0x8800759c
 80075c4:	7e37e43c 	.word	0x7e37e43c
 80075c8:	8800759c 	.word	0x8800759c
 80075cc:	fe37e43c 	.word	0xfe37e43c
 80075d0:	c2f8f359 	.word	0xc2f8f359
 80075d4:	81a56e1f 	.word	0x81a56e1f
 80075d8:	43500000 	.word	0x43500000
 80075dc:	ffff3cb0 	.word	0xffff3cb0
 80075e0:	3c900000 	.word	0x3c900000

080075e4 <with_errno>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
 80075ea:	4616      	mov	r6, r2
 80075ec:	f7ff f992 	bl	8006914 <__errno>
 80075f0:	4629      	mov	r1, r5
 80075f2:	6006      	str	r6, [r0, #0]
 80075f4:	4620      	mov	r0, r4
 80075f6:	bd70      	pop	{r4, r5, r6, pc}

080075f8 <xflow>:
 80075f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fa:	4614      	mov	r4, r2
 80075fc:	461d      	mov	r5, r3
 80075fe:	b108      	cbz	r0, 8007604 <xflow+0xc>
 8007600:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007604:	e9cd 2300 	strd	r2, r3, [sp]
 8007608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800760c:	4620      	mov	r0, r4
 800760e:	4629      	mov	r1, r5
 8007610:	f7f8 ff9e 	bl	8000550 <__aeabi_dmul>
 8007614:	2222      	movs	r2, #34	; 0x22
 8007616:	b003      	add	sp, #12
 8007618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800761c:	f7ff bfe2 	b.w	80075e4 <with_errno>

08007620 <__math_uflow>:
 8007620:	b508      	push	{r3, lr}
 8007622:	2200      	movs	r2, #0
 8007624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007628:	f7ff ffe6 	bl	80075f8 <xflow>
 800762c:	ec41 0b10 	vmov	d0, r0, r1
 8007630:	bd08      	pop	{r3, pc}

08007632 <__math_oflow>:
 8007632:	b508      	push	{r3, lr}
 8007634:	2200      	movs	r2, #0
 8007636:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800763a:	f7ff ffdd 	bl	80075f8 <xflow>
 800763e:	ec41 0b10 	vmov	d0, r0, r1
 8007642:	bd08      	pop	{r3, pc}

08007644 <__ieee754_sqrt>:
 8007644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	ec55 4b10 	vmov	r4, r5, d0
 800764c:	4e67      	ldr	r6, [pc, #412]	; (80077ec <__ieee754_sqrt+0x1a8>)
 800764e:	43ae      	bics	r6, r5
 8007650:	ee10 0a10 	vmov	r0, s0
 8007654:	ee10 2a10 	vmov	r2, s0
 8007658:	4629      	mov	r1, r5
 800765a:	462b      	mov	r3, r5
 800765c:	d10d      	bne.n	800767a <__ieee754_sqrt+0x36>
 800765e:	f7f8 ff77 	bl	8000550 <__aeabi_dmul>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4620      	mov	r0, r4
 8007668:	4629      	mov	r1, r5
 800766a:	f7f8 fdbb 	bl	80001e4 <__adddf3>
 800766e:	4604      	mov	r4, r0
 8007670:	460d      	mov	r5, r1
 8007672:	ec45 4b10 	vmov	d0, r4, r5
 8007676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	2d00      	cmp	r5, #0
 800767c:	dc0b      	bgt.n	8007696 <__ieee754_sqrt+0x52>
 800767e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007682:	4326      	orrs	r6, r4
 8007684:	d0f5      	beq.n	8007672 <__ieee754_sqrt+0x2e>
 8007686:	b135      	cbz	r5, 8007696 <__ieee754_sqrt+0x52>
 8007688:	f7f8 fdaa 	bl	80001e0 <__aeabi_dsub>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	f7f9 f888 	bl	80007a4 <__aeabi_ddiv>
 8007694:	e7eb      	b.n	800766e <__ieee754_sqrt+0x2a>
 8007696:	1509      	asrs	r1, r1, #20
 8007698:	f000 808d 	beq.w	80077b6 <__ieee754_sqrt+0x172>
 800769c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076a0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80076a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a8:	07c9      	lsls	r1, r1, #31
 80076aa:	bf5c      	itt	pl
 80076ac:	005b      	lslpl	r3, r3, #1
 80076ae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80076b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076b6:	bf58      	it	pl
 80076b8:	0052      	lslpl	r2, r2, #1
 80076ba:	2500      	movs	r5, #0
 80076bc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80076c0:	1076      	asrs	r6, r6, #1
 80076c2:	0052      	lsls	r2, r2, #1
 80076c4:	f04f 0e16 	mov.w	lr, #22
 80076c8:	46ac      	mov	ip, r5
 80076ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076ce:	eb0c 0001 	add.w	r0, ip, r1
 80076d2:	4298      	cmp	r0, r3
 80076d4:	bfde      	ittt	le
 80076d6:	1a1b      	suble	r3, r3, r0
 80076d8:	eb00 0c01 	addle.w	ip, r0, r1
 80076dc:	186d      	addle	r5, r5, r1
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	f1be 0e01 	subs.w	lr, lr, #1
 80076e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80076e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80076ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80076f0:	d1ed      	bne.n	80076ce <__ieee754_sqrt+0x8a>
 80076f2:	4674      	mov	r4, lr
 80076f4:	2720      	movs	r7, #32
 80076f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80076fa:	4563      	cmp	r3, ip
 80076fc:	eb01 000e 	add.w	r0, r1, lr
 8007700:	dc02      	bgt.n	8007708 <__ieee754_sqrt+0xc4>
 8007702:	d113      	bne.n	800772c <__ieee754_sqrt+0xe8>
 8007704:	4290      	cmp	r0, r2
 8007706:	d811      	bhi.n	800772c <__ieee754_sqrt+0xe8>
 8007708:	2800      	cmp	r0, #0
 800770a:	eb00 0e01 	add.w	lr, r0, r1
 800770e:	da57      	bge.n	80077c0 <__ieee754_sqrt+0x17c>
 8007710:	f1be 0f00 	cmp.w	lr, #0
 8007714:	db54      	blt.n	80077c0 <__ieee754_sqrt+0x17c>
 8007716:	f10c 0801 	add.w	r8, ip, #1
 800771a:	eba3 030c 	sub.w	r3, r3, ip
 800771e:	4290      	cmp	r0, r2
 8007720:	bf88      	it	hi
 8007722:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007726:	1a12      	subs	r2, r2, r0
 8007728:	440c      	add	r4, r1
 800772a:	46c4      	mov	ip, r8
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	3f01      	subs	r7, #1
 8007730:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007734:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007738:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800773c:	d1dd      	bne.n	80076fa <__ieee754_sqrt+0xb6>
 800773e:	4313      	orrs	r3, r2
 8007740:	d01b      	beq.n	800777a <__ieee754_sqrt+0x136>
 8007742:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80077f0 <__ieee754_sqrt+0x1ac>
 8007746:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80077f4 <__ieee754_sqrt+0x1b0>
 800774a:	e9da 0100 	ldrd	r0, r1, [sl]
 800774e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007752:	f7f8 fd45 	bl	80001e0 <__aeabi_dsub>
 8007756:	e9da 8900 	ldrd	r8, r9, [sl]
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4640      	mov	r0, r8
 8007760:	4649      	mov	r1, r9
 8007762:	f7f9 f971 	bl	8000a48 <__aeabi_dcmple>
 8007766:	b140      	cbz	r0, 800777a <__ieee754_sqrt+0x136>
 8007768:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800776c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007770:	e9db 2300 	ldrd	r2, r3, [fp]
 8007774:	d126      	bne.n	80077c4 <__ieee754_sqrt+0x180>
 8007776:	3501      	adds	r5, #1
 8007778:	463c      	mov	r4, r7
 800777a:	106a      	asrs	r2, r5, #1
 800777c:	0863      	lsrs	r3, r4, #1
 800777e:	07e9      	lsls	r1, r5, #31
 8007780:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007784:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007788:	bf48      	it	mi
 800778a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800778e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007792:	461c      	mov	r4, r3
 8007794:	e76d      	b.n	8007672 <__ieee754_sqrt+0x2e>
 8007796:	0ad3      	lsrs	r3, r2, #11
 8007798:	3815      	subs	r0, #21
 800779a:	0552      	lsls	r2, r2, #21
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0fa      	beq.n	8007796 <__ieee754_sqrt+0x152>
 80077a0:	02dc      	lsls	r4, r3, #11
 80077a2:	d50a      	bpl.n	80077ba <__ieee754_sqrt+0x176>
 80077a4:	f1c1 0420 	rsb	r4, r1, #32
 80077a8:	fa22 f404 	lsr.w	r4, r2, r4
 80077ac:	1e4d      	subs	r5, r1, #1
 80077ae:	408a      	lsls	r2, r1
 80077b0:	4323      	orrs	r3, r4
 80077b2:	1b41      	subs	r1, r0, r5
 80077b4:	e772      	b.n	800769c <__ieee754_sqrt+0x58>
 80077b6:	4608      	mov	r0, r1
 80077b8:	e7f0      	b.n	800779c <__ieee754_sqrt+0x158>
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	3101      	adds	r1, #1
 80077be:	e7ef      	b.n	80077a0 <__ieee754_sqrt+0x15c>
 80077c0:	46e0      	mov	r8, ip
 80077c2:	e7aa      	b.n	800771a <__ieee754_sqrt+0xd6>
 80077c4:	f7f8 fd0e 	bl	80001e4 <__adddf3>
 80077c8:	e9da 8900 	ldrd	r8, r9, [sl]
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f9 f92e 	bl	8000a34 <__aeabi_dcmplt>
 80077d8:	b120      	cbz	r0, 80077e4 <__ieee754_sqrt+0x1a0>
 80077da:	1ca0      	adds	r0, r4, #2
 80077dc:	bf08      	it	eq
 80077de:	3501      	addeq	r5, #1
 80077e0:	3402      	adds	r4, #2
 80077e2:	e7ca      	b.n	800777a <__ieee754_sqrt+0x136>
 80077e4:	3401      	adds	r4, #1
 80077e6:	f024 0401 	bic.w	r4, r4, #1
 80077ea:	e7c6      	b.n	800777a <__ieee754_sqrt+0x136>
 80077ec:	7ff00000 	.word	0x7ff00000
 80077f0:	20000068 	.word	0x20000068
 80077f4:	20000070 	.word	0x20000070

080077f8 <_init>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr

08007804 <_fini>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

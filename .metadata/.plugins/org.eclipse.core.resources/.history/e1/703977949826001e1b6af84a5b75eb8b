#include "MotorControl.hpp"
#include "math.h"
#include "main.h"

Motor::Motor(TIM_HandleTypeDef *timerF, TIM_HandleTypeDef *timerB,
  unsigned int channelF, unsigned int channelB):
  timer_f(timerF), timer_b(timerB), channel_f(channelF), channel_b(channelB)
{
}

void Motor::init()
{
	 HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  //HAL_TIM_PWM_Start(timer_b, channel_b);
}

void Motor::drive(void) const
{
  TIM_HandleTypeDef *currentTimer;
  unsigned int currentChannel;

  if (speed > 0)
  {
    
    currentTimer = timer_f;
    currentChannel = channel_f;
  }
  else if (speed <= 0)
  {
    
    currentTimer = timer_b;
    currentChannel = channel_b;
  }

  unsigned int pwm_comp = fabs(speed * 100);
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);

  return;
}

void Motor::target(float speed_in)
{
  if (speed_in > 1)
    speed = 1;
  else if (speed_in < -1)
    speed = -1;
  else
    speed = speed_in;

  return;
}

Chasis::Chasis(Motor *r1, Motor *r2, Motor *l1, Motor *l2):
  right_1(r1), right_2(r2), left_1(l1), left_2(l2)
{}

Chasis::Chasis(Motor *r1, Motor *r2, Motor *l1, Motor *l2, bool omni):
  right_1(r1), right_2(r2), left_1(l1), left_2(l2), omniDrive(omni)
{}

void Chasis::steer(float angle, float speed)
{
  // TODO: implment steering 
}

bool Chasis::omni_steer(float angle, float speed)
{
  if (!omniDrive)
    return false;

  // TODO: impliment omni drive (refer to old code)
  
  return true;
}

void Chasis::drive(void)
{
  right_1->drive();
  right_2->drive();

  left_1->drive();
  left_2->drive();

  return;
}
